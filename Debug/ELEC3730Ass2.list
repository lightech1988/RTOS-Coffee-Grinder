
ELEC3730Ass2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000338c  0800d4a0  0800d4a0  0001d4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801082c  0801082c  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  0801082c  0801082c  0002082c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010834  08010834  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010834  08010834  00020834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010838  08010838  00020838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801083c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          00004edc  20000248  20000248  00030248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005124  20005124  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f595  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005765  00000000  00000000  0004f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00054f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00056a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002927d  00000000  00000000  00058258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002351e  00000000  00000000  000814d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7c37  00000000  00000000  000a49f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c62a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f2c  00000000  00000000  0018c67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  001945a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000003c  00000000  00000000  001945cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d488 	.word	0x0800d488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800d488 	.word	0x0800d488

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_ADC_ConvCpltCallback>:
 * 		mapping function so that values can range from 50 to 150. The value is used to set the grind time from 5000 to
 * 		15000 milliseconds or 5 to 15 seconds. Time delay of tasks were taken into consideration.
 * 		@param hadc:		Pointer to ADC handler.
 * 		@retval: 			None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	adc_value = ((4096.0 - adc_value) * 100.0 / 4096.0) + 50.0;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x70>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fb03 	bl	8000504 <__aeabi_ui2d>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4916      	ldr	r1, [pc, #88]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f08:	f7ff f9be 	bl	8000288 <__aeabi_dsub>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f1a:	f7ff fb6d 	bl	80005f8 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f2c:	f7ff fc8e 	bl	800084c <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f3e:	f7ff f9a5 	bl	800028c <__adddf3>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fe2d 	bl	8000ba8 <__aeabi_d2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a02      	ldr	r2, [pc, #8]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000264 	.word	0x20000264
 8000f60:	40b00000 	.word	0x40b00000
 8000f64:	40590000 	.word	0x40590000
 8000f68:	40490000 	.word	0x40490000

08000f6c <StartADCTask>:
 * 		@brief Function implementing the ADC task/thread that runs a looping executive.
 * 		@param argument:	Not used
 * 		@retval: 			None
 */
void StartADCTask(void const * argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	while(1) {
		if (state == OFF) {					// If in the 'off' state, start the timer to trigger adc dma request
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <StartADCTask+0x28>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d107      	bne.n	8000f8c <StartADCTask+0x20>
			HAL_TIM_Base_Start(&htim2);
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <StartADCTask+0x2c>)
 8000f7e:	f005 fd8b 	bl	8006a98 <HAL_TIM_Base_Start>
			HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	4905      	ldr	r1, [pc, #20]	; (8000f9c <StartADCTask+0x30>)
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <StartADCTask+0x34>)
 8000f88:	f002 fc5e 	bl	8003848 <HAL_ADC_Start_DMA>
		}
		osDelay(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f006 fb72 	bl	8007676 <osDelay>
		if (state == OFF) {					// If in the 'off' state, start the timer to trigger adc dma request
 8000f92:	e7ef      	b.n	8000f74 <StartADCTask+0x8>
 8000f94:	20000268 	.word	0x20000268
 8000f98:	20000b44 	.word	0x20000b44
 8000f9c:	20000264 	.word	0x20000264
 8000fa0:	2000026c 	.word	0x2000026c

08000fa4 <display_state_lcd>:
 * 		@param state[]:		String for the current state to display as a title.
 * 		@param isPaused:	Boolean as to whether the system is in the paused state.
 * 		@retval: 			None
 */
void display_state_lcd(char state[], bool isPaused)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_Clear(LCD_COLOR_WHITE);										// Clear the LCD and set background to white
 8000fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fb4:	f001 fbdc 	bl	8002770 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font24);											// Set the font to be used
 8000fb8:	481a      	ldr	r0, [pc, #104]	; (8001024 <display_state_lcd+0x80>)
 8000fba:	f001 fbbd 	bl	8002738 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);								// Set the text colour to black
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f001 fbaa 	bl	8002718 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)state, CENTER_MODE);		// Display status as OFF
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	2150      	movs	r1, #80	; 0x50
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f001 fc2e 	bl	800282c <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetFont(&Font20);											// Set the font to be used for buttons
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <display_state_lcd+0x84>)
 8000fd2:	f001 fbb1 	bl	8002738 <BSP_LCD_SetFont>

	BSP_LCD_DrawRect(BTN1_X_POS, BTN_Y_POS, BTN_WIDTH, BTN_HEIGHT);		// Draw a rectangle for the first button
 8000fd6:	231e      	movs	r3, #30
 8000fd8:	2264      	movs	r2, #100	; 0x64
 8000fda:	218c      	movs	r1, #140	; 0x8c
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f001 fd3f 	bl	8002a60 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(BTN2_X_POS, BTN_Y_POS, BTN_WIDTH, BTN_HEIGHT);		// Draw a rectangle for the second button
 8000fe2:	231e      	movs	r3, #30
 8000fe4:	2264      	movs	r2, #100	; 0x64
 8000fe6:	218c      	movs	r1, #140	; 0x8c
 8000fe8:	20b4      	movs	r0, #180	; 0xb4
 8000fea:	f001 fd39 	bl	8002a60 <BSP_LCD_DrawRect>

	if (isPaused)														// Show 'resume' button if paused
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <display_state_lcd+0x5e>
		BSP_LCD_DisplayStringAt((BTN1_X_POS + 8), BTN_TEXT_Y_POS, (uint8_t*)"Resume", LEFT_MODE);
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	4a0d      	ldr	r2, [pc, #52]	; (800102c <display_state_lcd+0x88>)
 8000ff8:	2191      	movs	r1, #145	; 0x91
 8000ffa:	2030      	movs	r0, #48	; 0x30
 8000ffc:	f001 fc16 	bl	800282c <BSP_LCD_DisplayStringAt>
 8001000:	e005      	b.n	800100e <display_state_lcd+0x6a>
	else																// Otherwise, show 'start' button
		BSP_LCD_DisplayStringAt((BTN1_X_POS + 15), BTN_TEXT_Y_POS, (uint8_t*)"Start", LEFT_MODE);
 8001002:	2303      	movs	r3, #3
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <display_state_lcd+0x8c>)
 8001006:	2191      	movs	r1, #145	; 0x91
 8001008:	2037      	movs	r0, #55	; 0x37
 800100a:	f001 fc0f 	bl	800282c <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt((BTN2_X_POS + 15), BTN_TEXT_Y_POS, (uint8_t*)"Pause", LEFT_MODE);
 800100e:	2303      	movs	r3, #3
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <display_state_lcd+0x90>)
 8001012:	2191      	movs	r1, #145	; 0x91
 8001014:	20c3      	movs	r0, #195	; 0xc3
 8001016:	f001 fc09 	bl	800282c <BSP_LCD_DisplayStringAt>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000005c 	.word	0x2000005c
 8001028:	20000054 	.word	0x20000054
 800102c:	0800d4a0 	.word	0x0800d4a0
 8001030:	0800d4a8 	.word	0x0800d4a8
 8001034:	0800d4b0 	.word	0x0800d4b0

08001038 <StartControlTask>:
 * 		@brief Function implementing the control task/thread that runs a looping executive with a finite state machine.
 * 		@param argument: 	Not used
 * 		@retval: 			None
 */
void StartControlTask(void const * argument)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b08d      	sub	sp, #52	; 0x34
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	BSP_LCD_Init();							// Initialize the LCD
 8001040:	f001 fb18 	bl	8002674 <BSP_LCD_Init>
	BSP_LCD_DisplayOn();					// Enable the LCD
 8001044:	f001 fd8a 	bl	8002b5c <BSP_LCD_DisplayOn>
	TouchPanel_Calibrate();					// Touch Panel configuration
 8001048:	f002 faf4 	bl	8003634 <TouchPanel_Calibrate>
	osEvent event;							// Event structure to receive message from queue
	uint16_t dac_data[DAC_SAMPLES] = {128, 218, 255, 218, 128, 37, 0, 37};
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <StartControlTask+0xe0>)
 800104e:	f107 040c 	add.w	r4, r7, #12
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	display_state_lcd("OFF", 0);			// Initial display of off state on the lcd
 8001058:	2100      	movs	r1, #0
 800105a:	4830      	ldr	r0, [pc, #192]	; (800111c <StartControlTask+0xe4>)
 800105c:	f7ff ffa2 	bl	8000fa4 <display_state_lcd>

	while (1) {
		event = osMessageGet(messageQueueHandle, osWaitForever);	// Wait and get message
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <StartControlTask+0xe8>)
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fc33 	bl	80078d8 <osMessageGet>
		if (event.status == 0x10 && state != event.value.v) {
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	2b10      	cmp	r3, #16
 8001076:	d14b      	bne.n	8001110 <StartControlTask+0xd8>
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <StartControlTask+0xec>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	429a      	cmp	r2, r3
 8001082:	d045      	beq.n	8001110 <StartControlTask+0xd8>
			switch (event.value.v) {
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d02a      	beq.n	80010e0 <StartControlTask+0xa8>
 800108a:	2b02      	cmp	r3, #2
 800108c:	d83c      	bhi.n	8001108 <StartControlTask+0xd0>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <StartControlTask+0x60>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d00e      	beq.n	80010b4 <StartControlTask+0x7c>
 8001096:	e037      	b.n	8001108 <StartControlTask+0xd0>
				case (OFF):
					display_state_lcd("OFF", 0);					// Display the 'off' state
 8001098:	2100      	movs	r1, #0
 800109a:	4820      	ldr	r0, [pc, #128]	; (800111c <StartControlTask+0xe4>)
 800109c:	f7ff ff82 	bl	8000fa4 <display_state_lcd>
					osTimerStop(pauseTimerHandle);					// Stop the pause timer
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <StartControlTask+0xf0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f006 fb73 	bl	8007790 <osTimerStop>
					HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);			// Stop the speaker
 80010aa:	2100      	movs	r1, #0
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <StartControlTask+0xf4>)
 80010ae:	f003 f961 	bl	8004374 <HAL_DAC_Stop_DMA>
					break;
 80010b2:	e029      	b.n	8001108 <StartControlTask+0xd0>
				case(GRINDING):
					display_state_lcd("GRINDING", 0);				// Display the 'grind' state
 80010b4:	2100      	movs	r1, #0
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <StartControlTask+0xf8>)
 80010b8:	f7ff ff74 	bl	8000fa4 <display_state_lcd>
					osTimerStop(pauseTimerHandle);					// Stop the pause timer
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <StartControlTask+0xf0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 fb65 	bl	8007790 <osTimerStop>
					HAL_TIM_Base_Start(&htim2);						// Start the speaker
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <StartControlTask+0xfc>)
 80010c8:	f005 fce6 	bl	8006a98 <HAL_TIM_Base_Start>
					HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_data, DAC_SAMPLES, DAC_ALIGN_12B_R);
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2308      	movs	r3, #8
 80010d6:	2100      	movs	r1, #0
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <StartControlTask+0xf4>)
 80010da:	f003 f87d 	bl	80041d8 <HAL_DAC_Start_DMA>
					break;
 80010de:	e013      	b.n	8001108 <StartControlTask+0xd0>
				case(PAUSED):
					if (state != OFF) {
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <StartControlTask+0xec>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00e      	beq.n	8001106 <StartControlTask+0xce>
						display_state_lcd("PAUSED", 1);				// Display the 'paused' state
 80010e8:	2101      	movs	r1, #1
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <StartControlTask+0x100>)
 80010ec:	f7ff ff5a 	bl	8000fa4 <display_state_lcd>
						osTimerStart(pauseTimerHandle, 20000);		// Start the pause timer
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <StartControlTask+0xf0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fb05 	bl	8007708 <osTimerStart>
						HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);		// Stop the speaker
 80010fe:	2100      	movs	r1, #0
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <StartControlTask+0xf4>)
 8001102:	f003 f937 	bl	8004374 <HAL_DAC_Stop_DMA>
					}
					break;
 8001106:	bf00      	nop
			}
			state = event.value.v;									// Change states
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <StartControlTask+0xec>)
 800110e:	701a      	strb	r2, [r3, #0]
		}
		osDelay(100);
 8001110:	2064      	movs	r0, #100	; 0x64
 8001112:	f006 fab0 	bl	8007676 <osDelay>
		event = osMessageGet(messageQueueHandle, osWaitForever);	// Wait and get message
 8001116:	e7a3      	b.n	8001060 <StartControlTask+0x28>
 8001118:	0800d4d0 	.word	0x0800d4d0
 800111c:	0800d4b8 	.word	0x0800d4b8
 8001120:	2000039c 	.word	0x2000039c
 8001124:	20000268 	.word	0x20000268
 8001128:	200003a0 	.word	0x200003a0
 800112c:	20000314 	.word	0x20000314
 8001130:	0800d4bc 	.word	0x0800d4bc
 8001134:	20000b44 	.word	0x20000b44
 8001138:	0800d4c8 	.word	0x0800d4c8

0800113c <StartGrindTimerTask>:
 * 		@brief Function implementing the grind task/thread that runs a looping executive.
 * 		@param argument: 	Not used
 * 		@retval: 			None
 */
void StartGrindTimerTask(void const * argument)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uint32_t current_grind_time = 0;					// The current grind time
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
	while(1) {
		switch (state) {
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <StartGrindTimerTask+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d01b      	beq.n	8001188 <StartGrindTimerTask+0x4c>
 8001150:	2b02      	cmp	r3, #2
 8001152:	dc1a      	bgt.n	800118a <StartGrindTimerTask+0x4e>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <StartGrindTimerTask+0x22>
 8001158:	2b01      	cmp	r3, #1
 800115a:	d003      	beq.n	8001164 <StartGrindTimerTask+0x28>
 800115c:	e015      	b.n	800118a <StartGrindTimerTask+0x4e>
			case OFF:
				current_grind_time = 0;					// Reset the current time in 'off' state
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
				break;
 8001162:	e012      	b.n	800118a <StartGrindTimerTask+0x4e>
			case GRINDING:
				if(current_grind_time >= adc_value)		// Send 'off' state message to queue if time exceeds grind time
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <StartGrindTimerTask+0x5c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	429a      	cmp	r2, r3
 800116c:	d308      	bcc.n	8001180 <StartGrindTimerTask+0x44>
					osMessagePut(messageQueueHandle, OFF, osWaitForever);
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <StartGrindTimerTask+0x60>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fb6d 	bl	8007858 <osMessagePut>
				else									// If time does not exceed, increment it
					current_grind_time++;
				break;
 800117e:	e004      	b.n	800118a <StartGrindTimerTask+0x4e>
					current_grind_time++;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
				break;
 8001186:	e000      	b.n	800118a <StartGrindTimerTask+0x4e>
			case PAUSED:
				break;
 8001188:	bf00      	nop
		}
	osDelay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f006 fa73 	bl	8007676 <osDelay>
		switch (state) {
 8001190:	e7da      	b.n	8001148 <StartGrindTimerTask+0xc>
 8001192:	bf00      	nop
 8001194:	20000268 	.word	0x20000268
 8001198:	20000264 	.word	0x20000264
 800119c:	2000039c 	.word	0x2000039c

080011a0 <PauseTimerCallback>:
 * 		@brief Callback function for when virtual timer ends. When timer ends, send off state to control task.
 * 		@param argument: Not used
 * 		@retval: None
 */
void PauseTimerCallback(void const * argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	osMessagePut(messageQueueHandle, OFF, osWaitForever);
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <PauseTimerCallback+0x20>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fb50 	bl	8007858 <osMessagePut>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000039c 	.word	0x2000039c

080011c4 <StartTouchPanelTask>:
 * 		looping executive.
 * 		@param argument: Not used
 * 		@retval: None
 */
void StartTouchPanelTask(void const * argument)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	while (1) {
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 80011cc:	f001 fec6 	bl	8002f5c <Read_Ads7846>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <StartTouchPanelTask+0x6c>)
 80011d4:	4619      	mov	r1, r3
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <StartTouchPanelTask+0x70>)
 80011d8:	f002 f989 	bl	80034ee <getDisplayPoint>
		// If touched within correct y coordinates, check x coordinates
		if (display.y >= BTN_Y_POS && display.y <= BTN_Y_POS + BTN_HEIGHT) {
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <StartTouchPanelTask+0x70>)
 80011de:	885b      	ldrh	r3, [r3, #2]
 80011e0:	2b8b      	cmp	r3, #139	; 0x8b
 80011e2:	d920      	bls.n	8001226 <StartTouchPanelTask+0x62>
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <StartTouchPanelTask+0x70>)
 80011e6:	885b      	ldrh	r3, [r3, #2]
 80011e8:	2baa      	cmp	r3, #170	; 0xaa
 80011ea:	d81c      	bhi.n	8001226 <StartTouchPanelTask+0x62>
			switch (display.x) {
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <StartTouchPanelTask+0x70>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	2b8c      	cmp	r3, #140	; 0x8c
 80011f2:	dc02      	bgt.n	80011fa <StartTouchPanelTask+0x36>
 80011f4:	2b28      	cmp	r3, #40	; 0x28
 80011f6:	da04      	bge.n	8001202 <StartTouchPanelTask+0x3e>
 80011f8:	e016      	b.n	8001228 <StartTouchPanelTask+0x64>
 80011fa:	3bb4      	subs	r3, #180	; 0xb4
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d813      	bhi.n	8001228 <StartTouchPanelTask+0x64>
 8001200:	e008      	b.n	8001214 <StartTouchPanelTask+0x50>
				case BTN1_X_POS ... BTN1_X_POS + BTN_WIDTH:
					// Tell Control Task that button one has been pressed
					osMessagePut(messageQueueHandle, GRINDING, osWaitForever);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <StartTouchPanelTask+0x74>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f04f 32ff 	mov.w	r2, #4294967295
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f006 fb23 	bl	8007858 <osMessagePut>
					break;
 8001212:	e009      	b.n	8001228 <StartTouchPanelTask+0x64>
				case BTN2_X_POS ... BTN2_X_POS + BTN_WIDTH:
					// Tell Control Task that button two has been pressed
					osMessagePut(messageQueueHandle, PAUSED, osWaitForever);
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <StartTouchPanelTask+0x74>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fb1a 	bl	8007858 <osMessagePut>
					break;
 8001224:	e000      	b.n	8001228 <StartTouchPanelTask+0x64>
			}
		}
 8001226:	bf00      	nop
		osDelay(100);
 8001228:	2064      	movs	r0, #100	; 0x64
 800122a:	f006 fa24 	bl	8007676 <osDelay>
		getDisplayPoint(&display, Read_Ads7846(), &matrix);
 800122e:	e7cd      	b.n	80011cc <StartTouchPanelTask+0x8>
 8001230:	20001188 	.word	0x20001188
 8001234:	200011c0 	.word	0x200011c0
 8001238:	2000039c 	.word	0x2000039c

0800123c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <MX_ADC1_Init+0xa0>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001256:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800125a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800126a:	2200      	movs	r2, #0
 800126c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001280:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800128e:	2201      	movs	r2, #1
 8001290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_ADC1_Init+0x9c>)
 80012a2:	f002 fa8d 	bl	80037c0 <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80012ac:	f000 fc28 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012b0:	2306      	movs	r3, #6
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC1_Init+0x9c>)
 80012c2:	f002 fbe5 	bl	8003a90 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012cc:	f000 fc18 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000026c 	.word	0x2000026c
 80012dc:	40012000 	.word	0x40012000

080012e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_ADC_MspInit+0xdc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d157      	bne.n	80013b2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_ADC_MspInit+0xe0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133a:	2340      	movs	r3, #64	; 0x40
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <HAL_ADC_MspInit+0xe4>)
 800134e:	f003 fdc1 	bl	8004ed4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_ADC_MspInit+0xec>)
 8001356:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001370:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 8001398:	f003 f99a 	bl	80046d0 <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013a2:	f000 fbad 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_ADC_MspInit+0xe8>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	200002b4 	.word	0x200002b4
 80013cc:	40026410 	.word	0x40026410

080013d0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_DAC_Init+0x4c>)
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DAC_Init+0x50>)
 80013e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_DAC_Init+0x4c>)
 80013e6:	f002 fed5 	bl	8004194 <HAL_DAC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80013f0:	f000 fb86 	bl	8001b00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013f4:	2324      	movs	r3, #36	; 0x24
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_DAC_Init+0x4c>)
 8001404:	f003 f880 	bl	8004508 <HAL_DAC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800140e:	f000 fb77 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000314 	.word	0x20000314
 8001420:	40007400 	.word	0x40007400

08001424 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_DAC_MspInit+0xec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d160      	bne.n	8001508 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b32      	ldr	r3, [pc, #200]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 8001450:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_DAC_MspInit+0xf0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800147e:	2310      	movs	r3, #16
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4821      	ldr	r0, [pc, #132]	; (8001518 <HAL_DAC_MspInit+0xf4>)
 8001492:	f003 fd1f 	bl	8004ed4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_DAC_MspInit+0xf8>)
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_DAC_MspInit+0xfc>)
 800149a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_DAC_MspInit+0xf8>)
 800149e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014a2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014a6:	2240      	movs	r2, #64	; 0x40
 80014a8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014be:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ce:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014de:	f003 f8f7 	bl	80046d0 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80014e8:	f000 fb0a 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_DAC_MspInit+0xf8>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2036      	movs	r0, #54	; 0x36
 80014fe:	f002 fe1f 	bl	8004140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001502:	2036      	movs	r0, #54	; 0x36
 8001504:	f002 fe38 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40007400 	.word	0x40007400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	20000328 	.word	0x20000328
 8001520:	40026088 	.word	0x40026088

08001524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_DMA_Init+0x68>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <MX_DMA_Init+0x68>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_DMA_Init+0x68>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_DMA_Init+0x68>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <MX_DMA_Init+0x68>)
 8001550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_DMA_Init+0x68>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2105      	movs	r1, #5
 8001566:	2010      	movs	r0, #16
 8001568:	f002 fdea 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800156c:	2010      	movs	r0, #16
 800156e:	f002 fe03 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2105      	movs	r1, #5
 8001576:	2038      	movs	r0, #56	; 0x38
 8001578:	f002 fde2 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800157c:	2038      	movs	r0, #56	; 0x38
 800157e:	f002 fdfb 	bl	8004178 <HAL_NVIC_EnableIRQ>

}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <vApplicationGetIdleTaskMemory+0x2c>)
 80015a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <vApplicationGetIdleTaskMemory+0x30>)
 80015a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200003a4 	.word	0x200003a4
 80015c0:	200003f8 	.word	0x200003f8

080015c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80015d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <vApplicationGetTimerTaskMemory+0x30>)
 80015da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200005f8 	.word	0x200005f8
 80015f4:	2000064c 	.word	0x2000064c

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b0aa      	sub	sp, #168	; 0xa8
 80015fc:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of pauseTimer */
  osTimerDef(pauseTimer, PauseTimerCallback);
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <MX_FREERTOS_Init+0x108>)
 8001600:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  pauseTimerHandle = osTimerCreate(osTimer(pauseTimer), osTimerOnce, NULL);
 800160a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f006 f844 	bl	80076a0 <osTimerCreate>
 8001618:	4603      	mov	r3, r0
 800161a:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <MX_FREERTOS_Init+0x10c>)
 800161c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of messageQueue */
  osMessageQDef(messageQueue, 16, uint32_t);
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_FREERTOS_Init+0x110>)
 8001620:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  messageQueueHandle = osMessageCreate(osMessageQ(messageQueue), NULL);
 800162a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f006 f8e9 	bl	8007808 <osMessageCreate>
 8001636:	4603      	mov	r3, r0
 8001638:	4a34      	ldr	r2, [pc, #208]	; (800170c <MX_FREERTOS_Init+0x114>)
 800163a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <MX_FREERTOS_Init+0x118>)
 800163e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001642:	461d      	mov	r5, r3
 8001644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800164c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001650:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 ffc1 	bl	80075de <osThreadCreate>
 800165c:	4603      	mov	r3, r0
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <MX_FREERTOS_Init+0x11c>)
 8001660:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, StartControlTask, osPriorityNormal, 0, 128);
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <MX_FREERTOS_Init+0x120>)
 8001664:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001668:	461d      	mov	r5, r3
 800166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8001676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f005 ffae 	bl	80075de <osThreadCreate>
 8001682:	4603      	mov	r3, r0
 8001684:	4a25      	ldr	r2, [pc, #148]	; (800171c <MX_FREERTOS_Init+0x124>)
 8001686:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchPanelTask */
  osThreadDef(touchPanelTask, StartTouchPanelTask, osPriorityNormal, 0, 128);
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_FREERTOS_Init+0x128>)
 800168a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchPanelTaskHandle = osThreadCreate(osThread(touchPanelTask), NULL);
 800169c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 ff9b 	bl	80075de <osThreadCreate>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <MX_FREERTOS_Init+0x12c>)
 80016ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of grindTimerTask */
  osThreadDef(grindTimerTask, StartGrindTimerTask, osPriorityNormal, 0, 128);
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_FREERTOS_Init+0x130>)
 80016b0:	f107 0420 	add.w	r4, r7, #32
 80016b4:	461d      	mov	r5, r3
 80016b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  grindTimerTaskHandle = osThreadCreate(osThread(grindTimerTask), NULL);
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 ff88 	bl	80075de <osThreadCreate>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a16      	ldr	r2, [pc, #88]	; (800172c <MX_FREERTOS_Init+0x134>)
 80016d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartADCTask, osPriorityNormal, 0, 128);
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_FREERTOS_Init+0x138>)
 80016d6:	1d3c      	adds	r4, r7, #4
 80016d8:	461d      	mov	r5, r3
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 ff77 	bl	80075de <osThreadCreate>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <MX_FREERTOS_Init+0x13c>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016f6:	bf00      	nop
 80016f8:	37a8      	adds	r7, #168	; 0xa8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}
 80016fe:	bf00      	nop
 8001700:	080011a1 	.word	0x080011a1
 8001704:	200003a0 	.word	0x200003a0
 8001708:	0800d520 	.word	0x0800d520
 800170c:	2000039c 	.word	0x2000039c
 8001710:	0800d530 	.word	0x0800d530
 8001714:	20000388 	.word	0x20000388
 8001718:	0800d54c 	.word	0x0800d54c
 800171c:	2000038c 	.word	0x2000038c
 8001720:	0800d568 	.word	0x0800d568
 8001724:	20000390 	.word	0x20000390
 8001728:	0800d584 	.word	0x0800d584
 800172c:	20000394 	.word	0x20000394
 8001730:	0800d5a0 	.word	0x0800d5a0
 8001734:	20000398 	.word	0x20000398

08001738 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void const * argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f005 ff98 	bl	8007676 <osDelay>
 8001746:	e7fb      	b.n	8001740 <StartDefaultTask+0x8>

08001748 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001762:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001766:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_FSMC_Init+0xb8>)
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <MX_FSMC_Init+0xbc>)
 800176c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_FSMC_Init+0xb8>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001782:	2210      	movs	r2, #16
 8001784:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_FSMC_Init+0xb8>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_FSMC_Init+0xb8>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_FSMC_Init+0xb8>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 80017cc:	2328      	movs	r3, #40	; 0x28
 80017ce:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80017d4:	2310      	movs	r3, #16
 80017d6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80017d8:	2311      	movs	r3, #17
 80017da:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_FSMC_Init+0xb8>)
 80017e8:	f005 f8be 	bl	8006968 <HAL_SRAM_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80017f2:	f000 f985 	bl	8001b00 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000a4c 	.word	0x20000a4c
 8001804:	a0000104 	.word	0xa0000104

08001808 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_FSMC_MspInit+0x88>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d131      	bne.n	8001888 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_FSMC_MspInit+0x88>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_FSMC_MspInit+0x8c>)
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <HAL_FSMC_MspInit+0x8c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6393      	str	r3, [r2, #56]	; 0x38
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_FSMC_MspInit+0x8c>)
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001846:	f64f 7380 	movw	r3, #65408	; 0xff80
 800184a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001858:	230c      	movs	r3, #12
 800185a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <HAL_FSMC_MspInit+0x90>)
 8001862:	f003 fb37 	bl	8004ed4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001866:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800186a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001878:	230c      	movs	r3, #12
 800187a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <HAL_FSMC_MspInit+0x94>)
 8001882:	f003 fb27 	bl	8004ed4 <HAL_GPIO_Init>
 8001886:	e000      	b.n	800188a <HAL_FSMC_MspInit+0x82>
    return;
 8001888:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000a9c 	.word	0x20000a9c
 8001894:	40023800 	.word	0x40023800
 8001898:	40021000 	.word	0x40021000
 800189c:	40020c00 	.word	0x40020c00

080018a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018a8:	f7ff ffae 	bl	8001808 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <MX_GPIO_Init+0x110>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <MX_GPIO_Init+0x110>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2110      	movs	r1, #16
 800195a:	481b      	ldr	r0, [pc, #108]	; (80019c8 <MX_GPIO_Init+0x114>)
 800195c:	f003 fc6e 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2101      	movs	r1, #1
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <MX_GPIO_Init+0x118>)
 8001966:	f003 fc69 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 800196a:	2310      	movs	r3, #16
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4811      	ldr	r0, [pc, #68]	; (80019c8 <MX_GPIO_Init+0x114>)
 8001982:	f003 faa7 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8001986:	2320      	movs	r3, #32
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_GPIO_Init+0x114>)
 800199a:	f003 fa9b 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 800199e:	2301      	movs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_GPIO_Init+0x118>)
 80019b6:	f003 fa8d 	bl	8004ed4 <HAL_GPIO_Init>

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020400 	.word	0x40020400

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80019d4:	f008 ff8a 	bl	800a8ec <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f001 fe8c 	bl	80036f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 f814 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff ff68 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e4:	f7ff fd9e 	bl	8001524 <MX_DMA_Init>
  MX_FSMC_Init();
 80019e8:	f7ff feae 	bl	8001748 <MX_FSMC_Init>
  MX_SPI2_Init();
 80019ec:	f000 f88e 	bl	8001b0c <MX_SPI2_Init>
  MX_ADC1_Init();
 80019f0:	f7ff fc24 	bl	800123c <MX_ADC1_Init>
  MX_DAC_Init();
 80019f4:	f7ff fcec 	bl	80013d0 <MX_DAC_Init>
  MX_TIM2_Init();
 80019f8:	f000 fa46 	bl	8001e88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80019fc:	f7ff fdfc 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a00:	f005 fde6 	bl	80075d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <main+0x34>
	...

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f009 f915 	bl	800ac46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2302      	movs	r3, #2
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a7c:	23a8      	movs	r3, #168	; 0xa8
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fbef 	bl	8005270 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a98:	f000 f832 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fe50 	bl	8005760 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ac6:	f000 f81b 	bl	8001b00 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3750      	adds	r7, #80	; 0x50
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aee:	f001 fe23 	bl	8003738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40001000 	.word	0x40001000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <MX_SPI2_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b40:	2220      	movs	r2, #32
 8001b42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_SPI2_Init+0x64>)
 8001b5e:	f004 f83d 	bl	8005bdc <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b68:	f7ff ffca 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000aa0 	.word	0x20000aa0
 8001b74:	40003800 	.word	0x40003800

08001b78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_SPI_MspInit+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d134      	bne.n	8001c04 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_SPI_MspInit+0x98>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCDTP_CLK_Pin|LCDTP_DOUT_Pin|LCDTP_DIN_Pin;
 8001bd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be4:	2305      	movs	r3, #5
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_SPI_MspInit+0x9c>)
 8001bf0:	f003 f970 	bl	8004ed4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2024      	movs	r0, #36	; 0x24
 8001bfa:	f002 faa1 	bl	8004140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bfe:	2024      	movs	r0, #36	; 0x24
 8001c00:	f002 faba 	bl	8004178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40003800 	.word	0x40003800
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_MspInit+0x54>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_MspInit+0x54>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_MspInit+0x54>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_MspInit+0x54>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_MspInit+0x54>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_MspInit+0x54>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	210f      	movs	r1, #15
 8001c5a:	f06f 0001 	mvn.w	r0, #1
 8001c5e:	f002 fa6f 	bl	8004140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c9c:	f107 0210 	add.w	r2, r7, #16
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 ff66 	bl	8005b78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cb6:	f003 ff4b 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8001cba:	6378      	str	r0, [r7, #52]	; 0x34
 8001cbc:	e004      	b.n	8001cc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cbe:	f003 ff47 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_InitTick+0xe8>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_InitTick+0xec>)
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_InitTick+0xf0>)
 8001cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_InitTick+0xec>)
 8001cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_InitTick+0xec>)
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_InitTick+0xec>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cfc:	4817      	ldr	r0, [pc, #92]	; (8001d5c <HAL_InitTick+0xec>)
 8001cfe:	f004 fe7b 	bl	80069f8 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11b      	bne.n	8001d48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_InitTick+0xec>)
 8001d12:	f004 ff29 	bl	8006b68 <HAL_TIM_Base_Start_IT>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d24:	2036      	movs	r0, #54	; 0x36
 8001d26:	f002 fa27 	bl	8004178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d808      	bhi.n	8001d42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2036      	movs	r0, #54	; 0x36
 8001d36:	f002 fa03 	bl	8004140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_InitTick+0xf4>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e002      	b.n	8001d48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	20000af8 	.word	0x20000af8
 8001d60:	40001000 	.word	0x40001000
 8001d64:	20000064 	.word	0x20000064

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <DMA1_Stream5_IRQHandler+0x10>)
 8001d9a:	f002 fe31 	bl	8004a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000328 	.word	0x20000328

08001da8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <SPI2_IRQHandler+0x10>)
 8001dae:	f004 fb8d 	bl	80064cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000aa0 	.word	0x20000aa0

08001dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <TIM6_DAC_IRQHandler+0x20>)
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001dca:	4804      	ldr	r0, [pc, #16]	; (8001ddc <TIM6_DAC_IRQHandler+0x20>)
 8001dcc:	f002 fb1a 	bl	8004404 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <TIM6_DAC_IRQHandler+0x24>)
 8001dd2:	f004 ff39 	bl	8006c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000314 	.word	0x20000314
 8001de0:	20000af8 	.word	0x20000af8

08001de4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMA2_Stream0_IRQHandler+0x10>)
 8001dea:	f002 fe09 	bl	8004a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200002b4 	.word	0x200002b4

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f008 fddc 	bl	800a9e4 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20020000 	.word	0x20020000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000b40 	.word	0x20000b40
 8001e60:	20005128 	.word	0x20005128

08001e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001eae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ece:	4814      	ldr	r0, [pc, #80]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001ed0:	f004 fd92 	bl	80069f8 <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001eda:	f7ff fe11 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001eec:	f004 ffb4 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ef6:	f7ff fe03 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001efa:	2320      	movs	r3, #32
 8001efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f02:	463b      	mov	r3, r7
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_TIM2_Init+0x98>)
 8001f08:	f005 f9d0 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f12:	f7ff fdf5 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000b44 	.word	0x20000b44

08001f24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d10d      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_TIM_Base_MspInit+0x3c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff ff69 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f008 fe23 	bl	800abdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7ff fd1b 	bl	80019d0 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8001fa8:	0801083c 	.word	0x0801083c
  ldr r2, =_sbss
 8001fac:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001fb0:	20005124 	.word	0x20005124

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>

08001fb6 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e00c      	b.n	8001ff2 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <LCD_IO_WriteMultipleData+0x44>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	8013      	strh	r3, [r2, #0]
    counter--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ef      	bne.n	8001fd8 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	60020000 	.word	0x60020000

0800200c <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8002016:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	b292      	uxth	r2, r2
 800201e:	801a      	strh	r2, [r3, #0]

}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <LCD_IO_ReadData+0x14>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
  
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	60020000 	.word	0x60020000

08002044 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002048:	f7ff ffb5 	bl	8001fb6 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 800204c:	2101      	movs	r1, #1
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f9a7 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8002054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002058:	2001      	movs	r0, #1
 800205a:	f000 f9a2 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 800205e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002062:	2002      	movs	r0, #2
 8002064:	f000 f99d 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8002068:	f241 0118 	movw	r1, #4120	; 0x1018
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f998 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8002072:	2100      	movs	r1, #0
 8002074:	2004      	movs	r0, #4
 8002076:	f000 f994 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 800207a:	f240 2102 	movw	r1, #514	; 0x202
 800207e:	2008      	movs	r0, #8
 8002080:	f000 f98f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8002084:	2100      	movs	r1, #0
 8002086:	2009      	movs	r0, #9
 8002088:	f000 f98b 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 800208c:	2100      	movs	r1, #0
 800208e:	200a      	movs	r0, #10
 8002090:	f000 f987 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8002094:	2100      	movs	r1, #0
 8002096:	200c      	movs	r0, #12
 8002098:	f000 f983 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 800209c:	2100      	movs	r1, #0
 800209e:	200d      	movs	r0, #13
 80020a0:	f000 f97f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 80020a4:	2100      	movs	r1, #0
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f97b 	bl	80023a2 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80020ac:	2100      	movs	r1, #0
 80020ae:	2010      	movs	r0, #16
 80020b0:	f000 f977 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80020b4:	2100      	movs	r1, #0
 80020b6:	2011      	movs	r0, #17
 80020b8:	f000 f973 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80020bc:	2100      	movs	r1, #0
 80020be:	2012      	movs	r0, #18
 80020c0:	f000 f96f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80020c4:	2100      	movs	r1, #0
 80020c6:	2013      	movs	r0, #19
 80020c8:	f000 f96b 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80020cc:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80020d0:	2010      	movs	r0, #16
 80020d2:	f000 f966 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80020d6:	f240 1137 	movw	r1, #311	; 0x137
 80020da:	2011      	movs	r0, #17
 80020dc:	f000 f961 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80020e0:	f240 1139 	movw	r1, #313	; 0x139
 80020e4:	2012      	movs	r0, #18
 80020e6:	f000 f95c 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80020ea:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80020ee:	2013      	movs	r0, #19
 80020f0:	f000 f957 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80020f4:	2113      	movs	r1, #19
 80020f6:	2029      	movs	r0, #41	; 0x29
 80020f8:	f000 f953 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 80020fc:	2100      	movs	r1, #0
 80020fe:	2020      	movs	r0, #32
 8002100:	f000 f94f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8002104:	2100      	movs	r1, #0
 8002106:	2021      	movs	r0, #33	; 0x21
 8002108:	f000 f94b 	bl	80023a2 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 800210c:	2107      	movs	r1, #7
 800210e:	2030      	movs	r0, #48	; 0x30
 8002110:	f000 f947 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8002114:	f240 3102 	movw	r1, #770	; 0x302
 8002118:	2031      	movs	r0, #49	; 0x31
 800211a:	f000 f942 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 800211e:	f240 1105 	movw	r1, #261	; 0x105
 8002122:	2032      	movs	r0, #50	; 0x32
 8002124:	f000 f93d 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8002128:	f240 2106 	movw	r1, #518	; 0x206
 800212c:	2035      	movs	r0, #53	; 0x35
 800212e:	f000 f938 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8002132:	f640 0108 	movw	r1, #2056	; 0x808
 8002136:	2036      	movs	r0, #54	; 0x36
 8002138:	f000 f933 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 800213c:	f240 2106 	movw	r1, #518	; 0x206
 8002140:	2037      	movs	r0, #55	; 0x37
 8002142:	f000 f92e 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8002146:	f240 5104 	movw	r1, #1284	; 0x504
 800214a:	2038      	movs	r0, #56	; 0x38
 800214c:	f000 f929 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8002150:	2107      	movs	r1, #7
 8002152:	2039      	movs	r0, #57	; 0x39
 8002154:	f000 f925 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8002158:	f240 1105 	movw	r1, #261	; 0x105
 800215c:	203c      	movs	r0, #60	; 0x3c
 800215e:	f000 f920 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8002162:	f640 0108 	movw	r1, #2056	; 0x808
 8002166:	203d      	movs	r0, #61	; 0x3d
 8002168:	f000 f91b 	bl	80023a2 <ili9325_WriteReg>
  HAL_Delay(50); 
 800216c:	2032      	movs	r0, #50	; 0x32
 800216e:	f001 fb03 	bl	8003778 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8002172:	2100      	movs	r1, #0
 8002174:	2050      	movs	r0, #80	; 0x50
 8002176:	f000 f914 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 800217a:	21ef      	movs	r1, #239	; 0xef
 800217c:	2051      	movs	r0, #81	; 0x51
 800217e:	f000 f910 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8002182:	2100      	movs	r1, #0
 8002184:	2052      	movs	r0, #82	; 0x52
 8002186:	f000 f90c 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 800218a:	f240 113f 	movw	r1, #319	; 0x13f
 800218e:	2053      	movs	r0, #83	; 0x53
 8002190:	f000 f907 	bl	80023a2 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8002194:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8002198:	2060      	movs	r0, #96	; 0x60
 800219a:	f000 f902 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 800219e:	2101      	movs	r1, #1
 80021a0:	2061      	movs	r0, #97	; 0x61
 80021a2:	f000 f8fe 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 80021a6:	2100      	movs	r1, #0
 80021a8:	206a      	movs	r0, #106	; 0x6a
 80021aa:	f000 f8fa 	bl	80023a2 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80021ae:	2100      	movs	r1, #0
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	f000 f8f6 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80021b6:	2100      	movs	r1, #0
 80021b8:	2081      	movs	r0, #129	; 0x81
 80021ba:	f000 f8f2 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80021be:	2100      	movs	r1, #0
 80021c0:	2082      	movs	r0, #130	; 0x82
 80021c2:	f000 f8ee 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80021c6:	2100      	movs	r1, #0
 80021c8:	2083      	movs	r0, #131	; 0x83
 80021ca:	f000 f8ea 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80021ce:	2100      	movs	r1, #0
 80021d0:	2084      	movs	r0, #132	; 0x84
 80021d2:	f000 f8e6 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80021d6:	2100      	movs	r1, #0
 80021d8:	2085      	movs	r0, #133	; 0x85
 80021da:	f000 f8e2 	bl	80023a2 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80021de:	2110      	movs	r1, #16
 80021e0:	2090      	movs	r0, #144	; 0x90
 80021e2:	f000 f8de 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 80021e6:	2100      	movs	r1, #0
 80021e8:	2092      	movs	r0, #146	; 0x92
 80021ea:	f000 f8da 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 80021ee:	2103      	movs	r1, #3
 80021f0:	2093      	movs	r0, #147	; 0x93
 80021f2:	f000 f8d6 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 80021f6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80021fa:	2095      	movs	r0, #149	; 0x95
 80021fc:	f000 f8d1 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8002200:	2100      	movs	r1, #0
 8002202:	2097      	movs	r0, #151	; 0x97
 8002204:	f000 f8cd 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8002208:	2100      	movs	r1, #0
 800220a:	2098      	movs	r0, #152	; 0x98
 800220c:	f000 f8c9 	bl	80023a2 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8002210:	f241 0128 	movw	r1, #4136	; 0x1028
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f8c4 	bl	80023a2 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 800221a:	f240 1173 	movw	r1, #371	; 0x173
 800221e:	2007      	movs	r0, #7
 8002220:	f000 f8bf 	bl	80023a2 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8002224:	2100      	movs	r1, #0
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f86d 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800222c:	2022      	movs	r0, #34	; 0x22
 800222e:	f7ff feed 	bl	800200c <LCD_IO_WriteReg>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}

08002236 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800223a:	2100      	movs	r1, #0
 800223c:	2010      	movs	r0, #16
 800223e:	f000 f8b0 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002242:	2100      	movs	r1, #0
 8002244:	2011      	movs	r0, #17
 8002246:	f000 f8ac 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800224a:	2100      	movs	r1, #0
 800224c:	2012      	movs	r0, #18
 800224e:	f000 f8a8 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8002252:	2100      	movs	r1, #0
 8002254:	2013      	movs	r0, #19
 8002256:	f000 f8a4 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800225a:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800225e:	2010      	movs	r0, #16
 8002260:	f000 f89f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8002264:	f240 1137 	movw	r1, #311	; 0x137
 8002268:	2011      	movs	r0, #17
 800226a:	f000 f89a 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800226e:	f240 1139 	movw	r1, #313	; 0x139
 8002272:	2012      	movs	r0, #18
 8002274:	f000 f895 	bl	80023a2 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8002278:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800227c:	2013      	movs	r0, #19
 800227e:	f000 f890 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8002282:	2113      	movs	r1, #19
 8002284:	2029      	movs	r0, #41	; 0x29
 8002286:	f000 f88c 	bl	80023a2 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 800228a:	f240 1173 	movw	r1, #371	; 0x173
 800228e:	2007      	movs	r0, #7
 8002290:	f000 f887 	bl	80023a2 <ili9325_WriteReg>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800229c:	2100      	movs	r1, #0
 800229e:	2010      	movs	r0, #16
 80022a0:	f000 f87f 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80022a4:	2100      	movs	r1, #0
 80022a6:	2011      	movs	r0, #17
 80022a8:	f000 f87b 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80022ac:	2100      	movs	r1, #0
 80022ae:	2012      	movs	r0, #18
 80022b0:	f000 f877 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80022b4:	2100      	movs	r1, #0
 80022b6:	2013      	movs	r0, #19
 80022b8:	f000 f873 	bl	80023a2 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80022bc:	2100      	movs	r1, #0
 80022be:	2029      	movs	r0, #41	; 0x29
 80022c0:	f000 f86f 	bl	80023a2 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80022c4:	2100      	movs	r1, #0
 80022c6:	2007      	movs	r0, #7
 80022c8:	f000 f86b 	bl	80023a2 <ili9325_WriteReg>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80022d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 80022e6:	23f0      	movs	r3, #240	; 0xf0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80022f6:	f7ff fe5e 	bl	8001fb6 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f866 	bl	80023cc <ili9325_ReadReg>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}

08002306 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	460a      	mov	r2, r1
 8002310:	80fb      	strh	r3, [r7, #6]
 8002312:	4613      	mov	r3, r2
 8002314:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800231c:	b29b      	uxth	r3, r3
 800231e:	4619      	mov	r1, r3
 8002320:	2020      	movs	r0, #32
 8002322:	f000 f83e 	bl	80023a2 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4619      	mov	r1, r3
 800232a:	2021      	movs	r0, #33	; 0x21
 800232c:	f000 f839 	bl	80023a2 <ili9325_WriteReg>

}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	460b      	mov	r3, r1
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800234a:	88ba      	ldrh	r2, [r7, #4]
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ffd8 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002356:	2022      	movs	r0, #34	; 0x22
 8002358:	f7ff fe58 	bl	800200c <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 800235c:	1cbb      	adds	r3, r7, #2
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe2f 	bl	8001fc4 <LCD_IO_WriteMultipleData>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	460a      	mov	r2, r1
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	4613      	mov	r3, r2
 800237c:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800237e:	88ba      	ldrh	r2, [r7, #4]
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffbe 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800238a:	2022      	movs	r0, #34	; 0x22
 800238c:	f7ff fe3e 	bl	800200c <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8002390:	f7ff fe4c 	bl	800202c <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8002394:	f7ff fe4a 	bl	800202c <LCD_IO_ReadData>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	460a      	mov	r2, r1
 80023ac:	71fb      	strb	r3, [r7, #7]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe29 	bl	800200c <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fe00 	bl	8001fc4 <LCD_IO_WriteMultipleData>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe17 	bl	800200c <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 80023de:	f7ff fe25 	bl	800202c <LCD_IO_ReadData>
 80023e2:	4603      	mov	r3, r0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	4603      	mov	r3, r0
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 800240a:	88ba      	ldrh	r2, [r7, #4]
 800240c:	883b      	ldrh	r3, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002416:	b29b      	uxth	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	2050      	movs	r0, #80	; 0x50
 800241c:	f7ff ffc1 	bl	80023a2 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002426:	b29b      	uxth	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	2051      	movs	r0, #81	; 0x51
 800242c:	f7ff ffb9 	bl	80023a2 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4619      	mov	r1, r3
 8002434:	2052      	movs	r0, #82	; 0x52
 8002436:	f7ff ffb4 	bl	80023a2 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	2053      	movs	r0, #83	; 0x53
 800244a:	f7ff ffaa 	bl	80023a2 <ili9325_WriteReg>
  
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
	...

08002458 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	80fb      	strh	r3, [r7, #6]
 800246a:	4603      	mov	r3, r0
 800246c:	80bb      	strh	r3, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	88bb      	ldrh	r3, [r7, #4]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff40 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002486:	2022      	movs	r0, #34	; 0x22
 8002488:	f7ff fdc0 	bl	800200c <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800248c:	2300      	movs	r3, #0
 800248e:	81fb      	strh	r3, [r7, #14]
 8002490:	e007      	b.n	80024a2 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	490a      	ldr	r1, [pc, #40]	; (80024c0 <ili9325_DrawHLine+0x68>)
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 800249c:	89fb      	ldrh	r3, [r7, #14]
 800249e:	3301      	adds	r3, #1
 80024a0:	81fb      	strh	r3, [r7, #14]
 80024a2:	89fa      	ldrh	r2, [r7, #14]
 80024a4:	883b      	ldrh	r3, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3f3      	bcc.n	8002492 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4619      	mov	r1, r3
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <ili9325_DrawHLine+0x68>)
 80024b2:	f7ff fd87 	bl	8001fc4 <LCD_IO_WriteMultipleData>
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000b8c 	.word	0x20000b8c

080024c4 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4623      	mov	r3, r4
 80024d4:	80fb      	strh	r3, [r7, #6]
 80024d6:	4603      	mov	r3, r0
 80024d8:	80bb      	strh	r3, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
 80024de:	4613      	mov	r3, r2
 80024e0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 80024e6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80024ea:	2003      	movs	r0, #3
 80024ec:	f7ff ff59 	bl	80023a2 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff05 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80024fc:	2022      	movs	r0, #34	; 0x22
 80024fe:	f7ff fd85 	bl	800200c <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002502:	2300      	movs	r3, #0
 8002504:	81fb      	strh	r3, [r7, #14]
 8002506:	e007      	b.n	8002518 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <ili9325_DrawVLine+0x7c>)
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	3301      	adds	r3, #1
 8002516:	81fb      	strh	r3, [r7, #14]
 8002518:	89fa      	ldrh	r2, [r7, #14]
 800251a:	883b      	ldrh	r3, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3f3      	bcc.n	8002508 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002520:	883b      	ldrh	r3, [r7, #0]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <ili9325_DrawVLine+0x7c>)
 8002528:	f7ff fd4c 	bl	8001fc4 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 800252c:	f241 0128 	movw	r1, #4136	; 0x1028
 8002530:	2003      	movs	r0, #3
 8002532:	f7ff ff36 	bl	80023a2 <ili9325_WriteReg>
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	20000b8c 	.word	0x20000b8c

08002544 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	603a      	str	r2, [r7, #0]
 800254e:	80fb      	strh	r3, [r7, #6]
 8002550:	460b      	mov	r3, r1
 8002552:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3302      	adds	r3, #2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	330a      	adds	r3, #10
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 80025a6:	f241 0138 	movw	r1, #4152	; 0x1038
 80025aa:	2003      	movs	r0, #3
 80025ac:	f7ff fef9 	bl	80023a2 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80025b0:	88ba      	ldrh	r2, [r7, #4]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fea5 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80025bc:	2022      	movs	r0, #34	; 0x22
 80025be:	f7ff fd25 	bl	800200c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4619      	mov	r1, r3
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f7ff fcfb 	bl	8001fc4 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80025ce:	f241 0128 	movw	r1, #4136	; 0x1028
 80025d2:	2003      	movs	r0, #3
 80025d4:	f7ff fee5 	bl	80023a2 <ili9325_WriteReg>
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4604      	mov	r4, r0
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	80fb      	strh	r3, [r7, #6]
 80025f2:	4603      	mov	r3, r0
 80025f4:	80bb      	strh	r3, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
 80025fa:	4613      	mov	r3, r2
 80025fc:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	883a      	ldrh	r2, [r7, #0]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 800260c:	88ba      	ldrh	r2, [r7, #4]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fe77 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8002618:	2022      	movs	r0, #34	; 0x22
 800261a:	f7ff fcf7 	bl	800200c <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4619      	mov	r1, r3
 8002624:	6a38      	ldr	r0, [r7, #32]
 8002626:	f7ff fccd 	bl	8001fc4 <LCD_IO_WriteMultipleData>
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
	...

08002634 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 800263e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8002644:	2100      	movs	r1, #0
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fe5d 	bl	8002306 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800264c:	2022      	movs	r0, #34	; 0x22
 800264e:	f7ff fcdd 	bl	800200c <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8002652:	e002      	b.n	800265a <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <ili9325_Clear+0x3c>)
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f7      	bne.n	8002654 <ili9325_Clear+0x20>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	60020000 	.word	0x60020000

08002674 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <BSP_LCD_Init+0x64>)
 8002680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002684:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <BSP_LCD_Init+0x64>)
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <BSP_LCD_Init+0x68>)
 800268a:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <BSP_LCD_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <BSP_LCD_Init+0x6c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4798      	blx	r3
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	f249 3325 	movw	r3, #37669	; 0x9325
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d008      	beq.n	80026b6 <BSP_LCD_Init+0x42>
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <BSP_LCD_Init+0x6c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4798      	blx	r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	f249 3328 	movw	r3, #37672	; 0x9328
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10b      	bne.n	80026ce <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <BSP_LCD_Init+0x70>)
 80026b8:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <BSP_LCD_Init+0x6c>)
 80026ba:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <BSP_LCD_Init+0x70>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <BSP_LCD_Init+0x68>)
 80026c6:	f000 f837 	bl	8002738 <BSP_LCD_SetFont>

    ret = LCD_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000e0c 	.word	0x20000e0c
 80026dc:	2000005c 	.word	0x2000005c
 80026e0:	20000004 	.word	0x20000004
 80026e4:	20000e18 	.word	0x20000e18

080026e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <BSP_LCD_GetXSize+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	4798      	blx	r3
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000e18 	.word	0x20000e18

08002700 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <BSP_LCD_GetYSize+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	4798      	blx	r3
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000e18 	.word	0x20000e18

08002718 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <BSP_LCD_SetTextColor+0x1c>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000e0c 	.word	0x20000e0c

08002738 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <BSP_LCD_SetFont+0x1c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6093      	str	r3, [r2, #8]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000e0c 	.word	0x20000e0c

08002758 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <BSP_LCD_GetFont+0x14>)
 800275e:	689b      	ldr	r3, [r3, #8]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000e0c 	.word	0x20000e0c

08002770 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <BSP_LCD_Clear+0x64>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <BSP_LCD_Clear+0x64>)
 8002788:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e00d      	b.n	80027ac <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b29c      	uxth	r4, r3
 8002794:	f7ff ffa8 	bl	80026e8 <BSP_LCD_GetXSize>
 8002798:	4603      	mov	r3, r0
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	4621      	mov	r1, r4
 80027a0:	2000      	movs	r0, #0
 80027a2:	f000 f8e9 	bl	8002978 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3301      	adds	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	f7ff ffa8 	bl	8002700 <BSP_LCD_GetYSize>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d3eb      	bcc.n	8002790 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <BSP_LCD_Clear+0x64>)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <BSP_LCD_Clear+0x64>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ffa7 	bl	8002718 <BSP_LCD_SetTextColor>
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000e0c 	.word	0x20000e0c

080027d8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	460b      	mov	r3, r1
 80027e4:	80bb      	strh	r3, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <BSP_LCD_DisplayChar+0x50>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80027f4:	490c      	ldr	r1, [pc, #48]	; (8002828 <BSP_LCD_DisplayChar+0x50>)
 80027f6:	6889      	ldr	r1, [r1, #8]
 80027f8:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80027fa:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <BSP_LCD_DisplayChar+0x50>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	889b      	ldrh	r3, [r3, #4]
 8002804:	3307      	adds	r3, #7
 8002806:	2b00      	cmp	r3, #0
 8002808:	da00      	bge.n	800280c <BSP_LCD_DisplayChar+0x34>
 800280a:	3307      	adds	r3, #7
 800280c:	10db      	asrs	r3, r3, #3
 800280e:	fb01 f303 	mul.w	r3, r1, r3
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002812:	441a      	add	r2, r3
 8002814:	88b9      	ldrh	r1, [r7, #4]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f9c5 	bl	8002ba8 <LCD_DrawChar>
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000e0c 	.word	0x20000e0c

0800282c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	81fb      	strh	r3, [r7, #14]
 800283a:	460b      	mov	r3, r1
 800283c:	81bb      	strh	r3, [r7, #12]
 800283e:	4613      	mov	r3, r2
 8002840:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 8002842:	2301      	movs	r3, #1
 8002844:	83fb      	strh	r3, [r7, #30]
 8002846:	2300      	movs	r3, #0
 8002848:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002856:	e002      	b.n	800285e <BSP_LCD_DisplayStringAt+0x32>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	3301      	adds	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	617a      	str	r2, [r7, #20]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f6      	bne.n	8002858 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 800286a:	f7ff ff3d 	bl	80026e8 <BSP_LCD_GetXSize>
 800286e:	4602      	mov	r2, r0
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d014      	beq.n	80028ac <BSP_LCD_DisplayStringAt+0x80>
 8002882:	2b03      	cmp	r3, #3
 8002884:	dc23      	bgt.n	80028ce <BSP_LCD_DisplayStringAt+0xa2>
 8002886:	2b01      	cmp	r3, #1
 8002888:	d002      	beq.n	8002890 <BSP_LCD_DisplayStringAt+0x64>
 800288a:	2b02      	cmp	r3, #2
 800288c:	d011      	beq.n	80028b2 <BSP_LCD_DisplayStringAt+0x86>
 800288e:	e01e      	b.n	80028ce <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	4a2b      	ldr	r2, [pc, #172]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	8892      	ldrh	r2, [r2, #4]
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	4413      	add	r3, r2
 80028a8:	83fb      	strh	r3, [r7, #30]
      break;
 80028aa:	e013      	b.n	80028d4 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80028ac:	89fb      	ldrh	r3, [r7, #14]
 80028ae:	83fb      	strh	r3, [r7, #30]
      break;
 80028b0:	e010      	b.n	80028d4 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	889b      	ldrh	r3, [r3, #4]
 80028c0:	fb12 f303 	smulbb	r3, r2, r3
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	83fb      	strh	r3, [r7, #30]
      break;
 80028cc:	e002      	b.n	80028d4 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	83fb      	strh	r3, [r7, #30]
      break;
 80028d2:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80028d4:	e012      	b.n	80028fc <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	89b9      	ldrh	r1, [r7, #12]
 80028dc:	8bfb      	ldrh	r3, [r7, #30]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff7a 	bl	80027d8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	889a      	ldrh	r2, [r3, #4]
 80028ea:	8bfb      	ldrh	r3, [r7, #30]
 80028ec:	4413      	add	r3, r2
 80028ee:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
    counter++;
 80028f6:	8bbb      	ldrh	r3, [r7, #28]
 80028f8:	3301      	adds	r3, #1
 80028fa:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2dc      	uxtb	r4, r3
 800290a:	f7ff feed 	bl	80026e8 <BSP_LCD_GetXSize>
 800290e:	4601      	mov	r1, r0
 8002910:	8bbb      	ldrh	r3, [r7, #28]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 8002914:	6892      	ldr	r2, [r2, #8]
 8002916:	8892      	ldrh	r2, [r2, #4]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	1acb      	subs	r3, r1, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <BSP_LCD_DisplayStringAt+0x118>)
 8002922:	6892      	ldr	r2, [r2, #8]
 8002924:	8892      	ldrh	r2, [r2, #4]
 8002926:	4293      	cmp	r3, r2
 8002928:	bf2c      	ite	cs
 800292a:	2301      	movcs	r3, #1
 800292c:	2300      	movcc	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4023      	ands	r3, r4
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ce      	bne.n	80028d6 <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd90      	pop	{r4, r7, pc}
 8002942:	bf00      	nop
 8002944:	20000e0c 	.word	0x20000e0c

08002948 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 8002954:	f7ff ff00 	bl	8002758 <BSP_LCD_GetFont>
 8002958:	4603      	mov	r3, r0
 800295a:	88db      	ldrh	r3, [r3, #6]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	fb12 f303 	smulbb	r3, r2, r3
 8002962:	b299      	uxth	r1, r3
 8002964:	2303      	movs	r3, #3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff ff5f 	bl	800282c <BSP_LCD_DisplayStringAt>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
 8002982:	460b      	mov	r3, r1
 8002984:	80bb      	strh	r3, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <BSP_LCD_DrawHLine+0x6c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <BSP_LCD_DrawHLine+0x6c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a1c      	ldr	r4, [r3, #32]
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <BSP_LCD_DrawHLine+0x70>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b298      	uxth	r0, r3
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	88ba      	ldrh	r2, [r7, #4]
 80029a8:	88f9      	ldrh	r1, [r7, #6]
 80029aa:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80029ac:	e015      	b.n	80029da <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e00e      	b.n	80029d2 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	4413      	add	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <BSP_LCD_DrawHLine+0x70>)
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	b292      	uxth	r2, r2
 80029c4:	88b9      	ldrh	r1, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f8d2 	bl	8002b70 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3ec      	bcc.n	80029b4 <BSP_LCD_DrawHLine+0x3c>
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000e18 	.word	0x20000e18
 80029e8:	20000e0c 	.word	0x20000e0c

080029ec <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	460b      	mov	r3, r1
 80029f8:	80bb      	strh	r3, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <BSP_LCD_DrawVLine+0x6c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <BSP_LCD_DrawVLine+0x6c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <BSP_LCD_DrawVLine+0x70>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	b298      	uxth	r0, r3
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	88ba      	ldrh	r2, [r7, #4]
 8002a1c:	88f9      	ldrh	r1, [r7, #6]
 8002a1e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8002a20:	e015      	b.n	8002a4e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e00e      	b.n	8002a46 <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b299      	uxth	r1, r3
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <BSP_LCD_DrawVLine+0x70>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f898 	bl	8002b70 <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3ec      	bcc.n	8002a28 <BSP_LCD_DrawVLine+0x3c>
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000e18 	.word	0x20000e18
 8002a5c:	20000e0c 	.word	0x20000e0c

08002a60 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4604      	mov	r4, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	80fb      	strh	r3, [r7, #6]
 8002a72:	4603      	mov	r3, r0
 8002a74:	80bb      	strh	r3, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	807b      	strh	r3, [r7, #2]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	88b9      	ldrh	r1, [r7, #4]
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff77 	bl	8002978 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002a8a:	88ba      	ldrh	r2, [r7, #4]
 8002a8c:	883b      	ldrh	r3, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b299      	uxth	r1, r3
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff6e 	bl	8002978 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002a9c:	883a      	ldrh	r2, [r7, #0]
 8002a9e:	88b9      	ldrh	r1, [r7, #4]
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffa2 	bl	80029ec <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	4413      	add	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	883a      	ldrh	r2, [r7, #0]
 8002ab2:	88b9      	ldrh	r1, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff99 	bl	80029ec <BSP_LCD_DrawVLine>
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
	...

08002ac4 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	603a      	str	r2, [r7, #0]
 8002ace:	80fb      	strh	r3, [r7, #6]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3312      	adds	r3, #18
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3316      	adds	r3, #22
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	3318      	adds	r3, #24
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	88b9      	ldrh	r1, [r7, #4]
 8002b16:	88f8      	ldrh	r0, [r7, #6]
 8002b18:	f000 f938 	bl	8002d8c <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <BSP_LCD_DrawBitmap+0x94>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <BSP_LCD_DrawBitmap+0x94>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	88b9      	ldrh	r1, [r7, #4]
 8002b2e:	88f8      	ldrh	r0, [r7, #6]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002b34:	f7ff fdd8 	bl	80026e8 <BSP_LCD_GetXSize>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b29c      	uxth	r4, r3
 8002b3c:	f7ff fde0 	bl	8002700 <BSP_LCD_GetYSize>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4622      	mov	r2, r4
 8002b46:	2100      	movs	r1, #0
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f000 f91f 	bl	8002d8c <LCD_SetDisplayWindow>
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000e18 	.word	0x20000e18

08002b5c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <BSP_LCD_DisplayOn+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4798      	blx	r3
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000e18 	.word	0x20000e18

08002b70 <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	80bb      	strh	r3, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <LCD_DrawPixel+0x34>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <LCD_DrawPixel+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	88b9      	ldrh	r1, [r7, #4]
 8002b96:	88f8      	ldrh	r0, [r7, #6]
 8002b98:	4798      	blx	r3
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000e18 	.word	0x20000e18

08002ba8 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	603a      	str	r2, [r7, #0]
 8002bb2:	80fb      	strh	r3, [r7, #6]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	82fb      	strh	r3, [r7, #22]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8002bd8:	4b63      	ldr	r3, [pc, #396]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	88db      	ldrh	r3, [r3, #6]
 8002bde:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8002be0:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	889b      	ldrh	r3, [r3, #4]
 8002be6:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8002be8:	8afa      	ldrh	r2, [r7, #22]
 8002bea:	8abb      	ldrh	r3, [r7, #20]
 8002bec:	fb12 f303 	smulbb	r3, r2, r3
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <LCD_DrawChar+0x1c4>)
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8002bfe:	8afb      	ldrh	r3, [r7, #22]
 8002c00:	8aba      	ldrh	r2, [r7, #20]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	331b      	adds	r3, #27
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	141a      	asrs	r2, r3, #16
 8002c0c:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <LCD_DrawChar+0x1c8>)
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <LCD_DrawChar+0x1cc>)
 8002c14:	2236      	movs	r2, #54	; 0x36
 8002c16:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <LCD_DrawChar+0x1d0>)
 8002c1a:	8abb      	ldrh	r3, [r7, #20]
 8002c1c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8002c1e:	8abb      	ldrh	r3, [r7, #20]
 8002c20:	141a      	asrs	r2, r3, #16
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <LCD_DrawChar+0x1d4>)
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8002c28:	4a55      	ldr	r2, [pc, #340]	; (8002d80 <LCD_DrawChar+0x1d8>)
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8002c2e:	8afb      	ldrh	r3, [r7, #22]
 8002c30:	141a      	asrs	r2, r3, #16
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <LCD_DrawChar+0x1dc>)
 8002c34:	b292      	uxth	r2, r2
 8002c36:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	3307      	adds	r3, #7
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da00      	bge.n	8002c42 <LCD_DrawChar+0x9a>
 8002c40:	3307      	adds	r3, #7
 8002c42:	10db      	asrs	r3, r3, #3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8abb      	ldrh	r3, [r7, #20]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e078      	b.n	8002d4a <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8002c58:	8abb      	ldrh	r3, [r7, #20]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da00      	bge.n	8002c62 <LCD_DrawChar+0xba>
 8002c60:	3307      	adds	r3, #7
 8002c62:	10db      	asrs	r3, r3, #3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8002c72:	8abb      	ldrh	r3, [r7, #20]
 8002c74:	3b11      	subs	r3, #17
 8002c76:	2b07      	cmp	r3, #7
 8002c78:	d80c      	bhi.n	8002c94 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	3202      	adds	r2, #2
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	3b09      	subs	r3, #9
 8002c98:	2b07      	cmp	r3, #7
 8002c9a:	d807      	bhi.n	8002cac <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	3201      	adds	r2, #1
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8002cac:	8abb      	ldrh	r3, [r7, #20]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d802      	bhi.n	8002cba <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	e03d      	b.n	8002d3c <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8002cc0:	8afa      	ldrh	r2, [r7, #22]
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	8aba      	ldrh	r2, [r7, #20]
 8002cca:	fb03 f202 	mul.w	r2, r3, r2
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	331b      	adds	r3, #27
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8002cd8:	8aba      	ldrh	r2, [r7, #20]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	1ad2      	subs	r2, r2, r3
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b2d9      	uxtb	r1, r3
 8002cfa:	4a23      	ldr	r2, [pc, #140]	; (8002d88 <LCD_DrawChar+0x1e0>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	460a      	mov	r2, r1
 8002d02:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0a1a      	lsrs	r2, r3, #8
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2d1      	uxtb	r1, r2
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <LCD_DrawChar+0x1e0>)
 8002d12:	54d1      	strb	r1, [r2, r3]
 8002d14:	e00f      	b.n	8002d36 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	b2d9      	uxtb	r1, r3
 8002d1c:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <LCD_DrawChar+0x1e0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4413      	add	r3, r2
 8002d22:	460a      	mov	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <LCD_DrawChar+0x1c0>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	0a1a      	lsrs	r2, r3, #8
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b2d1      	uxtb	r1, r2
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <LCD_DrawChar+0x1e0>)
 8002d34:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	8abb      	ldrh	r3, [r7, #20]
 8002d3e:	6a3a      	ldr	r2, [r7, #32]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3bd      	bcc.n	8002cc0 <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	8afb      	ldrh	r3, [r7, #22]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d382      	bcc.n	8002c58 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8002d52:	88b9      	ldrh	r1, [r7, #4]
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <LCD_DrawChar+0x1e0>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff feb3 	bl	8002ac4 <BSP_LCD_DrawBitmap>
}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000e0c 	.word	0x20000e0c
 8002d6c:	20000e1e 	.word	0x20000e1e
 8002d70:	20000e20 	.word	0x20000e20
 8002d74:	20000e26 	.word	0x20000e26
 8002d78:	20000e2e 	.word	0x20000e2e
 8002d7c:	20000e30 	.word	0x20000e30
 8002d80:	20000e32 	.word	0x20000e32
 8002d84:	20000e34 	.word	0x20000e34
 8002d88:	20000e1c 	.word	0x20000e1c

08002d8c <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4604      	mov	r4, r0
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80bb      	strh	r3, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]
 8002da6:	4613      	mov	r3, r2
 8002da8:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <LCD_SetDisplayWindow+0x40>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <LCD_SetDisplayWindow+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69dc      	ldr	r4, [r3, #28]
 8002dba:	883b      	ldrh	r3, [r7, #0]
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	88b9      	ldrh	r1, [r7, #4]
 8002dc0:	88f8      	ldrh	r0, [r7, #6]
 8002dc2:	47a0      	blx	r4
  }  
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	20000e18 	.word	0x20000e18

08002dd0 <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	60fb      	str	r3, [r7, #12]
  while(i--);
 8002dde:	bf00      	nop
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	60fa      	str	r2, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1fa      	bne.n	8002de0 <DelayUS+0x10>
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 8002e02:	1df9      	adds	r1, r7, #7
 8002e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4803      	ldr	r0, [pc, #12]	; (8002e18 <WR_CMD+0x20>)
 8002e0c:	f002 ff6f 	bl	8005cee <HAL_SPI_Transmit>
} 
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000aa0 	.word	0x20000aa0

08002e1c <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 8002e22:	4639      	mov	r1, r7
 8002e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4809      	ldr	r0, [pc, #36]	; (8002e50 <RD_AD+0x34>)
 8002e2c:	f003 f89b 	bl	8005f66 <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 8002e30:	783b      	ldrb	r3, [r7, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	607b      	str	r3, [r7, #4]
  return value;
 8002e46:	687b      	ldr	r3, [r7, #4]
} 
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000aa0 	.word	0x20000aa0

08002e54 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	480c      	ldr	r0, [pc, #48]	; (8002e90 <Read_X+0x3c>)
 8002e60:	f002 f9ec 	bl	800523c <HAL_GPIO_WritePin>
  DelayUS(1); 
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7ff ffb3 	bl	8002dd0 <DelayUS>
  WR_CMD(CHX); 
 8002e6a:	2090      	movs	r0, #144	; 0x90
 8002e6c:	f7ff ffc4 	bl	8002df8 <WR_CMD>
  DelayUS(1); 
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7ff ffad 	bl	8002dd0 <DelayUS>
  i=RD_AD(); 
 8002e76:	f7ff ffd1 	bl	8002e1c <RD_AD>
 8002e7a:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2110      	movs	r1, #16
 8002e80:	4803      	ldr	r0, [pc, #12]	; (8002e90 <Read_X+0x3c>)
 8002e82:	f002 f9db 	bl	800523c <HAL_GPIO_WritePin>
  return i;    
 8002e86:	687b      	ldr	r3, [r7, #4]
} 
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40020800 	.word	0x40020800

08002e94 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <Read_Y+0x3c>)
 8002ea0:	f002 f9cc 	bl	800523c <HAL_GPIO_WritePin>
  DelayUS(1); 
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7ff ff93 	bl	8002dd0 <DelayUS>
  WR_CMD(CHY); 
 8002eaa:	20d0      	movs	r0, #208	; 0xd0
 8002eac:	f7ff ffa4 	bl	8002df8 <WR_CMD>
  DelayUS(1); 
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7ff ff8d 	bl	8002dd0 <DelayUS>
  i=RD_AD(); 
 8002eb6:	f7ff ffb1 	bl	8002e1c <RD_AD>
 8002eba:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <Read_Y+0x3c>)
 8002ec2:	f002 f9bb 	bl	800523c <HAL_GPIO_WritePin>
  return i;     
 8002ec6:	687b      	ldr	r3, [r7, #4]
} 
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40020800 	.word	0x40020800

08002ed4 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8002ede:	f7ff ffb9 	bl	8002e54 <Read_X>
 8002ee2:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff ff73 	bl	8002dd0 <DelayUS>
  ady=Read_Y(); 
 8002eea:	f7ff ffd3 	bl	8002e94 <Read_Y>
 8002eee:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]
  *y=ady; 
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	601a      	str	r2, [r3, #0]
} 
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	80fb      	strh	r3, [r7, #6]
 8002f10:	4613      	mov	r3, r2
 8002f12:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	3b0d      	subs	r3, #13
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	88b9      	ldrh	r1, [r7, #4]
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd2a 	bl	8002978 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	3304      	adds	r3, #4
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	88b9      	ldrh	r1, [r7, #4]
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fd22 	bl	8002978 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	3b0d      	subs	r3, #13
 8002f38:	b299      	uxth	r1, r3
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fd54 	bl	80029ec <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	b299      	uxth	r1, r3
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd4c 	bl	80029ec <BSP_LCD_DrawVLine>

}  
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b09c      	sub	sp, #112	; 0x70
 8002f60:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	2248      	movs	r2, #72	; 0x48
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f007 fe69 	bl	800ac46 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8002f74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ffa8 	bl	8002ed4 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 8002f84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	3370      	adds	r3, #112	; 0x70
 8002f8e:	443b      	add	r3, r7
 8002f90:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 8002f94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f9a:	3309      	adds	r3, #9
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3370      	adds	r3, #112	; 0x70
 8002fa0:	443b      	add	r3, r7
 8002fa2:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 8002fa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002faa:	3301      	adds	r3, #1
 8002fac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	4885      	ldr	r0, [pc, #532]	; (80031c8 <Read_Ads7846+0x26c>)
 8002fb4:	f002 f92a 	bl	800520c <HAL_GPIO_ReadPin>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <Read_Ads7846+0x6a>
 8002fbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d9d6      	bls.n	8002f74 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8002fc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	f040 80f6 	bne.w	80031bc <Read_Ads7846+0x260>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	441a      	add	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <Read_Ads7846+0x270>)
 8002fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8002fe0:	17db      	asrs	r3, r3, #31
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	441a      	add	r2, r3
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a76      	ldr	r2, [pc, #472]	; (80031cc <Read_Ads7846+0x270>)
 8002ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ff6:	17db      	asrs	r3, r3, #31
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	441a      	add	r2, r3
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	4413      	add	r3, r2
 8003006:	4a71      	ldr	r2, [pc, #452]	; (80031cc <Read_Ads7846+0x270>)
 8003008:	fb82 1203 	smull	r1, r2, r2, r3
 800300c:	17db      	asrs	r3, r3, #31
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 8003012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800301a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800301c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8003022:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 800302a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302c:	2b00      	cmp	r3, #0
 800302e:	bfb8      	it	lt
 8003030:	425b      	neglt	r3, r3
 8003032:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8003034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	425b      	neglt	r3, r3
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 800303e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003040:	2b00      	cmp	r3, #0
 8003042:	bfb8      	it	lt
 8003044:	425b      	neglt	r3, r3
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8003048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304a:	2b02      	cmp	r3, #2
 800304c:	dd07      	ble.n	800305e <Read_Ads7846+0x102>
 800304e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003050:	2b02      	cmp	r3, #2
 8003052:	dd04      	ble.n	800305e <Read_Ads7846+0x102>
 8003054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003056:	2b02      	cmp	r3, #2
 8003058:	dd01      	ble.n	800305e <Read_Ads7846+0x102>
 800305a:	2300      	movs	r3, #0
 800305c:	e0af      	b.n	80031be <Read_Ads7846+0x262>
   
    if(m0<m1)
 800305e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003062:	429a      	cmp	r2, r3
 8003064:	da17      	bge.n	8003096 <Read_Ads7846+0x13a>
    {
      if(m2<m0) 
 8003066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306a:	429a      	cmp	r2, r3
 800306c:	da09      	bge.n	8003082 <Read_Ads7846+0x126>
        screen.x=(temp[0]+temp[2])/2;
 800306e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003072:	4413      	add	r3, r2
 8003074:	0fda      	lsrs	r2, r3, #31
 8003076:	4413      	add	r3, r2
 8003078:	105b      	asrs	r3, r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <Read_Ads7846+0x274>)
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e020      	b.n	80030c4 <Read_Ads7846+0x168>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 8003082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003086:	4413      	add	r3, r2
 8003088:	0fda      	lsrs	r2, r3, #31
 800308a:	4413      	add	r3, r2
 800308c:	105b      	asrs	r3, r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <Read_Ads7846+0x274>)
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	e016      	b.n	80030c4 <Read_Ads7846+0x168>
    }
    else if(m2<m1) 
 8003096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309a:	429a      	cmp	r2, r3
 800309c:	da09      	bge.n	80030b2 <Read_Ads7846+0x156>
      screen.x=(temp[0]+temp[2])/2;
 800309e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a2:	4413      	add	r3, r2
 80030a4:	0fda      	lsrs	r2, r3, #31
 80030a6:	4413      	add	r3, r2
 80030a8:	105b      	asrs	r3, r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <Read_Ads7846+0x274>)
 80030ae:	801a      	strh	r2, [r3, #0]
 80030b0:	e008      	b.n	80030c4 <Read_Ads7846+0x168>
    else 
      screen.x=(temp[1]+temp[2])/2;
 80030b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b6:	4413      	add	r3, r2
 80030b8:	0fda      	lsrs	r2, r3, #31
 80030ba:	4413      	add	r3, r2
 80030bc:	105b      	asrs	r3, r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <Read_Ads7846+0x274>)
 80030c2:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 80030c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	441a      	add	r2, r3
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	4413      	add	r3, r2
 80030ce:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <Read_Ads7846+0x270>)
 80030d0:	fb82 1203 	smull	r1, r2, r2, r3
 80030d4:	17db      	asrs	r3, r3, #31
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 80030da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030de:	441a      	add	r2, r3
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	4413      	add	r3, r2
 80030e4:	4a39      	ldr	r2, [pc, #228]	; (80031cc <Read_Ads7846+0x270>)
 80030e6:	fb82 1203 	smull	r1, r2, r2, r3
 80030ea:	17db      	asrs	r3, r3, #31
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 80030f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f4:	441a      	add	r2, r3
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	4413      	add	r3, r2
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <Read_Ads7846+0x270>)
 80030fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003100:	17db      	asrs	r3, r3, #31
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8003106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800310e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8003116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 800311e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003120:	2b00      	cmp	r3, #0
 8003122:	bfb8      	it	lt
 8003124:	425b      	neglt	r3, r3
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8003128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312a:	2b00      	cmp	r3, #0
 800312c:	bfb8      	it	lt
 800312e:	425b      	neglt	r3, r3
 8003130:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8003132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003134:	2b00      	cmp	r3, #0
 8003136:	bfb8      	it	lt
 8003138:	425b      	neglt	r3, r3
 800313a:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 800313c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313e:	2b02      	cmp	r3, #2
 8003140:	dd07      	ble.n	8003152 <Read_Ads7846+0x1f6>
 8003142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003144:	2b02      	cmp	r3, #2
 8003146:	dd04      	ble.n	8003152 <Read_Ads7846+0x1f6>
 8003148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314a:	2b02      	cmp	r3, #2
 800314c:	dd01      	ble.n	8003152 <Read_Ads7846+0x1f6>
 800314e:	2300      	movs	r3, #0
 8003150:	e035      	b.n	80031be <Read_Ads7846+0x262>
   
    if(m0<m1)
 8003152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003156:	429a      	cmp	r2, r3
 8003158:	da17      	bge.n	800318a <Read_Ads7846+0x22e>
    {
      if(m2<m0) 
 800315a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800315e:	429a      	cmp	r2, r3
 8003160:	da09      	bge.n	8003176 <Read_Ads7846+0x21a>
        screen.y=(temp[0]+temp[2])/2;
 8003162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	4413      	add	r3, r2
 8003168:	0fda      	lsrs	r2, r3, #31
 800316a:	4413      	add	r3, r2
 800316c:	105b      	asrs	r3, r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <Read_Ads7846+0x274>)
 8003172:	805a      	strh	r2, [r3, #2]
 8003174:	e020      	b.n	80031b8 <Read_Ads7846+0x25c>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 8003176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317a:	4413      	add	r3, r2
 800317c:	0fda      	lsrs	r2, r3, #31
 800317e:	4413      	add	r3, r2
 8003180:	105b      	asrs	r3, r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <Read_Ads7846+0x274>)
 8003186:	805a      	strh	r2, [r3, #2]
 8003188:	e016      	b.n	80031b8 <Read_Ads7846+0x25c>
      }
    else if(m2<m1) 
 800318a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800318c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800318e:	429a      	cmp	r2, r3
 8003190:	da09      	bge.n	80031a6 <Read_Ads7846+0x24a>
       screen.y=(temp[0]+temp[2])/2;
 8003192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003196:	4413      	add	r3, r2
 8003198:	0fda      	lsrs	r2, r3, #31
 800319a:	4413      	add	r3, r2
 800319c:	105b      	asrs	r3, r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <Read_Ads7846+0x274>)
 80031a2:	805a      	strh	r2, [r3, #2]
 80031a4:	e008      	b.n	80031b8 <Read_Ads7846+0x25c>
    else
       screen.y=(temp[1]+temp[2])/2;
 80031a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031aa:	4413      	add	r3, r2
 80031ac:	0fda      	lsrs	r2, r3, #31
 80031ae:	4413      	add	r3, r2
 80031b0:	105b      	asrs	r3, r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <Read_Ads7846+0x274>)
 80031b6:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <Read_Ads7846+0x274>)
 80031ba:	e000      	b.n	80031be <Read_Ads7846+0x262>
  }
  return 0; 
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3770      	adds	r7, #112	; 0x70
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40020800 	.word	0x40020800
 80031cc:	55555556 	.word	0x55555556
 80031d0:	200011d0 	.word	0x200011d0

080031d4 <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3308      	adds	r3, #8
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	3204      	adds	r2, #4
 80031f6:	8852      	ldrh	r2, [r2, #2]
 80031f8:	4611      	mov	r1, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	3208      	adds	r2, #8
 80031fe:	8852      	ldrh	r2, [r2, #2]
 8003200:	1a8a      	subs	r2, r1, r2
 8003202:	fb03 f202 	mul.w	r2, r3, r2
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3304      	adds	r3, #4
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3308      	adds	r3, #8
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	1acb      	subs	r3, r1, r3
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	8849      	ldrh	r1, [r1, #2]
 800321a:	4608      	mov	r0, r1
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	3108      	adds	r1, #8
 8003220:	8849      	ldrh	r1, [r1, #2]
 8003222:	1a41      	subs	r1, r0, r1
 8003224:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f97a 	bl	8000524 <__aeabi_i2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f7fd fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
 8003256:	e145      	b.n	80034e4 <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3308      	adds	r3, #8
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	3204      	adds	r2, #4
 800326a:	8852      	ldrh	r2, [r2, #2]
 800326c:	4611      	mov	r1, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	3208      	adds	r2, #8
 8003272:	8852      	ldrh	r2, [r2, #2]
 8003274:	1a8a      	subs	r2, r1, r2
 8003276:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3308      	adds	r3, #8
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	1acb      	subs	r3, r1, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	8849      	ldrh	r1, [r1, #2]
 800328e:	4608      	mov	r0, r1
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	3108      	adds	r1, #8
 8003294:	8849      	ldrh	r1, [r1, #2]
 8003296:	1a41      	subs	r1, r0, r1
 8003298:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f940 	bl	8000524 <__aeabi_i2d>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	e9c1 2300 	strd	r2, r3, [r1]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3308      	adds	r3, #8
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	3204      	adds	r2, #4
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	4611      	mov	r1, r2
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	3208      	adds	r2, #8
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	1a8a      	subs	r2, r1, r2
 80032cc:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3308      	adds	r3, #8
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	1acb      	subs	r3, r1, r3
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	3104      	adds	r1, #4
 80032e2:	8809      	ldrh	r1, [r1, #0]
 80032e4:	4608      	mov	r0, r1
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	3108      	adds	r1, #8
 80032ea:	8809      	ldrh	r1, [r1, #0]
 80032ec:	1a41      	subs	r1, r0, r1
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f915 	bl	8000524 <__aeabi_i2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	e9c1 2302 	strd	r2, r3, [r1, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3308      	adds	r3, #8
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3304      	adds	r3, #4
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	fb03 f202 	mul.w	r2, r3, r2
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3304      	adds	r3, #4
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3308      	adds	r3, #8
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	8852      	ldrh	r2, [r2, #2]
 800332e:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3308      	adds	r3, #8
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	fb03 f101 	mul.w	r1, r3, r1
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3308      	adds	r3, #8
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	3104      	adds	r1, #4
 8003358:	8849      	ldrh	r1, [r1, #2]
 800335a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800335e:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3304      	adds	r3, #4
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	fb03 f101 	mul.w	r1, r3, r1
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3304      	adds	r3, #4
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	fb00 f303 	mul.w	r3, r0, r3
 8003380:	1acb      	subs	r3, r1, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	3108      	adds	r1, #8
 8003386:	8849      	ldrh	r1, [r1, #2]
 8003388:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 800338c:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f8c8 	bl	8000524 <__aeabi_i2d>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	885b      	ldrh	r3, [r3, #2]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3308      	adds	r3, #8
 80033a8:	885b      	ldrh	r3, [r3, #2]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	3204      	adds	r2, #4
 80033b0:	8852      	ldrh	r2, [r2, #2]
 80033b2:	4611      	mov	r1, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	3208      	adds	r2, #8
 80033b8:	8852      	ldrh	r2, [r2, #2]
 80033ba:	1a8a      	subs	r2, r1, r2
 80033bc:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3304      	adds	r3, #4
 80033c4:	885b      	ldrh	r3, [r3, #2]
 80033c6:	4619      	mov	r1, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3308      	adds	r3, #8
 80033cc:	885b      	ldrh	r3, [r3, #2]
 80033ce:	1acb      	subs	r3, r1, r3
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	8849      	ldrh	r1, [r1, #2]
 80033d4:	4608      	mov	r0, r1
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	3108      	adds	r1, #8
 80033da:	8849      	ldrh	r1, [r1, #2]
 80033dc:	1a41      	subs	r1, r0, r1
 80033de:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f89d 	bl	8000524 <__aeabi_i2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3308      	adds	r3, #8
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	3204      	adds	r2, #4
 8003406:	8852      	ldrh	r2, [r2, #2]
 8003408:	4611      	mov	r1, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	3208      	adds	r2, #8
 800340e:	8852      	ldrh	r2, [r2, #2]
 8003410:	1a8a      	subs	r2, r1, r2
 8003412:	fb03 f202 	mul.w	r2, r3, r2
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	885b      	ldrh	r3, [r3, #2]
 800341a:	4619      	mov	r1, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3308      	adds	r3, #8
 8003420:	885b      	ldrh	r3, [r3, #2]
 8003422:	1acb      	subs	r3, r1, r3
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	3104      	adds	r1, #4
 8003428:	8809      	ldrh	r1, [r1, #0]
 800342a:	4608      	mov	r0, r1
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	3108      	adds	r1, #8
 8003430:	8809      	ldrh	r1, [r1, #0]
 8003432:	1a41      	subs	r1, r0, r1
 8003434:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f872 	bl	8000524 <__aeabi_i2d>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	e9c1 2308 	strd	r2, r3, [r1, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3308      	adds	r3, #8
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3304      	adds	r3, #4
 8003456:	885b      	ldrh	r3, [r3, #2]
 8003458:	fb03 f202 	mul.w	r2, r3, r2
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	3304      	adds	r3, #4
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3308      	adds	r3, #8
 8003468:	885b      	ldrh	r3, [r3, #2]
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	8852      	ldrh	r2, [r2, #2]
 8003474:	fb03 f202 	mul.w	r2, r3, r2
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3308      	adds	r3, #8
 8003482:	885b      	ldrh	r3, [r3, #2]
 8003484:	fb03 f101 	mul.w	r1, r3, r1
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3308      	adds	r3, #8
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	885b      	ldrh	r3, [r3, #2]
 8003494:	fb00 f303 	mul.w	r3, r0, r3
 8003498:	1acb      	subs	r3, r1, r3
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	3104      	adds	r1, #4
 800349e:	8849      	ldrh	r1, [r1, #2]
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80034a4:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3304      	adds	r3, #4
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	885b      	ldrh	r3, [r3, #2]
 80034b2:	fb03 f101 	mul.w	r1, r3, r1
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3304      	adds	r3, #4
 80034c0:	885b      	ldrh	r3, [r3, #2]
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	1acb      	subs	r3, r1, r3
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	3108      	adds	r1, #8
 80034cc:	8849      	ldrh	r1, [r1, #2]
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 80034d2:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f825 	bl	8000524 <__aeabi_i2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 80034ee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f7fd fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 8085 	bne.w	8003624 <getDisplayPoint+0x136>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fc fffd 	bl	8000524 <__aeabi_i2d>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4620      	mov	r0, r4
 8003530:	4629      	mov	r1, r5
 8003532:	f7fd f861 	bl	80005f8 <__aeabi_dmul>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
                      (matrixPtr->Bn * screenPtr->y) + 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	885b      	ldrh	r3, [r3, #2]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc ffeb 	bl	8000524 <__aeabi_i2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fd f84f 	bl	80005f8 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800355e:	4640      	mov	r0, r8
 8003560:	4649      	mov	r1, r9
 8003562:	f7fc fe93 	bl	800028c <__adddf3>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
                       matrixPtr->Cn 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8003574:	f7fc fe8a 	bl	800028c <__adddf3>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003586:	f7fd f961 	bl	800084c <__aeabi_ddiv>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f7fd fb09 	bl	8000ba8 <__aeabi_d2uiz>
 8003596:	4603      	mov	r3, r0
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ffbb 	bl	8000524 <__aeabi_i2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fd f81f 	bl	80005f8 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4690      	mov	r8, r2
 80035c0:	4699      	mov	r9, r3
                      (matrixPtr->En * screenPtr->y) + 
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	885b      	ldrh	r3, [r3, #2]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc ffa9 	bl	8000524 <__aeabi_i2d>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4620      	mov	r0, r4
 80035d8:	4629      	mov	r1, r5
 80035da:	f7fd f80d 	bl	80005f8 <__aeabi_dmul>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80035e2:	4640      	mov	r0, r8
 80035e4:	4649      	mov	r1, r9
 80035e6:	f7fc fe51 	bl	800028c <__adddf3>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
                       matrixPtr->Fn 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 80035f8:	f7fc fe48 	bl	800028c <__adddf3>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
                    ) / matrixPtr->Divider ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800360a:	f7fd f91f 	bl	800084c <__aeabi_ddiv>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fac7 	bl	8000ba8 <__aeabi_d2uiz>
 800361a:	4603      	mov	r3, r0
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	805a      	strh	r2, [r3, #2]
 8003622:	e001      	b.n	8003628 <getDisplayPoint+0x13a>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 8003628:	7dfb      	ldrb	r3, [r7, #23]
} 
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003634 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
 800363e:	e03b      	b.n	80036b8 <TouchPanel_Calibrate+0x84>
  {
    BSP_LCD_SetFont(&Font12);
 8003640:	4825      	ldr	r0, [pc, #148]	; (80036d8 <TouchPanel_Calibrate+0xa4>)
 8003642:	f7ff f879 	bl	8002738 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003646:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800364a:	f7ff f891 	bl	8002770 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800364e:	201f      	movs	r0, #31
 8003650:	f7ff f862 	bl	8002718 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 8003654:	4921      	ldr	r1, [pc, #132]	; (80036dc <TouchPanel_Calibrate+0xa8>)
 8003656:	2001      	movs	r0, #1
 8003658:	f7ff f976 	bl	8002948 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 800365c:	4820      	ldr	r0, [pc, #128]	; (80036e0 <TouchPanel_Calibrate+0xac>)
 800365e:	f7ff f86b 	bl	8002738 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 8003662:	4920      	ldr	r1, [pc, #128]	; (80036e4 <TouchPanel_Calibrate+0xb0>)
 8003664:	2005      	movs	r0, #5
 8003666:	f7ff f96f 	bl	8002948 <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 800366a:	20c8      	movs	r0, #200	; 0xc8
 800366c:	f000 f884 	bl	8003778 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <TouchPanel_Calibrate+0xb4>)
 8003674:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	491b      	ldr	r1, [pc, #108]	; (80036e8 <TouchPanel_Calibrate+0xb4>)
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	885b      	ldrh	r3, [r3, #2]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7ff fc3d 	bl	8002f04 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 800368a:	f7ff fc67 	bl	8002f5c <Read_Ads7846>
 800368e:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f9      	beq.n	800368a <TouchPanel_Calibrate+0x56>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	8811      	ldrh	r1, [r2, #0]
 800369c:	4a13      	ldr	r2, [pc, #76]	; (80036ec <TouchPanel_Calibrate+0xb8>)
 800369e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	8851      	ldrh	r1, [r2, #2]
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <TouchPanel_Calibrate+0xb8>)
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	460a      	mov	r2, r1
 80036b0:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	3301      	adds	r3, #1
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d9c0      	bls.n	8003640 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <TouchPanel_Calibrate+0xbc>)
 80036c0:	490a      	ldr	r1, [pc, #40]	; (80036ec <TouchPanel_Calibrate+0xb8>)
 80036c2:	4809      	ldr	r0, [pc, #36]	; (80036e8 <TouchPanel_Calibrate+0xb4>)
 80036c4:	f7ff fd86 	bl	80031d4 <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff f851 	bl	8002770 <BSP_LCD_Clear>
} 
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000004c 	.word	0x2000004c
 80036dc:	0800d5bc 	.word	0x0800d5bc
 80036e0:	2000005c 	.word	0x2000005c
 80036e4:	0800d5e4 	.word	0x0800d5e4
 80036e8:	20000040 	.word	0x20000040
 80036ec:	200011c4 	.word	0x200011c4
 80036f0:	20001188 	.word	0x20001188

080036f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_Init+0x40>)
 80036fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_Init+0x40>)
 800370a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_Init+0x40>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 fd04 	bl	800412a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	2000      	movs	r0, #0
 8003724:	f7fe faa4 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7fe fa76 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023c00 	.word	0x40023c00

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000068 	.word	0x20000068
 800375c:	200011d4 	.word	0x200011d4

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	200011d4 	.word	0x200011d4

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000068 	.word	0x20000068

080037c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e033      	b.n	800383e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fd7e 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003806:	f023 0302 	bic.w	r3, r3, #2
 800380a:	f043 0202 	orr.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa5e 	bl	8003cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
 800382e:	e001      	b.n	8003834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_ADC_Start_DMA+0x1e>
 8003862:	2302      	movs	r3, #2
 8003864:	e0e9      	b.n	8003a3a <HAL_ADC_Start_DMA+0x1f2>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d018      	beq.n	80038ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_ADC_Start_DMA+0x1fc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6d      	ldr	r2, [pc, #436]	; (8003a48 <HAL_ADC_Start_DMA+0x200>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0c9a      	lsrs	r2, r3, #18
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038a0:	e002      	b.n	80038a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f9      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038bc:	d107      	bne.n	80038ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 80a1 	bne.w	8003a20 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003908:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d106      	bne.n	800392c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f023 0206 	bic.w	r2, r3, #6
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
 800392a:	e002      	b.n	8003932 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393a:	4b44      	ldr	r3, [pc, #272]	; (8003a4c <HAL_ADC_Start_DMA+0x204>)
 800393c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	4a43      	ldr	r2, [pc, #268]	; (8003a50 <HAL_ADC_Start_DMA+0x208>)
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <HAL_ADC_Start_DMA+0x20c>)
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a41      	ldr	r2, [pc, #260]	; (8003a58 <HAL_ADC_Start_DMA+0x210>)
 8003954:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800395e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800396e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	334c      	adds	r3, #76	; 0x4c
 800398a:	4619      	mov	r1, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f000 ff4c 	bl	800482c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2b00      	cmp	r3, #0
 800399e:	d12a      	bne.n	80039f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <HAL_ADC_Start_DMA+0x214>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d015      	beq.n	80039d6 <HAL_ADC_Start_DMA+0x18e>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <HAL_ADC_Start_DMA+0x218>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d105      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x178>
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_ADC_Start_DMA+0x204>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <HAL_ADC_Start_DMA+0x21c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d136      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_ADC_Start_DMA+0x204>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d129      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e020      	b.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_ADC_Start_DMA+0x214>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d11b      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d114      	bne.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	e00b      	b.n	8003a38 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0210 	orr.w	r2, r3, #16
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f043 0201 	orr.w	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000
 8003a48:	431bde83 	.word	0x431bde83
 8003a4c:	40012300 	.word	0x40012300
 8003a50:	08003ecd 	.word	0x08003ecd
 8003a54:	08003f87 	.word	0x08003f87
 8003a58:	08003fa3 	.word	0x08003fa3
 8003a5c:	40012000 	.word	0x40012000
 8003a60:	40012100 	.word	0x40012100
 8003a64:	40012200 	.word	0x40012200

08003a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e105      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x228>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d925      	bls.n	8003b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b1e      	subs	r3, #30
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	400a      	ands	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4403      	add	r3, r0
 8003afa:	3b1e      	subs	r3, #30
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e022      	b.n	8003b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6919      	ldr	r1, [r3, #16]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4403      	add	r3, r0
 8003b44:	409a      	lsls	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d824      	bhi.n	8003ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b05      	subs	r3, #5
 8003b68:	221f      	movs	r2, #31
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	400a      	ands	r2, r1
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4618      	mov	r0, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b05      	subs	r3, #5
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9e:	e04c      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3b23      	subs	r3, #35	; 0x23
 8003bba:	221f      	movs	r2, #31
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	3b23      	subs	r3, #35	; 0x23
 8003be4:	fa00 f203 	lsl.w	r2, r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf0:	e023      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	3b41      	subs	r3, #65	; 0x41
 8003c04:	221f      	movs	r2, #31
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	400a      	ands	r2, r1
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b41      	subs	r3, #65	; 0x41
 8003c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_ADC_ConfigChannel+0x234>)
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_ADC_ConfigChannel+0x238>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d109      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1cc>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b12      	cmp	r3, #18
 8003c4e:	d105      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_ADC_ConfigChannel+0x238>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d123      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d003      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0x1e6>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b11      	cmp	r3, #17
 8003c74:	d11b      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d111      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_ADC_ConfigChannel+0x23c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <HAL_ADC_ConfigChannel+0x240>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	0c9a      	lsrs	r2, r3, #18
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f9      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	40012000 	.word	0x40012000
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	431bde83 	.word	0x431bde83

08003cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cdc:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <ADC_Init+0x1f0>)
 8003cde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <ADC_Init+0x1f4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	e00f      	b.n	8003dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0202 	bic.w	r2, r2, #2
 8003de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7e1b      	ldrb	r3, [r3, #24]
 8003dec:	005a      	lsls	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01b      	beq.n	8003e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	035a      	lsls	r2, r3, #13
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e007      	b.n	8003e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	051a      	lsls	r2, r3, #20
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6899      	ldr	r1, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e8a:	025a      	lsls	r2, r3, #9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6899      	ldr	r1, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	029a      	lsls	r2, r3, #10
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012300 	.word	0x40012300
 8003ec8:	0f000001 	.word	0x0f000001

08003ecc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d13c      	bne.n	8003f60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12b      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d127      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d119      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0220 	bic.w	r2, r2, #32
 8003f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7fc ffc7 	bl	8000eec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f5e:	e00e      	b.n	8003f7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff fd85 	bl	8003a7c <HAL_ADC_ErrorCallback>
}
 8003f72:	e004      	b.n	8003f7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fd67 	bl	8003a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f043 0204 	orr.w	r2, r3, #4
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fd5a 	bl	8003a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fec:	4013      	ands	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004002:	4a04      	ldr	r2, [pc, #16]	; (8004014 <__NVIC_SetPriorityGrouping+0x44>)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	60d3      	str	r3, [r2, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <__NVIC_GetPriorityGrouping+0x18>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 0307 	and.w	r3, r3, #7
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db0b      	blt.n	800405e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	4907      	ldr	r1, [pc, #28]	; (800406c <__NVIC_EnableIRQ+0x38>)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2001      	movs	r0, #1
 8004056:	fa00 f202 	lsl.w	r2, r0, r2
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e100 	.word	0xe000e100

08004070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db0a      	blt.n	800409a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <__NVIC_SetPriority+0x4c>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	0112      	lsls	r2, r2, #4
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	440b      	add	r3, r1
 8004094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004098:	e00a      	b.n	80040b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4908      	ldr	r1, [pc, #32]	; (80040c0 <__NVIC_SetPriority+0x50>)
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3b04      	subs	r3, #4
 80040a8:	0112      	lsls	r2, r2, #4
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	440b      	add	r3, r1
 80040ae:	761a      	strb	r2, [r3, #24]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000e100 	.word	0xe000e100
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f1c3 0307 	rsb	r3, r3, #7
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf28      	it	cs
 80040e2:	2304      	movcs	r3, #4
 80040e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d902      	bls.n	80040f4 <NVIC_EncodePriority+0x30>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3b03      	subs	r3, #3
 80040f2:	e000      	b.n	80040f6 <NVIC_EncodePriority+0x32>
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	401a      	ands	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800410c:	f04f 31ff 	mov.w	r1, #4294967295
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	43d9      	mvns	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800411c:	4313      	orrs	r3, r2
         );
}
 800411e:	4618      	mov	r0, r3
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff4c 	bl	8003fd0 <__NVIC_SetPriorityGrouping>
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004152:	f7ff ff61 	bl	8004018 <__NVIC_GetPriorityGrouping>
 8004156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f7ff ffb1 	bl	80040c4 <NVIC_EncodePriority>
 8004162:	4602      	mov	r2, r0
 8004164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ff80 	bl	8004070 <__NVIC_SetPriority>
}
 8004170:	bf00      	nop
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ff54 	bl	8004034 <__NVIC_EnableIRQ>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e014      	b.n	80041d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	791b      	ldrb	r3, [r3, #4]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd f934 	bl	8001424 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	795b      	ldrb	r3, [r3, #5]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_DAC_Start_DMA+0x22>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0ab      	b.n	8004352 <HAL_DAC_Start_DMA+0x17a>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2202      	movs	r2, #2
 8004204:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d12f      	bne.n	800426c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a52      	ldr	r2, [pc, #328]	; (800435c <HAL_DAC_Start_DMA+0x184>)
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_DAC_Start_DMA+0x188>)
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_DAC_Start_DMA+0x18c>)
 8004222:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004232:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b08      	cmp	r3, #8
 8004238:	d013      	beq.n	8004262 <HAL_DAC_Start_DMA+0x8a>
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d845      	bhi.n	80042cc <HAL_DAC_Start_DMA+0xf4>
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_DAC_Start_DMA+0x76>
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d005      	beq.n	8004258 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800424c:	e03e      	b.n	80042cc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	613b      	str	r3, [r7, #16]
        break;
 8004256:	e03c      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	613b      	str	r3, [r7, #16]
        break;
 8004260:	e037      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3310      	adds	r3, #16
 8004268:	613b      	str	r3, [r7, #16]
        break;
 800426a:	e032      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <HAL_DAC_Start_DMA+0x190>)
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a3c      	ldr	r2, [pc, #240]	; (800436c <HAL_DAC_Start_DMA+0x194>)
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a3b      	ldr	r2, [pc, #236]	; (8004370 <HAL_DAC_Start_DMA+0x198>)
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	2b08      	cmp	r3, #8
 8004298:	d013      	beq.n	80042c2 <HAL_DAC_Start_DMA+0xea>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d817      	bhi.n	80042d0 <HAL_DAC_Start_DMA+0xf8>
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_DAC_Start_DMA+0xd6>
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d005      	beq.n	80042b8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80042ac:	e010      	b.n	80042d0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	613b      	str	r3, [r7, #16]
        break;
 80042b6:	e00c      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3318      	adds	r3, #24
 80042be:	613b      	str	r3, [r7, #16]
        break;
 80042c0:	e007      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	331c      	adds	r3, #28
 80042c8:	613b      	str	r3, [r7, #16]
        break;
 80042ca:	e002      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80042d0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6898      	ldr	r0, [r3, #8]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	f000 fa9b 	bl	800482c <HAL_DMA_Start_IT>
 80042f6:	4603      	mov	r3, r0
 80042f8:	75fb      	strb	r3, [r7, #23]
 80042fa:	e010      	b.n	800431e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800430a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68d8      	ldr	r0, [r3, #12]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	f000 fa89 	bl	800482c <HAL_DMA_Start_IT>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2201      	movs	r2, #1
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e005      	b.n	8004350 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	080045a7 	.word	0x080045a7
 8004360:	080045c9 	.word	0x080045c9
 8004364:	080045e5 	.word	0x080045e5
 8004368:	08004663 	.word	0x08004663
 800436c:	08004685 	.word	0x08004685
 8004370:	080046a1 	.word	0x080046a1

08004374 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2201      	movs	r2, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	400a      	ands	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa8a 	bl	80048dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e00c      	b.n	80043f4 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa7c 	bl	80048dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80043f2:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441a:	d120      	bne.n	800445e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442a:	d118      	bne.n	800445e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f84b 	bl	80044f4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d120      	bne.n	80044b0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800447c:	d118      	bne.n	80044b0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2204      	movs	r2, #4
 8004482:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f043 0202 	orr.w	r2, r3, #2
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004498:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8cf 	bl	800464e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	795b      	ldrb	r3, [r3, #5]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_DAC_ConfigChannel+0x18>
 800451c:	2302      	movs	r3, #2
 800451e:	e03c      	b.n	800459a <HAL_DAC_ConfigChannel+0x92>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4013      	ands	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	22c0      	movs	r2, #192	; 0xc0
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	400a      	ands	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff7f 	bl	80044b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	711a      	strb	r2, [r3, #4]
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff78 	bl	80044cc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff ff6e 	bl	80044e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	711a      	strb	r2, [r3, #4]
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff ffce 	bl	8004612 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	711a      	strb	r2, [r3, #4]
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ffc7 	bl	8004626 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff ffbd 	bl	800463a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	711a      	strb	r2, [r3, #4]
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff f840 	bl	8003760 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e099      	b.n	8004820 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470c:	e00f      	b.n	800472e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470e:	f7ff f827 	bl	8003760 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b05      	cmp	r3, #5
 800471a:	d908      	bls.n	800472e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e078      	b.n	8004820 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e8      	bne.n	800470e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_DMA_Init+0x158>)
 8004748:	4013      	ands	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800475a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b04      	cmp	r3, #4
 8004786:	d107      	bne.n	8004798 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	4313      	orrs	r3, r2
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d117      	bne.n	80047f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb01 	bl	8004ddc <DMA_CheckFifoParam>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ee:	2301      	movs	r3, #1
 80047f0:	e016      	b.n	8004820 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fab8 	bl	8004d70 <DMA_CalcBaseAndBitshift>
 8004800:	4603      	mov	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	223f      	movs	r2, #63	; 0x3f
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	f010803f 	.word	0xf010803f

0800482c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_DMA_Start_IT+0x26>
 800484e:	2302      	movs	r3, #2
 8004850:	e040      	b.n	80048d4 <HAL_DMA_Start_IT+0xa8>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d12f      	bne.n	80048c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fa4a 	bl	8004d14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	223f      	movs	r2, #63	; 0x3f
 8004886:	409a      	lsls	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0216 	orr.w	r2, r2, #22
 800489a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0208 	orr.w	r2, r2, #8
 80048b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e005      	b.n	80048d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
 80048d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048ea:	f7fe ff39 	bl	8003760 <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d008      	beq.n	800490e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e052      	b.n	80049b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0216 	bic.w	r2, r2, #22
 800491c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800492c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_DMA_Abort+0x62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0208 	bic.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495e:	e013      	b.n	8004988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004960:	f7fe fefe 	bl	8003760 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b05      	cmp	r3, #5
 800496c:	d90c      	bls.n	8004988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2203      	movs	r2, #3
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e015      	b.n	80049b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e4      	bne.n	8004960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	223f      	movs	r2, #63	; 0x3f
 800499c:	409a      	lsls	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d004      	beq.n	80049da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00c      	b.n	80049f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2205      	movs	r2, #5
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a0c:	4b8e      	ldr	r3, [pc, #568]	; (8004c48 <HAL_DMA_IRQHandler+0x248>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a8e      	ldr	r2, [pc, #568]	; (8004c4c <HAL_DMA_IRQHandler+0x24c>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01a      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2208      	movs	r2, #8
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d012      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	409a      	lsls	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2210      	movs	r2, #16
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d043      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03c      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	2210      	movs	r2, #16
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d024      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
 8004b2e:	e01f      	b.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e016      	b.n	8004b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0208 	bic.w	r2, r2, #8
 8004b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2220      	movs	r2, #32
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 808f 	beq.w	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8087 	beq.w	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	2220      	movs	r2, #32
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d136      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0216 	bic.w	r2, r2, #22
 8004bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_DMA_IRQHandler+0x1da>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0208 	bic.w	r2, r2, #8
 8004be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	223f      	movs	r2, #63	; 0x3f
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d07e      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
        }
        return;
 8004c16:	e079      	b.n	8004d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d031      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
 8004c44:	e02c      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
 8004c46:	bf00      	nop
 8004c48:	20000000 	.word	0x20000000
 8004c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d023      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	e01e      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0210 	bic.w	r2, r2, #16
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d032      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d307      	bcc.n	8004ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f2      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x2cc>
 8004ce6:	e000      	b.n	8004cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
 8004d0a:	e000      	b.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d0c:	bf00      	nop
    }
  }
}
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d108      	bne.n	8004d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d52:	e007      	b.n	8004d64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b10      	subs	r3, #16
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d909      	bls.n	8004db2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	659a      	str	r2, [r3, #88]	; 0x58
 8004db0:	e007      	b.n	8004dc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	aaaaaaab 	.word	0xaaaaaaab
 8004dd8:	08010430 	.word	0x08010430

08004ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11f      	bne.n	8004e36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d856      	bhi.n	8004eaa <DMA_CheckFifoParam+0xce>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <DMA_CheckFifoParam+0x28>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e27 	.word	0x08004e27
 8004e0c:	08004e15 	.word	0x08004e15
 8004e10:	08004eab 	.word	0x08004eab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d046      	beq.n	8004eae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e24:	e043      	b.n	8004eae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e2e:	d140      	bne.n	8004eb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e03d      	b.n	8004eb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d121      	bne.n	8004e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d837      	bhi.n	8004eb6 <DMA_CheckFifoParam+0xda>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <DMA_CheckFifoParam+0x70>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e63 	.word	0x08004e63
 8004e54:	08004e5d 	.word	0x08004e5d
 8004e58:	08004e75 	.word	0x08004e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e030      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d025      	beq.n	8004eba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e72:	e022      	b.n	8004eba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e7c:	d11f      	bne.n	8004ebe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e82:	e01c      	b.n	8004ebe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d903      	bls.n	8004e92 <DMA_CheckFifoParam+0xb6>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d003      	beq.n	8004e98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e90:	e018      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
      break;
 8004e96:	e015      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e00b      	b.n	8004ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e00a      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e008      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e006      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e004      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ec2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e16b      	b.n	80051c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4013      	ands	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	f040 815a 	bne.w	80051c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d005      	beq.n	8004f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d130      	bne.n	8004f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	2203      	movs	r2, #3
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 0201 	and.w	r2, r3, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d017      	beq.n	8004fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d123      	bne.n	8005018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	08da      	lsrs	r2, r3, #3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3208      	adds	r2, #8
 8004fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	220f      	movs	r2, #15
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	08da      	lsrs	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3208      	adds	r2, #8
 8005012:	69b9      	ldr	r1, [r7, #24]
 8005014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2203      	movs	r2, #3
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 0203 	and.w	r2, r3, #3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80b4 	beq.w	80051c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	4b60      	ldr	r3, [pc, #384]	; (80051e0 <HAL_GPIO_Init+0x30c>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4a5f      	ldr	r2, [pc, #380]	; (80051e0 <HAL_GPIO_Init+0x30c>)
 8005064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005068:	6453      	str	r3, [r2, #68]	; 0x44
 800506a:	4b5d      	ldr	r3, [pc, #372]	; (80051e0 <HAL_GPIO_Init+0x30c>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005076:	4a5b      	ldr	r2, [pc, #364]	; (80051e4 <HAL_GPIO_Init+0x310>)
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	3302      	adds	r3, #2
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	220f      	movs	r2, #15
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_GPIO_Init+0x314>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02b      	beq.n	80050fa <HAL_GPIO_Init+0x226>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a51      	ldr	r2, [pc, #324]	; (80051ec <HAL_GPIO_Init+0x318>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d025      	beq.n	80050f6 <HAL_GPIO_Init+0x222>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a50      	ldr	r2, [pc, #320]	; (80051f0 <HAL_GPIO_Init+0x31c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <HAL_GPIO_Init+0x21e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a4f      	ldr	r2, [pc, #316]	; (80051f4 <HAL_GPIO_Init+0x320>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d019      	beq.n	80050ee <HAL_GPIO_Init+0x21a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a4e      	ldr	r2, [pc, #312]	; (80051f8 <HAL_GPIO_Init+0x324>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_GPIO_Init+0x216>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a4d      	ldr	r2, [pc, #308]	; (80051fc <HAL_GPIO_Init+0x328>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00d      	beq.n	80050e6 <HAL_GPIO_Init+0x212>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a4c      	ldr	r2, [pc, #304]	; (8005200 <HAL_GPIO_Init+0x32c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <HAL_GPIO_Init+0x20e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a4b      	ldr	r2, [pc, #300]	; (8005204 <HAL_GPIO_Init+0x330>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_GPIO_Init+0x20a>
 80050da:	2307      	movs	r3, #7
 80050dc:	e00e      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050de:	2308      	movs	r3, #8
 80050e0:	e00c      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050e2:	2306      	movs	r3, #6
 80050e4:	e00a      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050e6:	2305      	movs	r3, #5
 80050e8:	e008      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050ea:	2304      	movs	r3, #4
 80050ec:	e006      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050ee:	2303      	movs	r3, #3
 80050f0:	e004      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e002      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_GPIO_Init+0x228>
 80050fa:	2300      	movs	r3, #0
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	f002 0203 	and.w	r2, r2, #3
 8005102:	0092      	lsls	r2, r2, #2
 8005104:	4093      	lsls	r3, r2
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800510c:	4935      	ldr	r1, [pc, #212]	; (80051e4 <HAL_GPIO_Init+0x310>)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	3302      	adds	r3, #2
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800511a:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_GPIO_Init+0x334>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	43db      	mvns	r3, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4013      	ands	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800513e:	4a32      	ldr	r2, [pc, #200]	; (8005208 <HAL_GPIO_Init+0x334>)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005144:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_GPIO_Init+0x334>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005168:	4a27      	ldr	r2, [pc, #156]	; (8005208 <HAL_GPIO_Init+0x334>)
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <HAL_GPIO_Init+0x334>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005192:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <HAL_GPIO_Init+0x334>)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_GPIO_Init+0x334>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	43db      	mvns	r3, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4013      	ands	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051bc:	4a12      	ldr	r2, [pc, #72]	; (8005208 <HAL_GPIO_Init+0x334>)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3301      	adds	r3, #1
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	f67f ae90 	bls.w	8004ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	3724      	adds	r7, #36	; 0x24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40013800 	.word	0x40013800
 80051e8:	40020000 	.word	0x40020000
 80051ec:	40020400 	.word	0x40020400
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40021400 	.word	0x40021400
 8005200:	40021800 	.word	0x40021800
 8005204:	40021c00 	.word	0x40021c00
 8005208:	40013c00 	.word	0x40013c00

0800520c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	e001      	b.n	800522e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	807b      	strh	r3, [r7, #2]
 8005248:	4613      	mov	r3, r2
 800524a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800524c:	787b      	ldrb	r3, [r7, #1]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005252:	887a      	ldrh	r2, [r7, #2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005258:	e003      	b.n	8005262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	041a      	lsls	r2, r3, #16
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	619a      	str	r2, [r3, #24]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e267      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b82      	ldr	r3, [pc, #520]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b7e      	ldr	r3, [pc, #504]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x108>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e242      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x74>
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x98>
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6f      	ldr	r2, [pc, #444]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6d      	ldr	r3, [pc, #436]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6c      	ldr	r2, [pc, #432]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 8005308:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fe fa1a 	bl	8003760 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005330:	f7fe fa16 	bl	8003760 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e207      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xc0>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fe fa06 	bl	8003760 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005358:	f7fe fa02 	bl	8003760 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	; 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1f3      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b51      	ldr	r3, [pc, #324]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0xe8>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c7      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fe f9bb 	bl	8003760 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fe f9b7 	bl	8003760 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a8      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4925      	ldr	r1, [pc, #148]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCC_OscConfig+0x244>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fe f99a 	bl	8003760 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005430:	f7fe f996 	bl	8003760 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e187      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d036      	beq.n	80054c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fe f97a 	bl	8003760 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005470:	f7fe f976 	bl	8003760 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e167      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x200>
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fe f963 	bl	8003760 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549e:	f7fe f95f 	bl	8003760 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d907      	bls.n	80054bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e150      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b88      	ldr	r3, [pc, #544]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8097 	beq.w	8005604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b81      	ldr	r3, [pc, #516]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b7d      	ldr	r3, [pc, #500]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b7a      	ldr	r3, [pc, #488]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b77      	ldr	r3, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b74      	ldr	r3, [pc, #464]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fe f91f 	bl	8003760 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fe f91b 	bl	8003760 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e10c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x474>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x2ea>
 800554c:	4b64      	ldr	r3, [pc, #400]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	4a63      	ldr	r2, [pc, #396]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	; 0x70
 8005558:	e01c      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x30c>
 8005562:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a5e      	ldr	r2, [pc, #376]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	4b5c      	ldr	r3, [pc, #368]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a5b      	ldr	r2, [pc, #364]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	4b55      	ldr	r3, [pc, #340]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a54      	ldr	r2, [pc, #336]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fe f8e0 	bl	8003760 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fe f8dc 	bl	8003760 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0cb      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCC_OscConfig+0x334>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fe f8ca 	bl	8003760 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fe f8c6 	bl	8003760 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	; 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0b5      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ee      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b39      	ldr	r3, [pc, #228]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	4a38      	ldr	r2, [pc, #224]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a1 	beq.w	8005750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b08      	cmp	r3, #8
 8005618:	d05c      	beq.n	80056d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d141      	bne.n	80056a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fe f89a 	bl	8003760 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005630:	f7fe f896 	bl	8003760 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e087      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	491b      	ldr	r1, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fe f86f 	bl	8003760 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005686:	f7fe f86b 	bl	8003760 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x416>
 80056a4:	e054      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <HAL_RCC_OscConfig+0x478>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe f858 	bl	8003760 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fe f854 	bl	8003760 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e045      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x444>
 80056d2:	e03d      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e038      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <HAL_RCC_OscConfig+0x4ec>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d028      	beq.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d121      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0cc      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b68      	ldr	r3, [pc, #416]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d90c      	bls.n	800579c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a58      	ldr	r2, [pc, #352]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a52      	ldr	r2, [pc, #328]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d044      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d119      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581a:	2b03      	cmp	r3, #3
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b3f      	ldr	r3, [pc, #252]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e067      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b37      	ldr	r3, [pc, #220]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4934      	ldr	r1, [pc, #208]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fd ff86 	bl	8003760 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fd ff82 	bl	8003760 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20c      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc f9b2 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00
 800591c:	40023800 	.word	0x40023800
 8005920:	0800d614 	.word	0x0800d614
 8005924:	20000000 	.word	0x20000000
 8005928:	20000064 	.word	0x20000064

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b094      	sub	sp, #80	; 0x50
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	647b      	str	r3, [r7, #68]	; 0x44
 8005938:	2300      	movs	r3, #0
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593c:	2300      	movs	r3, #0
 800593e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005944:	4b79      	ldr	r3, [pc, #484]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 80e1 	bhi.w	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x34>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x3a>
 800595e:	e0db      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b73      	ldr	r3, [pc, #460]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005964:	e0db      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800596a:	e0d8      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596c:	4b6f      	ldr	r3, [pc, #444]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	63bb      	str	r3, [r7, #56]	; 0x38
 800598c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
 800599a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	4651      	mov	r1, sl
 80059e0:	ebb2 0801 	subs.w	r8, r2, r1
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a28:	4621      	mov	r1, r4
 8005a2a:	024a      	lsls	r2, r1, #9
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a3c:	f7fb f8d4 	bl	8000be8 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a48:	e058      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b38      	ldr	r3, [pc, #224]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	4611      	mov	r1, r2
 8005a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	0159      	lsls	r1, r3, #5
 8005a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a76:	0150      	lsls	r0, r2, #5
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	00eb      	lsls	r3, r5, #3
 8005aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ab2:	00e2      	lsls	r2, r4, #3
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	18e3      	adds	r3, r4, r3
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	028b      	lsls	r3, r1, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005adc:	4621      	mov	r1, r4
 8005ade:	028a      	lsls	r2, r1, #10
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	61fa      	str	r2, [r7, #28]
 8005aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af0:	f7fb f87a 	bl	8000be8 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b16:	e002      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3750      	adds	r7, #80	; 0x50
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	; (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	0800d624 	.word	0x0800d624

08005b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	220f      	movs	r2, #15
 8005b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b88:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0203 	and.w	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b94:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	08db      	lsrs	r3, r3, #3
 8005bb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <HAL_RCC_GetClockConfig+0x60>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0207 	and.w	r2, r3, #7
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40023c00 	.word	0x40023c00

08005bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e07b      	b.n	8005ce6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d108      	bne.n	8005c08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfe:	d009      	beq.n	8005c14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	61da      	str	r2, [r3, #28]
 8005c06:	e005      	b.n	8005c14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb ffa2 	bl	8001b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c98:	ea42 0103 	orr.w	r1, r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	f003 0104 	and.w	r1, r3, #4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	f003 0210 	and.w	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b088      	sub	sp, #32
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_SPI_Transmit+0x22>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e126      	b.n	8005f5e <HAL_SPI_Transmit+0x270>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d18:	f7fd fd22 	bl	8003760 <HAL_GetTick>
 8005d1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d32:	e10b      	b.n	8005f4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_Transmit+0x52>
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d44:	e102      	b.n	8005f4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d8c:	d10f      	bne.n	8005dae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d007      	beq.n	8005dcc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd4:	d14b      	bne.n	8005e6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0xf6>
 8005dde:	8afb      	ldrh	r3, [r7, #22]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d13e      	bne.n	8005e62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	1c9a      	adds	r2, r3, #2
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e08:	e02b      	b.n	8005e62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d112      	bne.n	8005e3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e3c:	e011      	b.n	8005e62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e3e:	f7fd fc8f 	bl	8003760 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d803      	bhi.n	8005e56 <HAL_SPI_Transmit+0x168>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d102      	bne.n	8005e5c <HAL_SPI_Transmit+0x16e>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e60:	e074      	b.n	8005f4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ce      	bne.n	8005e0a <HAL_SPI_Transmit+0x11c>
 8005e6c:	e04c      	b.n	8005f08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0x18e>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d140      	bne.n	8005efe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ea2:	e02c      	b.n	8005efe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d113      	bne.n	8005eda <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ed8:	e011      	b.n	8005efe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eda:	f7fd fc41 	bl	8003760 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d803      	bhi.n	8005ef2 <HAL_SPI_Transmit+0x204>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d102      	bne.n	8005ef8 <HAL_SPI_Transmit+0x20a>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005efc:	e026      	b.n	8005f4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1cd      	bne.n	8005ea4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fce9 	bl	80068e4 <SPI_EndRxTxTransaction>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e000      	b.n	8005f4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af02      	add	r7, sp, #8
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f82:	d112      	bne.n	8005faa <HAL_SPI_Receive+0x44>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10e      	bne.n	8005faa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f8f1 	bl	8006188 <HAL_SPI_TransmitReceive>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	e0ea      	b.n	8006180 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_SPI_Receive+0x52>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0e3      	b.n	8006180 <HAL_SPI_Receive+0x21a>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fc0:	f7fd fbce 	bl	8003760 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fd6:	e0ca      	b.n	800616e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Receive+0x7e>
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fe8:	e0c1      	b.n	800616e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2204      	movs	r2, #4
 8005fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	d10f      	bne.n	8006052 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d007      	beq.n	8006070 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d162      	bne.n	800613e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006078:	e02e      	b.n	80060d8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b01      	cmp	r3, #1
 8006086:	d115      	bne.n	80060b4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f103 020c 	add.w	r2, r3, #12
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b2:	e011      	b.n	80060d8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b4:	f7fd fb54 	bl	8003760 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d803      	bhi.n	80060cc <HAL_SPI_Receive+0x166>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Receive+0x16c>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060d6:	e04a      	b.n	800616e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1cb      	bne.n	800607a <HAL_SPI_Receive+0x114>
 80060e2:	e031      	b.n	8006148 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d113      	bne.n	800611a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	b292      	uxth	r2, r2
 80060fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006118:	e011      	b.n	800613e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611a:	f7fd fb21 	bl	8003760 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_Receive+0x1cc>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_Receive+0x1d2>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800613c:	e017      	b.n	800616e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1cd      	bne.n	80060e4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fb63 	bl	8006818 <SPI_EndRxTransaction>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
 800616a:	e000      	b.n	800616e <HAL_SPI_Receive+0x208>
  }

error :
 800616c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	; 0x30
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006196:	2301      	movs	r3, #1
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x26>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e18a      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x33c>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b6:	f7fd fad3 	bl	8003760 <HAL_GetTick>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d00f      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x70>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061de:	d107      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <HAL_SPI_TransmitReceive+0x68>
 80061e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d003      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061f6:	e15b      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_SPI_TransmitReceive+0x82>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_SPI_TransmitReceive+0x82>
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006210:	e14e      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b04      	cmp	r3, #4
 800621c:	d003      	beq.n	8006226 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2205      	movs	r2, #5
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	887a      	ldrh	r2, [r7, #2]
 800623c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	887a      	ldrh	r2, [r7, #2]
 8006248:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	887a      	ldrh	r2, [r7, #2]
 800624e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d007      	beq.n	800627a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006282:	d178      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_SPI_TransmitReceive+0x10a>
 800628c:	8b7b      	ldrh	r3, [r7, #26]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d166      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	881a      	ldrh	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	1c9a      	adds	r2, r3, #2
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	e053      	b.n	8006360 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d11b      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x176>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d016      	beq.n	80062fe <HAL_SPI_TransmitReceive+0x176>
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d113      	bne.n	80062fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	881a      	ldrh	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d119      	bne.n	8006340 <HAL_SPI_TransmitReceive+0x1b8>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d014      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	b292      	uxth	r2, r2
 8006322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800633c:	2301      	movs	r3, #1
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006340:	f7fd fa0e 	bl	8003760 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800634c:	429a      	cmp	r2, r3
 800634e:	d807      	bhi.n	8006360 <HAL_SPI_TransmitReceive+0x1d8>
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d003      	beq.n	8006360 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800635e:	e0a7      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1a6      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x130>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1a1      	bne.n	80062b8 <HAL_SPI_TransmitReceive+0x130>
 8006374:	e07c      	b.n	8006470 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x1fc>
 800637e:	8b7b      	ldrh	r3, [r7, #26]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d16b      	bne.n	800645c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063aa:	e057      	b.n	800645c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d11c      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x26c>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x26c>
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d114      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d119      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x2ae>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d014      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006432:	2301      	movs	r3, #1
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006436:	f7fd f993 	bl	8003760 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006442:	429a      	cmp	r2, r3
 8006444:	d803      	bhi.n	800644e <HAL_SPI_TransmitReceive+0x2c6>
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d102      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x2cc>
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800645a:	e029      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1a2      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x224>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d19d      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa35 	bl	80068e4 <SPI_EndRxTxTransaction>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d006      	beq.n	800648e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800648c:	e010      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	e000      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3730      	adds	r7, #48	; 0x30
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10f      	bne.n	8006510 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00a      	beq.n	8006510 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	099b      	lsrs	r3, r3, #6
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
    return;
 800650e:	e0d7      	b.n	80066c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <HAL_SPI_IRQHandler+0x66>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	09db      	lsrs	r3, r3, #7
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
    return;
 8006530:	e0c6      	b.n	80066c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <HAL_SPI_IRQHandler+0x8c>
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	0a1b      	lsrs	r3, r3, #8
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80b4 	beq.w	80066c0 <HAL_SPI_IRQHandler+0x1f4>
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80ad 	beq.w	80066c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	099b      	lsrs	r3, r3, #6
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d011      	beq.n	80065a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	e00b      	b.n	80065ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	693b      	ldr	r3, [r7, #16]
        return;
 80065b8:	e082      	b.n	80066c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d014      	beq.n	80065f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f043 0201 	orr.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00c      	beq.n	8006616 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	f043 0208 	orr.w	r2, r3, #8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04f      	beq.n	80066be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800662c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_SPI_IRQHandler+0x17e>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d034      	beq.n	80066b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0203 	bic.w	r2, r2, #3
 8006658:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d011      	beq.n	8006686 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006668:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe f9a4 	bl	80049bc <HAL_DMA_Abort_IT>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <HAL_SPI_IRQHandler+0x1fc>)
 8006694:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe f98e 	bl	80049bc <HAL_DMA_Abort_IT>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066b2:	e003      	b.n	80066bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f809 	bl	80066cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066ba:	e000      	b.n	80066be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80066bc:	bf00      	nop
    return;
 80066be:	bf00      	nop
  }
}
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	080066e1 	.word	0x080066e1

080066cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff ffe6 	bl	80066cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006718:	f7fd f822 	bl	8003760 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4413      	add	r3, r2
 8006726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006728:	f7fd f81a 	bl	8003760 <HAL_GetTick>
 800672c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	015b      	lsls	r3, r3, #5
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673e:	e054      	b.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d050      	beq.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006748:	f7fd f80a 	bl	8003760 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d902      	bls.n	800675e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d13d      	bne.n	80067da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800676c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d111      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	d004      	beq.n	800678c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d107      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d10f      	bne.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e017      	b.n	800680a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	429a      	cmp	r2, r3
 8006806:	d19b      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000000 	.word	0x20000000

08006818 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682c:	d111      	bne.n	8006852 <SPI_EndRxTransaction+0x3a>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006836:	d004      	beq.n	8006842 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d107      	bne.n	8006852 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006850:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800685a:	d12a      	bne.n	80068b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006864:	d012      	beq.n	800688c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff ff49 	bl	8006708 <SPI_WaitFlagStateUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d02d      	beq.n	80068d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e026      	b.n	80068da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2200      	movs	r2, #0
 8006894:	2101      	movs	r1, #1
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff ff36 	bl	8006708 <SPI_WaitFlagStateUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01a      	beq.n	80068d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e013      	b.n	80068da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2101      	movs	r1, #1
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff ff23 	bl	8006708 <SPI_WaitFlagStateUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d007      	beq.n	80068d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e000      	b.n	80068da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068f0:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <SPI_EndRxTxTransaction+0x7c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <SPI_EndRxTxTransaction+0x80>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	0d5b      	lsrs	r3, r3, #21
 80068fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690e:	d112      	bne.n	8006936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fef4 	bl	8006708 <SPI_WaitFlagStateUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692a:	f043 0220 	orr.w	r2, r3, #32
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e00f      	b.n	8006956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	3b01      	subs	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d0f2      	beq.n	8006936 <SPI_EndRxTxTransaction+0x52>
 8006950:	e000      	b.n	8006954 <SPI_EndRxTxTransaction+0x70>
        break;
 8006952:	bf00      	nop
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000000 	.word	0x20000000
 8006964:	165e9f81 	.word	0x165e9f81

08006968 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e038      	b.n	80069f0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7fa ff84 	bl	80018a0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3308      	adds	r3, #8
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f000 fd12 	bl	80073cc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68b9      	ldr	r1, [r7, #8]
 80069b4:	f000 fd74 	bl	80074a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6858      	ldr	r0, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	f000 fda1 	bl	800750c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	6892      	ldr	r2, [r2, #8]
 80069d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	6892      	ldr	r2, [r2, #8]
 80069de:	f041 0101 	orr.w	r1, r1, #1
 80069e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e041      	b.n	8006a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fb fa80 	bl	8001f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f000 fafe 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d001      	beq.n	8006ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e046      	b.n	8006b3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <HAL_TIM_Base_Start+0xb4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d022      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aca:	d01d      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1f      	ldr	r2, [pc, #124]	; (8006b50 <HAL_TIM_Base_Start+0xb8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d018      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <HAL_TIM_Base_Start+0xbc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d013      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_TIM_Base_Start+0xc0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00e      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_TIM_Base_Start+0xc4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d009      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a19      	ldr	r2, [pc, #100]	; (8006b60 <HAL_TIM_Base_Start+0xc8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIM_Base_Start+0x70>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a18      	ldr	r2, [pc, #96]	; (8006b64 <HAL_TIM_Base_Start+0xcc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d111      	bne.n	8006b2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b06      	cmp	r3, #6
 8006b18:	d010      	beq.n	8006b3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2a:	e007      	b.n	8006b3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40010400 	.word	0x40010400
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40001800 	.word	0x40001800

08006b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d001      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04e      	b.n	8006c1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a23      	ldr	r2, [pc, #140]	; (8006c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d022      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d01d      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1f      	ldr	r2, [pc, #124]	; (8006c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d018      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <HAL_TIM_Base_Start_IT+0x80>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d111      	bne.n	8006c0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d010      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0a:	e007      	b.n	8006c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40001800 	.word	0x40001800

08006c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d122      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d11b      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0202 	mvn.w	r2, #2
 8006c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9b5 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006c90:	e005      	b.n	8006c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9a7 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9b8 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d122      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0204 	mvn.w	r2, #4
 8006cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f98b 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006ce4:	e005      	b.n	8006cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f97d 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f98e 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d122      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d11b      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0208 	mvn.w	r2, #8
 8006d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2204      	movs	r2, #4
 8006d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f961 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006d38:	e005      	b.n	8006d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f953 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f964 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b10      	cmp	r3, #16
 8006d58:	d122      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d11b      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0210 	mvn.w	r2, #16
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2208      	movs	r2, #8
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f937 	bl	8006ffa <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f929 	bl	8006fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f93a 	bl	800700e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0201 	mvn.w	r2, #1
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fa fe88 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fae0 	bl	80073b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f8ff 	bl	8007022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0220 	mvn.w	r2, #32
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 faaa 	bl	80073a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIM_ConfigClockSource+0x1c>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e0b4      	b.n	8006fde <HAL_TIM_ConfigClockSource+0x186>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d03e      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0xd4>
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	f200 8087 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	f000 8086 	beq.w	8006fca <HAL_TIM_ConfigClockSource+0x172>
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d87f      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b70      	cmp	r3, #112	; 0x70
 8006ec6:	d01a      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0xa6>
 8006ec8:	2b70      	cmp	r3, #112	; 0x70
 8006eca:	d87b      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b60      	cmp	r3, #96	; 0x60
 8006ece:	d050      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x11a>
 8006ed0:	2b60      	cmp	r3, #96	; 0x60
 8006ed2:	d877      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	d03c      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0xfa>
 8006ed8:	2b50      	cmp	r3, #80	; 0x50
 8006eda:	d873      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d058      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x13a>
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d86f      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b30      	cmp	r3, #48	; 0x30
 8006ee6:	d064      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ee8:	2b30      	cmp	r3, #48	; 0x30
 8006eea:	d86b      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d060      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d867      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05c      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d05a      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8006efc:	e062      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6899      	ldr	r1, [r3, #8]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f000 f9ad 	bl	800726c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	609a      	str	r2, [r3, #8]
      break;
 8006f2a:	e04f      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f000 f996 	bl	800726c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f4e:	609a      	str	r2, [r3, #8]
      break;
 8006f50:	e03c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6859      	ldr	r1, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f000 f90a 	bl	8007178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2150      	movs	r1, #80	; 0x50
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f963 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006f70:	e02c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6859      	ldr	r1, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f000 f929 	bl	80071d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2160      	movs	r1, #96	; 0x60
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f953 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006f90:	e01c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6859      	ldr	r1, [r3, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f000 f8ea 	bl	8007178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f943 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006fb0:	e00c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f000 f93a 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006fc2:	e003      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e000      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007016:	bf00      	nop
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a40      	ldr	r2, [pc, #256]	; (800714c <TIM_Base_SetConfig+0x114>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d00f      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3d      	ldr	r2, [pc, #244]	; (8007150 <TIM_Base_SetConfig+0x118>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3c      	ldr	r2, [pc, #240]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3b      	ldr	r2, [pc, #236]	; (8007158 <TIM_Base_SetConfig+0x120>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a3a      	ldr	r2, [pc, #232]	; (800715c <TIM_Base_SetConfig+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d108      	bne.n	800708a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2f      	ldr	r2, [pc, #188]	; (800714c <TIM_Base_SetConfig+0x114>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d02b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d027      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2c      	ldr	r2, [pc, #176]	; (8007150 <TIM_Base_SetConfig+0x118>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d023      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2b      	ldr	r2, [pc, #172]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2a      	ldr	r2, [pc, #168]	; (8007158 <TIM_Base_SetConfig+0x120>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a29      	ldr	r2, [pc, #164]	; (800715c <TIM_Base_SetConfig+0x124>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d017      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a28      	ldr	r2, [pc, #160]	; (8007160 <TIM_Base_SetConfig+0x128>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a27      	ldr	r2, [pc, #156]	; (8007164 <TIM_Base_SetConfig+0x12c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a26      	ldr	r2, [pc, #152]	; (8007168 <TIM_Base_SetConfig+0x130>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a25      	ldr	r2, [pc, #148]	; (800716c <TIM_Base_SetConfig+0x134>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <TIM_Base_SetConfig+0x138>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a23      	ldr	r2, [pc, #140]	; (8007174 <TIM_Base_SetConfig+0x13c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0a      	ldr	r2, [pc, #40]	; (800714c <TIM_Base_SetConfig+0x114>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a0c      	ldr	r2, [pc, #48]	; (800715c <TIM_Base_SetConfig+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d103      	bne.n	8007138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	615a      	str	r2, [r3, #20]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800
 800716c:	40001800 	.word	0x40001800
 8007170:	40001c00 	.word	0x40001c00
 8007174:	40002000 	.word	0x40002000

08007178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 030a 	bic.w	r3, r3, #10
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0210 	bic.w	r2, r3, #16
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	031b      	lsls	r3, r3, #12
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	f043 0307 	orr.w	r3, r3, #7
 8007258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	609a      	str	r2, [r3, #8]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	021a      	lsls	r2, r3, #8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	431a      	orrs	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4313      	orrs	r3, r2
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e05a      	b.n	800737a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d022      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007310:	d01d      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d018      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00e      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d009      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a17      	ldr	r2, [pc, #92]	; (800739c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d004      	beq.n	800734e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d10c      	bne.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4313      	orrs	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40010000 	.word	0x40010000
 800738c:	40000400 	.word	0x40000400
 8007390:	40000800 	.word	0x40000800
 8007394:	40000c00 	.word	0x40000c00
 8007398:	40010400 	.word	0x40010400
 800739c:	40014000 	.word	0x40014000
 80073a0:	40001800 	.word	0x40001800

080073a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	f023 0101 	bic.w	r1, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d102      	bne.n	80073fc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073f6:	2340      	movs	r3, #64	; 0x40
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e001      	b.n	8007400 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800740c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007412:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007418:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800741e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007424:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800742a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007430:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007436:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800743c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800745a:	4b10      	ldr	r3, [pc, #64]	; (800749c <FSMC_NORSRAM_Init+0xd0>)
 800745c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007464:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800746c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	43db      	mvns	r3, r3
 800747c:	ea02 0103 	and.w	r1, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4319      	orrs	r1, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	0008fb7f 	.word	0x0008fb7f

080074a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	431a      	orrs	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	431a      	orrs	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	3b01      	subs	r3, #1
 80074dc:	051b      	lsls	r3, r3, #20
 80074de:	431a      	orrs	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	3b02      	subs	r3, #2
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	3201      	adds	r2, #1
 80074f4:	4319      	orrs	r1, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007520:	d11d      	bne.n	800755e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800752c:	4013      	ands	r3, r2
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	6811      	ldr	r1, [r2, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	6852      	ldr	r2, [r2, #4]
 8007536:	0112      	lsls	r2, r2, #4
 8007538:	4311      	orrs	r1, r2
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	6892      	ldr	r2, [r2, #8]
 800753e:	0212      	lsls	r2, r2, #8
 8007540:	4311      	orrs	r1, r2
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	6992      	ldr	r2, [r2, #24]
 8007546:	4311      	orrs	r1, r2
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	68d2      	ldr	r2, [r2, #12]
 800754c:	0412      	lsls	r2, r2, #16
 800754e:	430a      	orrs	r2, r1
 8007550:	ea43 0102 	orr.w	r1, r3, r2
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800755c:	e005      	b.n	800756a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	cff00000 	.word	0xcff00000

0800757c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800758a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800758e:	2b84      	cmp	r3, #132	; 0x84
 8007590:	d005      	beq.n	800759e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007592:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	3303      	adds	r3, #3
 800759c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800759e:	68fb      	ldr	r3, [r7, #12]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b2:	f3ef 8305 	mrs	r3, IPSR
 80075b6:	607b      	str	r3, [r7, #4]
  return(result);
 80075b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075d4:	f001 fa12 	bl	80089fc <vTaskStartScheduler>
  
  return osOK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	bd80      	pop	{r7, pc}

080075de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e0:	b089      	sub	sp, #36	; 0x24
 80075e2:	af04      	add	r7, sp, #16
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d020      	beq.n	8007632 <osThreadCreate+0x54>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01c      	beq.n	8007632 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685c      	ldr	r4, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681d      	ldr	r5, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691e      	ldr	r6, [r3, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ffb6 	bl	800757c <makeFreeRtosPriority>
 8007610:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800761a:	9202      	str	r2, [sp, #8]
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	9100      	str	r1, [sp, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	4632      	mov	r2, r6
 8007624:	4629      	mov	r1, r5
 8007626:	4620      	mov	r0, r4
 8007628:	f001 f820 	bl	800866c <xTaskCreateStatic>
 800762c:	4603      	mov	r3, r0
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	e01c      	b.n	800766c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685c      	ldr	r4, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800763e:	b29e      	uxth	r6, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff98 	bl	800757c <makeFreeRtosPriority>
 800764c:	4602      	mov	r2, r0
 800764e:	f107 030c 	add.w	r3, r7, #12
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	9200      	str	r2, [sp, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	4632      	mov	r2, r6
 800765a:	4629      	mov	r1, r5
 800765c:	4620      	mov	r0, r4
 800765e:	f001 f862 	bl	8008726 <xTaskCreate>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d001      	beq.n	800766c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800766c:	68fb      	ldr	r3, [r7, #12]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007676 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <osDelay+0x16>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e000      	b.n	800768e <osDelay+0x18>
 800768c:	2301      	movs	r3, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f001 f980 	bl	8008994 <vTaskDelay>
  
  return osOK;
 8007694:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af02      	add	r7, sp, #8
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	460b      	mov	r3, r1
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <osTimerCreate+0x20>
 80076bc:	2101      	movs	r1, #1
 80076be:	e000      	b.n	80076c2 <osTimerCreate+0x22>
 80076c0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80076ca:	9201      	str	r2, [sp, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	460a      	mov	r2, r1
 80076d2:	2101      	movs	r1, #1
 80076d4:	480b      	ldr	r0, [pc, #44]	; (8007704 <osTimerCreate+0x64>)
 80076d6:	f001 ff44 	bl	8009562 <xTimerCreateStatic>
 80076da:	4603      	mov	r3, r0
 80076dc:	e00e      	b.n	80076fc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <osTimerCreate+0x48>
 80076e4:	2201      	movs	r2, #1
 80076e6:	e000      	b.n	80076ea <osTimerCreate+0x4a>
 80076e8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2101      	movs	r1, #1
 80076f4:	4803      	ldr	r0, [pc, #12]	; (8007704 <osTimerCreate+0x64>)
 80076f6:	f001 ff13 	bl	8009520 <xTimerCreate>
 80076fa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	0800d5f8 	.word	0x0800d5f8

08007708 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <osTimerStart+0x20>
    ticks = 1;
 8007724:	2301      	movs	r3, #1
 8007726:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007728:	f7ff ff40 	bl	80075ac <inHandlerMode>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01a      	beq.n	8007768 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007732:	f107 030c 	add.w	r3, r7, #12
 8007736:	2200      	movs	r2, #0
 8007738:	9200      	str	r2, [sp, #0]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	2109      	movs	r1, #9
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 ff88 	bl	8009654 <xTimerGenericCommand>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d002      	beq.n	8007750 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800774a:	23ff      	movs	r3, #255	; 0xff
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e018      	b.n	8007782 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d015      	beq.n	8007782 <osTimerStart+0x7a>
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <osTimerStart+0x84>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	e00c      	b.n	8007782 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	2104      	movs	r1, #4
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 ff6e 	bl	8009654 <xTimerGenericCommand>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d001      	beq.n	8007782 <osTimerStart+0x7a>
      result = osErrorOS;
 800777e:	23ff      	movs	r3, #255	; 0xff
 8007780:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007782:	697b      	ldr	r3, [r7, #20]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80077a0:	f7ff ff04 	bl	80075ac <inHandlerMode>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d019      	beq.n	80077de <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	2200      	movs	r2, #0
 80077b0:	9200      	str	r2, [sp, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2108      	movs	r1, #8
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 ff4c 	bl	8009654 <xTimerGenericCommand>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d001      	beq.n	80077c6 <osTimerStop+0x36>
      return osErrorOS;
 80077c2:	23ff      	movs	r3, #255	; 0xff
 80077c4:	e019      	b.n	80077fa <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <osTimerStop+0x68>
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <osTimerStop+0x74>)
 80077ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	e00c      	b.n	80077f8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	2200      	movs	r2, #0
 80077e6:	2103      	movs	r1, #3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 ff33 	bl	8009654 <xTimerGenericCommand>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d001      	beq.n	80077f8 <osTimerStop+0x68>
      result = osErrorOS;
 80077f4:	23ff      	movs	r3, #255	; 0xff
 80077f6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b085      	sub	sp, #20
 800780c:	af02      	add	r7, sp, #8
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d011      	beq.n	800783e <osMessageCreate+0x36>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00d      	beq.n	800783e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6859      	ldr	r1, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	2400      	movs	r4, #0
 8007834:	9400      	str	r4, [sp, #0]
 8007836:	f000 f9df 	bl	8007bf8 <xQueueGenericCreateStatic>
 800783a:	4603      	mov	r3, r0
 800783c:	e008      	b.n	8007850 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	4619      	mov	r1, r3
 800784a:	f000 fa4d 	bl	8007ce8 <xQueueGenericCreate>
 800784e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bd90      	pop	{r4, r7, pc}

08007858 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007864:	2300      	movs	r3, #0
 8007866:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <osMessagePut+0x1e>
    ticks = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007876:	f7ff fe99 	bl	80075ac <inHandlerMode>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d018      	beq.n	80078b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007880:	f107 0210 	add.w	r2, r7, #16
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	2300      	movs	r3, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fb84 	bl	8007f98 <xQueueGenericSendFromISR>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d001      	beq.n	800789a <osMessagePut+0x42>
      return osErrorOS;
 8007896:	23ff      	movs	r3, #255	; 0xff
 8007898:	e018      	b.n	80078cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d014      	beq.n	80078ca <osMessagePut+0x72>
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <osMessagePut+0x7c>)
 80078a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	e00b      	b.n	80078ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80078b2:	f107 0108 	add.w	r1, r7, #8
 80078b6:	2300      	movs	r3, #0
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa6e 	bl	8007d9c <xQueueGenericSend>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d001      	beq.n	80078ca <osMessagePut+0x72>
      return osErrorOS;
 80078c6:	23ff      	movs	r3, #255	; 0xff
 80078c8:	e000      	b.n	80078cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b08b      	sub	sp, #44	; 0x2c
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80078f2:	2380      	movs	r3, #128	; 0x80
 80078f4:	617b      	str	r3, [r7, #20]
    return event;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	461c      	mov	r4, r3
 80078fa:	f107 0314 	add.w	r3, r7, #20
 80078fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007906:	e054      	b.n	80079b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007908:	2300      	movs	r3, #0
 800790a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
 800791e:	e009      	b.n	8007934 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d006      	beq.n	8007934 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <osMessageGet+0x5c>
      ticks = 1;
 8007930:	2301      	movs	r3, #1
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007934:	f7ff fe3a 	bl	80075ac <inHandlerMode>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01c      	beq.n	8007978 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800793e:	f107 0220 	add.w	r2, r7, #32
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	3304      	adds	r3, #4
 8007948:	4619      	mov	r1, r3
 800794a:	68b8      	ldr	r0, [r7, #8]
 800794c:	f000 fca0 	bl	8008290 <xQueueReceiveFromISR>
 8007950:	4603      	mov	r3, r0
 8007952:	2b01      	cmp	r3, #1
 8007954:	d102      	bne.n	800795c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007956:	2310      	movs	r3, #16
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e001      	b.n	8007960 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01d      	beq.n	80079a2 <osMessageGet+0xca>
 8007966:	4b15      	ldr	r3, [pc, #84]	; (80079bc <osMessageGet+0xe4>)
 8007968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	e014      	b.n	80079a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	3304      	adds	r3, #4
 800797e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007980:	4619      	mov	r1, r3
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f000 fba4 	bl	80080d0 <xQueueReceive>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d102      	bne.n	8007994 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800798e:	2310      	movs	r3, #16
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	e006      	b.n	80079a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <osMessageGet+0xc6>
 800799a:	2300      	movs	r3, #0
 800799c:	e000      	b.n	80079a0 <osMessageGet+0xc8>
 800799e:	2340      	movs	r3, #64	; 0x40
 80079a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	461c      	mov	r4, r3
 80079a6:	f107 0314 	add.w	r3, r7, #20
 80079aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	372c      	adds	r7, #44	; 0x2c
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd90      	pop	{r4, r7, pc}
 80079ba:	bf00      	nop
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 0208 	add.w	r2, r3, #8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295
 80079d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f103 0208 	add.w	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f103 0208 	add.w	r2, r3, #8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
}
 8007a56:	bf00      	nop
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d103      	bne.n	8007a82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e00c      	b.n	8007a9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3308      	adds	r3, #8
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e002      	b.n	8007a90 <vListInsert+0x2e>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d2f6      	bcs.n	8007a8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6892      	ldr	r2, [r2, #8]
 8007aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6852      	ldr	r2, [r2, #4]
 8007af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d103      	bne.n	8007b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	1e5a      	subs	r2, r3, #1
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b52:	f002 f997 	bl	8009e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b62:	fb01 f303 	mul.w	r3, r1, r3
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	3b01      	subs	r3, #1
 8007b84:	68f9      	ldr	r1, [r7, #12]
 8007b86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d114      	bne.n	8007bd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01a      	beq.n	8007be6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3310      	adds	r3, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 f9a5 	bl	8008f04 <xTaskRemoveFromEventList>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d012      	beq.n	8007be6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <xQueueGenericReset+0xcc>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	e009      	b.n	8007be6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fef2 	bl	80079c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3324      	adds	r3, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff feed 	bl	80079c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007be6:	f002 f97d 	bl	8009ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bea:	2301      	movs	r3, #1
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	; 0x38
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <xQueueGenericCreateStatic+0x52>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <xQueueGenericCreateStatic+0x56>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueGenericCreateStatic+0x58>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	623b      	str	r3, [r7, #32]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <xQueueGenericCreateStatic+0x7e>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericCreateStatic+0x82>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericCreateStatic+0x84>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	61fb      	str	r3, [r7, #28]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c96:	2348      	movs	r3, #72	; 0x48
 8007c98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b48      	cmp	r3, #72	; 0x48
 8007c9e:	d00a      	beq.n	8007cb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	61bb      	str	r3, [r7, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00d      	beq.n	8007cde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f83f 	bl	8007d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3730      	adds	r7, #48	; 0x30
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	613b      	str	r3, [r7, #16]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	3348      	adds	r3, #72	; 0x48
 8007d20:	4618      	mov	r0, r3
 8007d22:	f002 f9d1 	bl	800a0c8 <pvPortMalloc>
 8007d26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d011      	beq.n	8007d52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	3348      	adds	r3, #72	; 0x48
 8007d36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d40:	79fa      	ldrb	r2, [r7, #7]
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4613      	mov	r3, r2
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f805 	bl	8007d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d52:	69bb      	ldr	r3, [r7, #24]
	}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	69b8      	ldr	r0, [r7, #24]
 8007d8e:	f7ff fecb 	bl	8007b28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08e      	sub	sp, #56	; 0x38
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericSend+0x32>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d103      	bne.n	8007ddc <xQueueGenericSend+0x40>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <xQueueGenericSend+0x44>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <xQueueGenericSend+0x46>
 8007de0:	2300      	movs	r3, #0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <xQueueGenericSend+0x60>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d103      	bne.n	8007e0a <xQueueGenericSend+0x6e>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <xQueueGenericSend+0x72>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueGenericSend+0x74>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xQueueGenericSend+0x8e>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	623b      	str	r3, [r7, #32]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e2a:	f001 fa27 	bl	800927c <xTaskGetSchedulerState>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <xQueueGenericSend+0x9e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSend+0xa2>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSend+0xa4>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	61fb      	str	r3, [r7, #28]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5a:	f002 f813 	bl	8009e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <xQueueGenericSend+0xd4>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d129      	bne.n	8007ec4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e76:	f000 fa8b 	bl	8008390 <prvCopyDataToQueue>
 8007e7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d010      	beq.n	8007ea6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f83b 	bl	8008f04 <xTaskRemoveFromEventList>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e94:	4b3f      	ldr	r3, [pc, #252]	; (8007f94 <xQueueGenericSend+0x1f8>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	e00a      	b.n	8007ebc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007eac:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <xQueueGenericSend+0x1f8>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ebc:	f002 f812 	bl	8009ee4 <vPortExitCritical>
				return pdPASS;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e063      	b.n	8007f8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eca:	f002 f80b 	bl	8009ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e05c      	b.n	8007f8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 f873 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee6:	f001 fffd 	bl	8009ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eea:	f000 fded 	bl	8008ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eee:	f001 ffc9 	bl	8009e84 <vPortEnterCritical>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d103      	bne.n	8007f08 <xQueueGenericSend+0x16c>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0e:	b25b      	sxtb	r3, r3
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSend+0x182>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1e:	f001 ffe1 	bl	8009ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f22:	1d3a      	adds	r2, r7, #4
 8007f24:	f107 0314 	add.w	r3, r7, #20
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f862 	bl	8008ff4 <xTaskCheckForTimeOut>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d124      	bne.n	8007f80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f38:	f000 fb22 	bl	8008580 <prvIsQueueFull>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d018      	beq.n	8007f74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 ff8a 	bl	8008e64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f52:	f000 faad 	bl	80084b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f56:	f000 fdc5 	bl	8008ae4 <xTaskResumeAll>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f47f af7c 	bne.w	8007e5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <xQueueGenericSend+0x1f8>)
 8007f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	e772      	b.n	8007e5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f76:	f000 fa9b 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7a:	f000 fdb3 	bl	8008ae4 <xTaskResumeAll>
 8007f7e:	e76c      	b.n	8007e5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f82:	f000 fa95 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f86:	f000 fdad 	bl	8008ae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3738      	adds	r7, #56	; 0x38
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b090      	sub	sp, #64	; 0x40
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <xQueueGenericSendFromISR+0x3c>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <xQueueGenericSendFromISR+0x40>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <xQueueGenericSendFromISR+0x42>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d103      	bne.n	8008002 <xQueueGenericSendFromISR+0x6a>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <xQueueGenericSendFromISR+0x6e>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <xQueueGenericSendFromISR+0x70>
 8008006:	2300      	movs	r3, #0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	623b      	str	r3, [r7, #32]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008022:	f002 f811 	bl	800a048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008026:	f3ef 8211 	mrs	r2, BASEPRI
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	61fa      	str	r2, [r7, #28]
 800803c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800803e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <xQueueGenericSendFromISR+0xbc>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d12f      	bne.n	80080b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800806a:	f000 f991 	bl	8008390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800806e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d112      	bne.n	800809e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d016      	beq.n	80080ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	3324      	adds	r3, #36	; 0x24
 8008084:	4618      	mov	r0, r3
 8008086:	f000 ff3d 	bl	8008f04 <xTaskRemoveFromEventList>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00e      	beq.n	80080ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	e007      	b.n	80080ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800809e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080a2:	3301      	adds	r3, #1
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	b25a      	sxtb	r2, r3
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080ae:	2301      	movs	r3, #1
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080b2:	e001      	b.n	80080b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3740      	adds	r7, #64	; 0x40
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08c      	sub	sp, #48	; 0x30
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080dc:	2300      	movs	r3, #0
 80080de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <xQueueReceive+0x30>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	623b      	str	r3, [r7, #32]
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <xQueueReceive+0x3e>
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <xQueueReceive+0x42>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <xQueueReceive+0x44>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <xQueueReceive+0x5e>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	61fb      	str	r3, [r7, #28]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800812e:	f001 f8a5 	bl	800927c <xTaskGetSchedulerState>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <xQueueReceive+0x6e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <xQueueReceive+0x72>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueReceive+0x74>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xQueueReceive+0x8e>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61bb      	str	r3, [r7, #24]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800815e:	f001 fe91 	bl	8009e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01f      	beq.n	80081ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008172:	f000 f977 	bl	8008464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00f      	beq.n	80081a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	3310      	adds	r3, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f000 feba 	bl	8008f04 <xTaskRemoveFromEventList>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008196:	4b3d      	ldr	r3, [pc, #244]	; (800828c <xQueueReceive+0x1bc>)
 8008198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081a6:	f001 fe9d 	bl	8009ee4 <vPortExitCritical>
				return pdPASS;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e069      	b.n	8008282 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081b4:	f001 fe96 	bl	8009ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e062      	b.n	8008282 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c2:	f107 0310 	add.w	r3, r7, #16
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 fefe 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081d0:	f001 fe88 	bl	8009ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081d4:	f000 fc78 	bl	8008ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081d8:	f001 fe54 	bl	8009e84 <vPortEnterCritical>
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d103      	bne.n	80081f2 <xQueueReceive+0x122>
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d103      	bne.n	8008208 <xQueueReceive+0x138>
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008208:	f001 fe6c 	bl	8009ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800820c:	1d3a      	adds	r2, r7, #4
 800820e:	f107 0310 	add.w	r3, r7, #16
 8008212:	4611      	mov	r1, r2
 8008214:	4618      	mov	r0, r3
 8008216:	f000 feed 	bl	8008ff4 <xTaskCheckForTimeOut>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d123      	bne.n	8008268 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008222:	f000 f997 	bl	8008554 <prvIsQueueEmpty>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d017      	beq.n	800825c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	3324      	adds	r3, #36	; 0x24
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f000 fe15 	bl	8008e64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800823a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823c:	f000 f938 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008240:	f000 fc50 	bl	8008ae4 <xTaskResumeAll>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d189      	bne.n	800815e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800824a:	4b10      	ldr	r3, [pc, #64]	; (800828c <xQueueReceive+0x1bc>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	e780      	b.n	800815e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800825c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825e:	f000 f927 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008262:	f000 fc3f 	bl	8008ae4 <xTaskResumeAll>
 8008266:	e77a      	b.n	800815e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826a:	f000 f921 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800826e:	f000 fc39 	bl	8008ae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008274:	f000 f96e 	bl	8008554 <prvIsQueueEmpty>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	f43f af6f 	beq.w	800815e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008280:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008282:	4618      	mov	r0, r3
 8008284:	3730      	adds	r7, #48	; 0x30
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08e      	sub	sp, #56	; 0x38
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	623b      	str	r3, [r7, #32]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <xQueueReceiveFromISR+0x3a>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <xQueueReceiveFromISR+0x3e>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <xQueueReceiveFromISR+0x40>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	61fb      	str	r3, [r7, #28]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082ea:	f001 fead 	bl	800a048 <vPortValidateInterruptPriority>
	__asm volatile
 80082ee:	f3ef 8211 	mrs	r2, BASEPRI
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	61ba      	str	r2, [r7, #24]
 8008304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d02f      	beq.n	8008376 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008324:	f000 f89e 	bl	8008464 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	1e5a      	subs	r2, r3, #1
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d112      	bne.n	8008360 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d016      	beq.n	8008370 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	3310      	adds	r3, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fddc 	bl	8008f04 <xTaskRemoveFromEventList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00e      	beq.n	8008370 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e007      	b.n	8008370 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008364:	3301      	adds	r3, #1
 8008366:	b2db      	uxtb	r3, r3
 8008368:	b25a      	sxtb	r2, r3
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008370:	2301      	movs	r3, #1
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
 8008374:	e001      	b.n	800837a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f383 8811 	msr	BASEPRI, r3
}
 8008384:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008388:	4618      	mov	r0, r3
 800838a:	3738      	adds	r7, #56	; 0x38
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d14d      	bne.n	8008452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ff7c 	bl	80092b8 <xTaskPriorityDisinherit>
 80083c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	e043      	b.n	8008452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d119      	bne.n	8008404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6858      	ldr	r0, [r3, #4]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	461a      	mov	r2, r3
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	f002 fc25 	bl	800ac2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d32b      	bcc.n	8008452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	e026      	b.n	8008452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	68d8      	ldr	r0, [r3, #12]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	461a      	mov	r2, r3
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	f002 fc0b 	bl	800ac2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	425b      	negs	r3, r3
 800841e:	441a      	add	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d207      	bcs.n	8008440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008438:	425b      	negs	r3, r3
 800843a:	441a      	add	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d105      	bne.n	8008452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	3b01      	subs	r3, #1
 8008450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800845a:	697b      	ldr	r3, [r7, #20]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d018      	beq.n	80084a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	d303      	bcc.n	8008498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68d9      	ldr	r1, [r3, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	461a      	mov	r2, r3
 80084a2:	6838      	ldr	r0, [r7, #0]
 80084a4:	f002 fbc1 	bl	800ac2a <memcpy>
	}
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084b8:	f001 fce4 	bl	8009e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c4:	e011      	b.n	80084ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d012      	beq.n	80084f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3324      	adds	r3, #36	; 0x24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fd16 	bl	8008f04 <xTaskRemoveFromEventList>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084de:	f000 fdeb 	bl	80090b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dce9      	bgt.n	80084c6 <prvUnlockQueue+0x16>
 80084f2:	e000      	b.n	80084f6 <prvUnlockQueue+0x46>
					break;
 80084f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	22ff      	movs	r2, #255	; 0xff
 80084fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80084fe:	f001 fcf1 	bl	8009ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008502:	f001 fcbf 	bl	8009e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800850c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800850e:	e011      	b.n	8008534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d012      	beq.n	800853e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3310      	adds	r3, #16
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fcf1 	bl	8008f04 <xTaskRemoveFromEventList>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008528:	f000 fdc6 	bl	80090b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800852c:	7bbb      	ldrb	r3, [r7, #14]
 800852e:	3b01      	subs	r3, #1
 8008530:	b2db      	uxtb	r3, r3
 8008532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008538:	2b00      	cmp	r3, #0
 800853a:	dce9      	bgt.n	8008510 <prvUnlockQueue+0x60>
 800853c:	e000      	b.n	8008540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800853e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	22ff      	movs	r2, #255	; 0xff
 8008544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008548:	f001 fccc 	bl	8009ee4 <vPortExitCritical>
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800855c:	f001 fc92 	bl	8009e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e001      	b.n	8008572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008572:	f001 fcb7 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 8008576:	68fb      	ldr	r3, [r7, #12]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008588:	f001 fc7c 	bl	8009e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	429a      	cmp	r2, r3
 8008596:	d102      	bne.n	800859e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e001      	b.n	80085a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085a2:	f001 fc9f 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 80085a6:	68fb      	ldr	r3, [r7, #12]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e014      	b.n	80085ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085c0:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <vQueueAddToRegistry+0x50>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10b      	bne.n	80085e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085cc:	490c      	ldr	r1, [pc, #48]	; (8008600 <vQueueAddToRegistry+0x50>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <vQueueAddToRegistry+0x50>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085e2:	e006      	b.n	80085f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b07      	cmp	r3, #7
 80085ee:	d9e7      	bls.n	80085c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	200011d8 	.word	0x200011d8

08008604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008614:	f001 fc36 	bl	8009e84 <vPortEnterCritical>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861e:	b25b      	sxtb	r3, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d103      	bne.n	800862e <vQueueWaitForMessageRestricted+0x2a>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008634:	b25b      	sxtb	r3, r3
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d103      	bne.n	8008644 <vQueueWaitForMessageRestricted+0x40>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008644:	f001 fc4e 	bl	8009ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fc27 	bl	8008eac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff26 	bl	80084b0 <prvUnlockQueue>
	}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08e      	sub	sp, #56	; 0x38
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	623b      	str	r3, [r7, #32]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	61fb      	str	r3, [r7, #28]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086b2:	2354      	movs	r3, #84	; 0x54
 80086b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b54      	cmp	r3, #84	; 0x54
 80086ba:	d00a      	beq.n	80086d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	61bb      	str	r3, [r7, #24]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01e      	beq.n	8008718 <xTaskCreateStatic+0xac>
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01b      	beq.n	8008718 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086f2:	2300      	movs	r3, #0
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	f107 0314 	add.w	r3, r7, #20
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f850 	bl	80087b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008712:	f000 f8d5 	bl	80088c0 <prvAddNewTaskToReadyList>
 8008716:	e001      	b.n	800871c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800871c:	697b      	ldr	r3, [r7, #20]
	}
 800871e:	4618      	mov	r0, r3
 8008720:	3728      	adds	r7, #40	; 0x28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008726:	b580      	push	{r7, lr}
 8008728:	b08c      	sub	sp, #48	; 0x30
 800872a:	af04      	add	r7, sp, #16
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	603b      	str	r3, [r7, #0]
 8008732:	4613      	mov	r3, r2
 8008734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4618      	mov	r0, r3
 800873c:	f001 fcc4 	bl	800a0c8 <pvPortMalloc>
 8008740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008748:	2054      	movs	r0, #84	; 0x54
 800874a:	f001 fcbd 	bl	800a0c8 <pvPortMalloc>
 800874e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	631a      	str	r2, [r3, #48]	; 0x30
 800875c:	e005      	b.n	800876a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800875e:	6978      	ldr	r0, [r7, #20]
 8008760:	f001 fd7e 	bl	800a260 <vPortFree>
 8008764:	e001      	b.n	800876a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008778:	88fa      	ldrh	r2, [r7, #6]
 800877a:	2300      	movs	r3, #0
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	9302      	str	r3, [sp, #8]
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f80e 	bl	80087b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008794:	69f8      	ldr	r0, [r7, #28]
 8008796:	f000 f893 	bl	80088c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800879a:	2301      	movs	r3, #1
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	e002      	b.n	80087a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087a0:	f04f 33ff 	mov.w	r3, #4294967295
 80087a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087a6:	69bb      	ldr	r3, [r7, #24]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087c8:	3b01      	subs	r3, #1
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	617b      	str	r3, [r7, #20]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01f      	beq.n	800883e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e012      	b.n	800882a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	7819      	ldrb	r1, [r3, #0]
 800880c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	3334      	adds	r3, #52	; 0x34
 8008814:	460a      	mov	r2, r1
 8008816:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	3301      	adds	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2b0f      	cmp	r3, #15
 800882e:	d9e9      	bls.n	8008804 <prvInitialiseNewTask+0x54>
 8008830:	e000      	b.n	8008834 <prvInitialiseNewTask+0x84>
			{
				break;
 8008832:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800883c:	e003      	b.n	8008846 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	2b06      	cmp	r3, #6
 800884a:	d901      	bls.n	8008850 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800884c:	2306      	movs	r3, #6
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008854:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800885a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	2200      	movs	r2, #0
 8008860:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	3304      	adds	r3, #4
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff f8ca 	bl	8007a00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	3318      	adds	r3, #24
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff f8c5 	bl	8007a00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800887a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	f1c3 0207 	rsb	r2, r3, #7
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	69b8      	ldr	r0, [r7, #24]
 80088a0:	f001 f9c2 	bl	8009c28 <pxPortInitialiseStack>
 80088a4:	4602      	mov	r2, r0
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b6:	bf00      	nop
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088c8:	f001 fadc 	bl	8009e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088cc:	4b2a      	ldr	r3, [pc, #168]	; (8008978 <prvAddNewTaskToReadyList+0xb8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	4a29      	ldr	r2, [pc, #164]	; (8008978 <prvAddNewTaskToReadyList+0xb8>)
 80088d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088d6:	4b29      	ldr	r3, [pc, #164]	; (800897c <prvAddNewTaskToReadyList+0xbc>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088de:	4a27      	ldr	r2, [pc, #156]	; (800897c <prvAddNewTaskToReadyList+0xbc>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <prvAddNewTaskToReadyList+0xb8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d110      	bne.n	800890e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088ec:	f000 fc08 	bl	8009100 <prvInitialiseTaskLists>
 80088f0:	e00d      	b.n	800890e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088f2:	4b23      	ldr	r3, [pc, #140]	; (8008980 <prvAddNewTaskToReadyList+0xc0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088fa:	4b20      	ldr	r3, [pc, #128]	; (800897c <prvAddNewTaskToReadyList+0xbc>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	429a      	cmp	r2, r3
 8008906:	d802      	bhi.n	800890e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008908:	4a1c      	ldr	r2, [pc, #112]	; (800897c <prvAddNewTaskToReadyList+0xbc>)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <prvAddNewTaskToReadyList+0xc4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <prvAddNewTaskToReadyList+0xc4>)
 8008916:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	409a      	lsls	r2, r3
 8008920:	4b19      	ldr	r3, [pc, #100]	; (8008988 <prvAddNewTaskToReadyList+0xc8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4313      	orrs	r3, r2
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <prvAddNewTaskToReadyList+0xc8>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a15      	ldr	r2, [pc, #84]	; (800898c <prvAddNewTaskToReadyList+0xcc>)
 8008938:	441a      	add	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3304      	adds	r3, #4
 800893e:	4619      	mov	r1, r3
 8008940:	4610      	mov	r0, r2
 8008942:	f7ff f86a 	bl	8007a1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008946:	f001 facd 	bl	8009ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800894a:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <prvAddNewTaskToReadyList+0xc0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00e      	beq.n	8008970 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008952:	4b0a      	ldr	r3, [pc, #40]	; (800897c <prvAddNewTaskToReadyList+0xbc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d207      	bcs.n	8008970 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <prvAddNewTaskToReadyList+0xd0>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20001318 	.word	0x20001318
 800897c:	20001218 	.word	0x20001218
 8008980:	20001324 	.word	0x20001324
 8008984:	20001334 	.word	0x20001334
 8008988:	20001320 	.word	0x20001320
 800898c:	2000121c 	.word	0x2000121c
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d017      	beq.n	80089d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <vTaskDelay+0x60>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <vTaskDelay+0x30>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60bb      	str	r3, [r7, #8]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089c4:	f000 f880 	bl	8008ac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fcfa 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089d0:	f000 f888 	bl	8008ae4 <xTaskResumeAll>
 80089d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d107      	bne.n	80089ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <vTaskDelay+0x64>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089ec:	bf00      	nop
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20001340 	.word	0x20001340
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	1d39      	adds	r1, r7, #4
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 fdbc 	bl	8001590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	9202      	str	r2, [sp, #8]
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	2300      	movs	r3, #0
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	460a      	mov	r2, r1
 8008a2a:	4921      	ldr	r1, [pc, #132]	; (8008ab0 <vTaskStartScheduler+0xb4>)
 8008a2c:	4821      	ldr	r0, [pc, #132]	; (8008ab4 <vTaskStartScheduler+0xb8>)
 8008a2e:	f7ff fe1d 	bl	800866c <xTaskCreateStatic>
 8008a32:	4603      	mov	r3, r0
 8008a34:	4a20      	ldr	r2, [pc, #128]	; (8008ab8 <vTaskStartScheduler+0xbc>)
 8008a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a38:	4b1f      	ldr	r3, [pc, #124]	; (8008ab8 <vTaskStartScheduler+0xbc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e001      	b.n	8008a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a50:	f000 fd1e 	bl	8009490 <xTimerCreateTimerTask>
 8008a54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d116      	bne.n	8008a8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	613b      	str	r3, [r7, #16]
}
 8008a6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a70:	4b12      	ldr	r3, [pc, #72]	; (8008abc <vTaskStartScheduler+0xc0>)
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <vTaskStartScheduler+0xc4>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a7e:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <vTaskStartScheduler+0xc8>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a84:	f001 f95c 	bl	8009d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a88:	e00e      	b.n	8008aa8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d10a      	bne.n	8008aa8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vTaskStartScheduler+0xaa>
}
 8008aa8:	bf00      	nop
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	0800d5fc 	.word	0x0800d5fc
 8008ab4:	080090d1 	.word	0x080090d1
 8008ab8:	2000133c 	.word	0x2000133c
 8008abc:	20001338 	.word	0x20001338
 8008ac0:	20001324 	.word	0x20001324
 8008ac4:	2000131c 	.word	0x2000131c

08008ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <vTaskSuspendAll+0x18>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	4a03      	ldr	r2, [pc, #12]	; (8008ae0 <vTaskSuspendAll+0x18>)
 8008ad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20001340 	.word	0x20001340

08008ae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008af2:	4b41      	ldr	r3, [pc, #260]	; (8008bf8 <xTaskResumeAll+0x114>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <xTaskResumeAll+0x2c>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	603b      	str	r3, [r7, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b10:	f001 f9b8 	bl	8009e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b14:	4b38      	ldr	r3, [pc, #224]	; (8008bf8 <xTaskResumeAll+0x114>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	4a37      	ldr	r2, [pc, #220]	; (8008bf8 <xTaskResumeAll+0x114>)
 8008b1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b1e:	4b36      	ldr	r3, [pc, #216]	; (8008bf8 <xTaskResumeAll+0x114>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d161      	bne.n	8008bea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b26:	4b35      	ldr	r3, [pc, #212]	; (8008bfc <xTaskResumeAll+0x118>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d05d      	beq.n	8008bea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b2e:	e02e      	b.n	8008b8e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <xTaskResumeAll+0x11c>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3318      	adds	r3, #24
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe ffc9 	bl	8007ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe ffc4 	bl	8007ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	2201      	movs	r2, #1
 8008b52:	409a      	lsls	r2, r3
 8008b54:	4b2b      	ldr	r3, [pc, #172]	; (8008c04 <xTaskResumeAll+0x120>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <xTaskResumeAll+0x120>)
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4a27      	ldr	r2, [pc, #156]	; (8008c08 <xTaskResumeAll+0x124>)
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe ff50 	bl	8007a1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4b23      	ldr	r3, [pc, #140]	; (8008c0c <xTaskResumeAll+0x128>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b88:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <xTaskResumeAll+0x12c>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b8e:	4b1c      	ldr	r3, [pc, #112]	; (8008c00 <xTaskResumeAll+0x11c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1cc      	bne.n	8008b30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b9c:	f000 fb4e 	bl	800923c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ba0:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <xTaskResumeAll+0x130>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d010      	beq.n	8008bce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bac:	f000 f846 	bl	8008c3c <xTaskIncrementTick>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bb6:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <xTaskResumeAll+0x12c>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1f1      	bne.n	8008bac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008bc8:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <xTaskResumeAll+0x130>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bce:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <xTaskResumeAll+0x12c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bda:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <xTaskResumeAll+0x134>)
 8008bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bea:	f001 f97b 	bl	8009ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8008bee:	68bb      	ldr	r3, [r7, #8]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20001340 	.word	0x20001340
 8008bfc:	20001318 	.word	0x20001318
 8008c00:	200012d8 	.word	0x200012d8
 8008c04:	20001320 	.word	0x20001320
 8008c08:	2000121c 	.word	0x2000121c
 8008c0c:	20001218 	.word	0x20001218
 8008c10:	2000132c 	.word	0x2000132c
 8008c14:	20001328 	.word	0x20001328
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <xTaskGetTickCount+0x1c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c28:	687b      	ldr	r3, [r7, #4]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	2000131c 	.word	0x2000131c

08008c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c46:	4b4e      	ldr	r3, [pc, #312]	; (8008d80 <xTaskIncrementTick+0x144>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f040 808e 	bne.w	8008d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c50:	4b4c      	ldr	r3, [pc, #304]	; (8008d84 <xTaskIncrementTick+0x148>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c58:	4a4a      	ldr	r2, [pc, #296]	; (8008d84 <xTaskIncrementTick+0x148>)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d120      	bne.n	8008ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c64:	4b48      	ldr	r3, [pc, #288]	; (8008d88 <xTaskIncrementTick+0x14c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	603b      	str	r3, [r7, #0]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <xTaskIncrementTick+0x46>
 8008c84:	4b40      	ldr	r3, [pc, #256]	; (8008d88 <xTaskIncrementTick+0x14c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	4b40      	ldr	r3, [pc, #256]	; (8008d8c <xTaskIncrementTick+0x150>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a3e      	ldr	r2, [pc, #248]	; (8008d88 <xTaskIncrementTick+0x14c>)
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4a3e      	ldr	r2, [pc, #248]	; (8008d8c <xTaskIncrementTick+0x150>)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	4b3d      	ldr	r3, [pc, #244]	; (8008d90 <xTaskIncrementTick+0x154>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	4a3c      	ldr	r2, [pc, #240]	; (8008d90 <xTaskIncrementTick+0x154>)
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	f000 facb 	bl	800923c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ca6:	4b3b      	ldr	r3, [pc, #236]	; (8008d94 <xTaskIncrementTick+0x158>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d348      	bcc.n	8008d42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb0:	4b35      	ldr	r3, [pc, #212]	; (8008d88 <xTaskIncrementTick+0x14c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cba:	4b36      	ldr	r3, [pc, #216]	; (8008d94 <xTaskIncrementTick+0x158>)
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc0:	601a      	str	r2, [r3, #0]
					break;
 8008cc2:	e03e      	b.n	8008d42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc4:	4b30      	ldr	r3, [pc, #192]	; (8008d88 <xTaskIncrementTick+0x14c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d203      	bcs.n	8008ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cdc:	4a2d      	ldr	r2, [pc, #180]	; (8008d94 <xTaskIncrementTick+0x158>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ce2:	e02e      	b.n	8008d42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fef3 	bl	8007ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3318      	adds	r3, #24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe feea 	bl	8007ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	4b23      	ldr	r3, [pc, #140]	; (8008d98 <xTaskIncrementTick+0x15c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	4a22      	ldr	r2, [pc, #136]	; (8008d98 <xTaskIncrementTick+0x15c>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <xTaskIncrementTick+0x160>)
 8008d20:	441a      	add	r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fe fe76 	bl	8007a1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <xTaskIncrementTick+0x164>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d3b9      	bcc.n	8008cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d40:	e7b6      	b.n	8008cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <xTaskIncrementTick+0x164>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4914      	ldr	r1, [pc, #80]	; (8008d9c <xTaskIncrementTick+0x160>)
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d901      	bls.n	8008d5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <xTaskIncrementTick+0x168>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d007      	beq.n	8008d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	e004      	b.n	8008d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d6c:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <xTaskIncrementTick+0x16c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	4a0d      	ldr	r2, [pc, #52]	; (8008da8 <xTaskIncrementTick+0x16c>)
 8008d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d76:	697b      	ldr	r3, [r7, #20]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20001340 	.word	0x20001340
 8008d84:	2000131c 	.word	0x2000131c
 8008d88:	200012d0 	.word	0x200012d0
 8008d8c:	200012d4 	.word	0x200012d4
 8008d90:	20001330 	.word	0x20001330
 8008d94:	20001338 	.word	0x20001338
 8008d98:	20001320 	.word	0x20001320
 8008d9c:	2000121c 	.word	0x2000121c
 8008da0:	20001218 	.word	0x20001218
 8008da4:	2000132c 	.word	0x2000132c
 8008da8:	20001328 	.word	0x20001328

08008dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008db2:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <vTaskSwitchContext+0xa4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dba:	4b26      	ldr	r3, [pc, #152]	; (8008e54 <vTaskSwitchContext+0xa8>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dc0:	e03f      	b.n	8008e42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <vTaskSwitchContext+0xa8>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc8:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <vTaskSwitchContext+0xac>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	fab3 f383 	clz	r3, r3
 8008dd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	f1c3 031f 	rsb	r3, r3, #31
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	491f      	ldr	r1, [pc, #124]	; (8008e5c <vTaskSwitchContext+0xb0>)
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	607b      	str	r3, [r7, #4]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <vTaskSwitchContext+0x5a>
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a12      	ldr	r2, [pc, #72]	; (8008e5c <vTaskSwitchContext+0xb0>)
 8008e14:	4413      	add	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d104      	bne.n	8008e38 <vTaskSwitchContext+0x8c>
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	605a      	str	r2, [r3, #4]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <vTaskSwitchContext+0xb4>)
 8008e40:	6013      	str	r3, [r2, #0]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20001340 	.word	0x20001340
 8008e54:	2000132c 	.word	0x2000132c
 8008e58:	20001320 	.word	0x20001320
 8008e5c:	2000121c 	.word	0x2000121c
 8008e60:	20001218 	.word	0x20001218

08008e64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60fb      	str	r3, [r7, #12]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <vTaskPlaceOnEventList+0x44>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3318      	adds	r3, #24
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7fe fde5 	bl	8007a62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e98:	2101      	movs	r1, #1
 8008e9a:	6838      	ldr	r0, [r7, #0]
 8008e9c:	f000 fa92 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20001218 	.word	0x20001218

08008eac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10a      	bne.n	8008ed4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	617b      	str	r3, [r7, #20]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3318      	adds	r3, #24
 8008eda:	4619      	mov	r1, r3
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7fe fd9c 	bl	8007a1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	68b8      	ldr	r0, [r7, #8]
 8008ef2:	f000 fa67 	bl	80093c4 <prvAddCurrentTaskToDelayedList>
	}
 8008ef6:	bf00      	nop
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20001218 	.word	0x20001218

08008f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60fb      	str	r3, [r7, #12]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3318      	adds	r3, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fdcd 	bl	8007ad4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <xTaskRemoveFromEventList+0xac>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11c      	bne.n	8008f7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fdc4 	bl	8007ad4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	2201      	movs	r2, #1
 8008f52:	409a      	lsls	r2, r3
 8008f54:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <xTaskRemoveFromEventList+0xb0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <xTaskRemoveFromEventList+0xb0>)
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <xTaskRemoveFromEventList+0xb4>)
 8008f6c:	441a      	add	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe fd50 	bl	8007a1a <vListInsertEnd>
 8008f7a:	e005      	b.n	8008f88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4619      	mov	r1, r3
 8008f82:	480e      	ldr	r0, [pc, #56]	; (8008fbc <xTaskRemoveFromEventList+0xb8>)
 8008f84:	f7fe fd49 	bl	8007a1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <xTaskRemoveFromEventList+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d905      	bls.n	8008fa2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <xTaskRemoveFromEventList+0xc0>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e001      	b.n	8008fa6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20001340 	.word	0x20001340
 8008fb4:	20001320 	.word	0x20001320
 8008fb8:	2000121c 	.word	0x2000121c
 8008fbc:	200012d8 	.word	0x200012d8
 8008fc0:	20001218 	.word	0x20001218
 8008fc4:	2000132c 	.word	0x2000132c

08008fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <vTaskInternalSetTimeOutState+0x24>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <vTaskInternalSetTimeOutState+0x28>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	20001330 	.word	0x20001330
 8008ff0:	2000131c 	.word	0x2000131c

08008ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	613b      	str	r3, [r7, #16]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009036:	f000 ff25 	bl	8009e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800903a:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <xTaskCheckForTimeOut+0xbc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d102      	bne.n	800905a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	e023      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <xTaskCheckForTimeOut+0xc0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d007      	beq.n	8009076 <xTaskCheckForTimeOut+0x82>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	429a      	cmp	r2, r3
 800906e:	d302      	bcc.n	8009076 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009070:	2301      	movs	r3, #1
 8009072:	61fb      	str	r3, [r7, #28]
 8009074:	e015      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	429a      	cmp	r2, r3
 800907e:	d20b      	bcs.n	8009098 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	1ad2      	subs	r2, r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ff9b 	bl	8008fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e004      	b.n	80090a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090a2:	f000 ff1f 	bl	8009ee4 <vPortExitCritical>

	return xReturn;
 80090a6:	69fb      	ldr	r3, [r7, #28]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	2000131c 	.word	0x2000131c
 80090b4:	20001330 	.word	0x20001330

080090b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090bc:	4b03      	ldr	r3, [pc, #12]	; (80090cc <vTaskMissedYield+0x14>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
}
 80090c2:	bf00      	nop
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	2000132c 	.word	0x2000132c

080090d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090d8:	f000 f852 	bl	8009180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <prvIdleTask+0x28>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d9f9      	bls.n	80090d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <prvIdleTask+0x2c>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090f4:	e7f0      	b.n	80090d8 <prvIdleTask+0x8>
 80090f6:	bf00      	nop
 80090f8:	2000121c 	.word	0x2000121c
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009106:	2300      	movs	r3, #0
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	e00c      	b.n	8009126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4a12      	ldr	r2, [pc, #72]	; (8009160 <prvInitialiseTaskLists+0x60>)
 8009118:	4413      	add	r3, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fc50 	bl	80079c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3301      	adds	r3, #1
 8009124:	607b      	str	r3, [r7, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b06      	cmp	r3, #6
 800912a:	d9ef      	bls.n	800910c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800912c:	480d      	ldr	r0, [pc, #52]	; (8009164 <prvInitialiseTaskLists+0x64>)
 800912e:	f7fe fc47 	bl	80079c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009132:	480d      	ldr	r0, [pc, #52]	; (8009168 <prvInitialiseTaskLists+0x68>)
 8009134:	f7fe fc44 	bl	80079c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009138:	480c      	ldr	r0, [pc, #48]	; (800916c <prvInitialiseTaskLists+0x6c>)
 800913a:	f7fe fc41 	bl	80079c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800913e:	480c      	ldr	r0, [pc, #48]	; (8009170 <prvInitialiseTaskLists+0x70>)
 8009140:	f7fe fc3e 	bl	80079c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009144:	480b      	ldr	r0, [pc, #44]	; (8009174 <prvInitialiseTaskLists+0x74>)
 8009146:	f7fe fc3b 	bl	80079c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <prvInitialiseTaskLists+0x78>)
 800914c:	4a05      	ldr	r2, [pc, #20]	; (8009164 <prvInitialiseTaskLists+0x64>)
 800914e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <prvInitialiseTaskLists+0x7c>)
 8009152:	4a05      	ldr	r2, [pc, #20]	; (8009168 <prvInitialiseTaskLists+0x68>)
 8009154:	601a      	str	r2, [r3, #0]
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	2000121c 	.word	0x2000121c
 8009164:	200012a8 	.word	0x200012a8
 8009168:	200012bc 	.word	0x200012bc
 800916c:	200012d8 	.word	0x200012d8
 8009170:	200012ec 	.word	0x200012ec
 8009174:	20001304 	.word	0x20001304
 8009178:	200012d0 	.word	0x200012d0
 800917c:	200012d4 	.word	0x200012d4

08009180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009186:	e019      	b.n	80091bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009188:	f000 fe7c 	bl	8009e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918c:	4b10      	ldr	r3, [pc, #64]	; (80091d0 <prvCheckTasksWaitingTermination+0x50>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe fc9b 	bl	8007ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <prvCheckTasksWaitingTermination+0x54>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	4a0b      	ldr	r2, [pc, #44]	; (80091d4 <prvCheckTasksWaitingTermination+0x54>)
 80091a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091a8:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091b2:	f000 fe97 	bl	8009ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f810 	bl	80091dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <prvCheckTasksWaitingTermination+0x58>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e1      	bne.n	8009188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	200012ec 	.word	0x200012ec
 80091d4:	20001318 	.word	0x20001318
 80091d8:	20001300 	.word	0x20001300

080091dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d108      	bne.n	8009200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f834 	bl	800a260 <vPortFree>
				vPortFree( pxTCB );
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f831 	bl	800a260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091fe:	e018      	b.n	8009232 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009206:	2b01      	cmp	r3, #1
 8009208:	d103      	bne.n	8009212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 f828 	bl	800a260 <vPortFree>
	}
 8009210:	e00f      	b.n	8009232 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009218:	2b02      	cmp	r3, #2
 800921a:	d00a      	beq.n	8009232 <prvDeleteTCB+0x56>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	60fb      	str	r3, [r7, #12]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <prvDeleteTCB+0x54>
	}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <prvResetNextTaskUnblockTime+0x38>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800924c:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <prvResetNextTaskUnblockTime+0x3c>)
 800924e:	f04f 32ff 	mov.w	r2, #4294967295
 8009252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009254:	e008      	b.n	8009268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <prvResetNextTaskUnblockTime+0x38>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <prvResetNextTaskUnblockTime+0x3c>)
 8009266:	6013      	str	r3, [r2, #0]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	200012d0 	.word	0x200012d0
 8009278:	20001338 	.word	0x20001338

0800927c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009282:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <xTaskGetSchedulerState+0x34>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800928a:	2301      	movs	r3, #1
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	e008      	b.n	80092a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009290:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <xTaskGetSchedulerState+0x38>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009298:	2302      	movs	r3, #2
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	e001      	b.n	80092a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800929e:	2300      	movs	r3, #0
 80092a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092a2:	687b      	ldr	r3, [r7, #4]
	}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20001324 	.word	0x20001324
 80092b4:	20001340 	.word	0x20001340

080092b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d06e      	beq.n	80093ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092ce:	4b3a      	ldr	r3, [pc, #232]	; (80093b8 <xTaskPriorityDisinherit+0x100>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d00a      	beq.n	80092ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	f383 8811 	msr	BASEPRI, r3
 80092e0:	f3bf 8f6f 	isb	sy
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	60fb      	str	r3, [r7, #12]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60bb      	str	r3, [r7, #8]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931e:	429a      	cmp	r2, r3
 8009320:	d044      	beq.n	80093ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009326:	2b00      	cmp	r3, #0
 8009328:	d140      	bne.n	80093ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3304      	adds	r3, #4
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fbd0 	bl	8007ad4 <uxListRemove>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d115      	bne.n	8009366 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	491f      	ldr	r1, [pc, #124]	; (80093bc <xTaskPriorityDisinherit+0x104>)
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <xTaskPriorityDisinherit+0xae>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	2201      	movs	r2, #1
 8009356:	fa02 f303 	lsl.w	r3, r2, r3
 800935a:	43da      	mvns	r2, r3
 800935c:	4b18      	ldr	r3, [pc, #96]	; (80093c0 <xTaskPriorityDisinherit+0x108>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4013      	ands	r3, r2
 8009362:	4a17      	ldr	r2, [pc, #92]	; (80093c0 <xTaskPriorityDisinherit+0x108>)
 8009364:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009372:	f1c3 0207 	rsb	r2, r3, #7
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	2201      	movs	r2, #1
 8009380:	409a      	lsls	r2, r3
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <xTaskPriorityDisinherit+0x108>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4313      	orrs	r3, r2
 8009388:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <xTaskPriorityDisinherit+0x108>)
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <xTaskPriorityDisinherit+0x104>)
 800939a:	441a      	add	r2, r3
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3304      	adds	r3, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f7fe fb39 	bl	8007a1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093ac:	697b      	ldr	r3, [r7, #20]
	}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20001218 	.word	0x20001218
 80093bc:	2000121c 	.word	0x2000121c
 80093c0:	20001320 	.word	0x20001320

080093c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093ce:	4b29      	ldr	r3, [pc, #164]	; (8009474 <prvAddCurrentTaskToDelayedList+0xb0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093d4:	4b28      	ldr	r3, [pc, #160]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fb7a 	bl	8007ad4 <uxListRemove>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10b      	bne.n	80093fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093e6:	4b24      	ldr	r3, [pc, #144]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	2201      	movs	r2, #1
 80093ee:	fa02 f303 	lsl.w	r3, r2, r3
 80093f2:	43da      	mvns	r2, r3
 80093f4:	4b21      	ldr	r3, [pc, #132]	; (800947c <prvAddCurrentTaskToDelayedList+0xb8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	4a20      	ldr	r2, [pc, #128]	; (800947c <prvAddCurrentTaskToDelayedList+0xb8>)
 80093fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d10a      	bne.n	800941c <prvAddCurrentTaskToDelayedList+0x58>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	481a      	ldr	r0, [pc, #104]	; (8009480 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009416:	f7fe fb00 	bl	8007a1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800941a:	e026      	b.n	800946a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009424:	4b14      	ldr	r3, [pc, #80]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	429a      	cmp	r2, r3
 8009432:	d209      	bcs.n	8009448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009434:	4b13      	ldr	r3, [pc, #76]	; (8009484 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3304      	adds	r3, #4
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f7fe fb0e 	bl	8007a62 <vListInsert>
}
 8009446:	e010      	b.n	800946a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009448:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <prvAddCurrentTaskToDelayedList+0xc4>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3304      	adds	r3, #4
 8009452:	4619      	mov	r1, r3
 8009454:	4610      	mov	r0, r2
 8009456:	f7fe fb04 	bl	8007a62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800945a:	4b0c      	ldr	r3, [pc, #48]	; (800948c <prvAddCurrentTaskToDelayedList+0xc8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	429a      	cmp	r2, r3
 8009462:	d202      	bcs.n	800946a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009464:	4a09      	ldr	r2, [pc, #36]	; (800948c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6013      	str	r3, [r2, #0]
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	2000131c 	.word	0x2000131c
 8009478:	20001218 	.word	0x20001218
 800947c:	20001320 	.word	0x20001320
 8009480:	20001304 	.word	0x20001304
 8009484:	200012d4 	.word	0x200012d4
 8009488:	200012d0 	.word	0x200012d0
 800948c:	20001338 	.word	0x20001338

08009490 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800949a:	f000 fb85 	bl	8009ba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800949e:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <xTimerCreateTimerTask+0x80>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d021      	beq.n	80094ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094ae:	1d3a      	adds	r2, r7, #4
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7f8 f883 	bl	80015c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	9202      	str	r2, [sp, #8]
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	2302      	movs	r3, #2
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	2300      	movs	r3, #0
 80094ce:	460a      	mov	r2, r1
 80094d0:	4910      	ldr	r1, [pc, #64]	; (8009514 <xTimerCreateTimerTask+0x84>)
 80094d2:	4811      	ldr	r0, [pc, #68]	; (8009518 <xTimerCreateTimerTask+0x88>)
 80094d4:	f7ff f8ca 	bl	800866c <xTaskCreateStatic>
 80094d8:	4603      	mov	r3, r0
 80094da:	4a10      	ldr	r2, [pc, #64]	; (800951c <xTimerCreateTimerTask+0x8c>)
 80094dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <xTimerCreateTimerTask+0x8c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094e6:	2301      	movs	r3, #1
 80094e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	613b      	str	r3, [r7, #16]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20001374 	.word	0x20001374
 8009514:	0800d604 	.word	0x0800d604
 8009518:	08009789 	.word	0x08009789
 800951c:	20001378 	.word	0x20001378

08009520 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800952e:	2028      	movs	r0, #40	; 0x28
 8009530:	f000 fdca 	bl	800a0c8 <pvPortMalloc>
 8009534:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00d      	beq.n	8009558 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f843 	bl	80095de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009558:	697b      	ldr	r3, [r7, #20]
	}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009562:	b580      	push	{r7, lr}
 8009564:	b08a      	sub	sp, #40	; 0x28
 8009566:	af02      	add	r7, sp, #8
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009570:	2328      	movs	r3, #40	; 0x28
 8009572:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b28      	cmp	r3, #40	; 0x28
 8009578:	d00a      	beq.n	8009590 <xTimerCreateStatic+0x2e>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	61bb      	str	r3, [r7, #24]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009590:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <xTimerCreateStatic+0x4c>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	617b      	str	r3, [r7, #20]
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00d      	beq.n	80095d4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 f805 	bl	80095de <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80095d4:	69fb      	ldr	r3, [r7, #28]
	}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01e      	beq.n	800964c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800960e:	f000 facb 	bl	8009ba8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	3304      	adds	r3, #4
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe f9e6 	bl	8007a00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009640:	f043 0304 	orr.w	r3, r3, #4
 8009644:	b2da      	uxtb	r2, r3
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800964c:	bf00      	nop
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08a      	sub	sp, #40	; 0x28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009662:	2300      	movs	r3, #0
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xTimerGenericCommand+0x2e>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009682:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <xTimerGenericCommand+0x98>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d02a      	beq.n	80096e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b05      	cmp	r3, #5
 800969a:	dc18      	bgt.n	80096ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800969c:	f7ff fdee 	bl	800927c <xTaskGetSchedulerState>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d109      	bne.n	80096ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096a6:	4b11      	ldr	r3, [pc, #68]	; (80096ec <xTimerGenericCommand+0x98>)
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f107 0114 	add.w	r1, r7, #20
 80096ae:	2300      	movs	r3, #0
 80096b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b2:	f7fe fb73 	bl	8007d9c <xQueueGenericSend>
 80096b6:	6278      	str	r0, [r7, #36]	; 0x24
 80096b8:	e012      	b.n	80096e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <xTimerGenericCommand+0x98>)
 80096bc:	6818      	ldr	r0, [r3, #0]
 80096be:	f107 0114 	add.w	r1, r7, #20
 80096c2:	2300      	movs	r3, #0
 80096c4:	2200      	movs	r2, #0
 80096c6:	f7fe fb69 	bl	8007d9c <xQueueGenericSend>
 80096ca:	6278      	str	r0, [r7, #36]	; 0x24
 80096cc:	e008      	b.n	80096e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <xTimerGenericCommand+0x98>)
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	f107 0114 	add.w	r1, r7, #20
 80096d6:	2300      	movs	r3, #0
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	f7fe fc5d 	bl	8007f98 <xQueueGenericSendFromISR>
 80096de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3728      	adds	r7, #40	; 0x28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20001374 	.word	0x20001374

080096f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fa:	4b22      	ldr	r3, [pc, #136]	; (8009784 <prvProcessExpiredTimer+0x94>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe f9e3 	bl	8007ad4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d022      	beq.n	8009762 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	18d1      	adds	r1, r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	6978      	ldr	r0, [r7, #20]
 800972a:	f000 f8d1 	bl	80098d0 <prvInsertTimerInActiveList>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01f      	beq.n	8009774 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009734:	2300      	movs	r3, #0
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	2300      	movs	r3, #0
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7ff ff88 	bl	8009654 <xTimerGenericCommand>
 8009744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d113      	bne.n	8009774 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60fb      	str	r3, [r7, #12]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009768:	f023 0301 	bic.w	r3, r3, #1
 800976c:	b2da      	uxtb	r2, r3
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	6978      	ldr	r0, [r7, #20]
 800977a:	4798      	blx	r3
}
 800977c:	bf00      	nop
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	2000136c 	.word	0x2000136c

08009788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009790:	f107 0308 	add.w	r3, r7, #8
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f857 	bl	8009848 <prvGetNextExpireTime>
 800979a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f803 	bl	80097ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097a6:	f000 f8d5 	bl	8009954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097aa:	e7f1      	b.n	8009790 <prvTimerTask+0x8>

080097ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097b6:	f7ff f987 	bl	8008ac8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f866 	bl	8009890 <prvSampleTimeNow>
 80097c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d130      	bne.n	800982e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <prvProcessTimerOrBlockTask+0x3c>
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d806      	bhi.n	80097e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097da:	f7ff f983 	bl	8008ae4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff85 	bl	80096f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097e6:	e024      	b.n	8009832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <prvProcessTimerOrBlockTask+0x90>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <prvProcessTimerOrBlockTask+0x50>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <prvProcessTimerOrBlockTask+0x52>
 80097fc:	2300      	movs	r3, #0
 80097fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <prvProcessTimerOrBlockTask+0x94>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4619      	mov	r1, r3
 800980e:	f7fe fef9 	bl	8008604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009812:	f7ff f967 	bl	8008ae4 <xTaskResumeAll>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800981c:	4b09      	ldr	r3, [pc, #36]	; (8009844 <prvProcessTimerOrBlockTask+0x98>)
 800981e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	f3bf 8f6f 	isb	sy
}
 800982c:	e001      	b.n	8009832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800982e:	f7ff f959 	bl	8008ae4 <xTaskResumeAll>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20001370 	.word	0x20001370
 8009840:	20001374 	.word	0x20001374
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <prvGetNextExpireTime+0x44>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <prvGetNextExpireTime+0x16>
 800985a:	2201      	movs	r2, #1
 800985c:	e000      	b.n	8009860 <prvGetNextExpireTime+0x18>
 800985e:	2200      	movs	r2, #0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d105      	bne.n	8009878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <prvGetNextExpireTime+0x44>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e001      	b.n	800987c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	2000136c 	.word	0x2000136c

08009890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009898:	f7ff f9c0 	bl	8008c1c <xTaskGetTickCount>
 800989c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <prvSampleTimeNow+0x3c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d205      	bcs.n	80098b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098a8:	f000 f91a 	bl	8009ae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	e002      	b.n	80098ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098ba:	4a04      	ldr	r2, [pc, #16]	; (80098cc <prvSampleTimeNow+0x3c>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	2000137c 	.word	0x2000137c

080098d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d812      	bhi.n	800991c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	1ad2      	subs	r2, r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	429a      	cmp	r2, r3
 8009902:	d302      	bcc.n	800990a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	e01b      	b.n	8009942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800990a:	4b10      	ldr	r3, [pc, #64]	; (800994c <prvInsertTimerInActiveList+0x7c>)
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3304      	adds	r3, #4
 8009912:	4619      	mov	r1, r3
 8009914:	4610      	mov	r0, r2
 8009916:	f7fe f8a4 	bl	8007a62 <vListInsert>
 800991a:	e012      	b.n	8009942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	429a      	cmp	r2, r3
 8009922:	d206      	bcs.n	8009932 <prvInsertTimerInActiveList+0x62>
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d302      	bcc.n	8009932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e007      	b.n	8009942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <prvInsertTimerInActiveList+0x80>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3304      	adds	r3, #4
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7fe f890 	bl	8007a62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009942:	697b      	ldr	r3, [r7, #20]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20001370 	.word	0x20001370
 8009950:	2000136c 	.word	0x2000136c

08009954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08c      	sub	sp, #48	; 0x30
 8009958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800995a:	e0ae      	b.n	8009aba <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f2c0 80aa 	blt.w	8009ab8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d004      	beq.n	800997a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	3304      	adds	r3, #4
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe f8ad 	bl	8007ad4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800997a:	1d3b      	adds	r3, r7, #4
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff ff87 	bl	8009890 <prvSampleTimeNow>
 8009982:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b09      	cmp	r3, #9
 8009988:	f200 8097 	bhi.w	8009aba <prvProcessReceivedCommands+0x166>
 800998c:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <prvProcessReceivedCommands+0x40>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099bd 	.word	0x080099bd
 8009998:	080099bd 	.word	0x080099bd
 800999c:	080099bd 	.word	0x080099bd
 80099a0:	08009a31 	.word	0x08009a31
 80099a4:	08009a45 	.word	0x08009a45
 80099a8:	08009a8f 	.word	0x08009a8f
 80099ac:	080099bd 	.word	0x080099bd
 80099b0:	080099bd 	.word	0x080099bd
 80099b4:	08009a31 	.word	0x08009a31
 80099b8:	08009a45 	.word	0x08009a45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	18d1      	adds	r1, r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6a3a      	ldr	r2, [r7, #32]
 80099da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099dc:	f7ff ff78 	bl	80098d0 <prvInsertTimerInActiveList>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d069      	beq.n	8009aba <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05e      	beq.n	8009aba <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	441a      	add	r2, r3
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a0e:	f7ff fe21 	bl	8009654 <xTimerGenericCommand>
 8009a12:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d14f      	bne.n	8009aba <prvProcessReceivedCommands+0x166>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	61bb      	str	r3, [r7, #24]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009a42:	e03a      	b.n	8009aba <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	617b      	str	r3, [r7, #20]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	18d1      	adds	r1, r2, r3
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	6a3a      	ldr	r2, [r7, #32]
 8009a86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a88:	f7ff ff22 	bl	80098d0 <prvInsertTimerInActiveList>
					break;
 8009a8c:	e015      	b.n	8009aba <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a94:	f003 0302 	and.w	r3, r3, #2
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a9e:	f000 fbdf 	bl	800a260 <vPortFree>
 8009aa2:	e00a      	b.n	8009aba <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ab6:	e000      	b.n	8009aba <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009ab8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <prvProcessReceivedCommands+0x188>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f107 0108 	add.w	r1, r7, #8
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fb03 	bl	80080d0 <xQueueReceive>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f af45 	bne.w	800995c <prvProcessReceivedCommands+0x8>
	}
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	3728      	adds	r7, #40	; 0x28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20001374 	.word	0x20001374

08009ae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ae6:	e048      	b.n	8009b7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ae8:	4b2d      	ldr	r3, [pc, #180]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af2:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3304      	adds	r3, #4
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fd ffe7 	bl	8007ad4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d02e      	beq.n	8009b7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4413      	add	r3, r2
 8009b24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d90e      	bls.n	8009b4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b3a:	4b19      	ldr	r3, [pc, #100]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3304      	adds	r3, #4
 8009b42:	4619      	mov	r1, r3
 8009b44:	4610      	mov	r0, r2
 8009b46:	f7fd ff8c 	bl	8007a62 <vListInsert>
 8009b4a:	e016      	b.n	8009b7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	2100      	movs	r1, #0
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff fd7c 	bl	8009654 <xTimerGenericCommand>
 8009b5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	603b      	str	r3, [r7, #0]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1b1      	bne.n	8009ae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b84:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b8a:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <prvSwitchTimerLists+0xc4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a04      	ldr	r2, [pc, #16]	; (8009ba0 <prvSwitchTimerLists+0xc0>)
 8009b90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b92:	4a04      	ldr	r2, [pc, #16]	; (8009ba4 <prvSwitchTimerLists+0xc4>)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	6013      	str	r3, [r2, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	2000136c 	.word	0x2000136c
 8009ba4:	20001370 	.word	0x20001370

08009ba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bae:	f000 f969 	bl	8009e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bb2:	4b15      	ldr	r3, [pc, #84]	; (8009c08 <prvCheckForValidListAndQueue+0x60>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d120      	bne.n	8009bfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bba:	4814      	ldr	r0, [pc, #80]	; (8009c0c <prvCheckForValidListAndQueue+0x64>)
 8009bbc:	f7fd ff00 	bl	80079c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bc0:	4813      	ldr	r0, [pc, #76]	; (8009c10 <prvCheckForValidListAndQueue+0x68>)
 8009bc2:	f7fd fefd 	bl	80079c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <prvCheckForValidListAndQueue+0x6c>)
 8009bc8:	4a10      	ldr	r2, [pc, #64]	; (8009c0c <prvCheckForValidListAndQueue+0x64>)
 8009bca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <prvCheckForValidListAndQueue+0x70>)
 8009bce:	4a10      	ldr	r2, [pc, #64]	; (8009c10 <prvCheckForValidListAndQueue+0x68>)
 8009bd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <prvCheckForValidListAndQueue+0x74>)
 8009bd8:	4a11      	ldr	r2, [pc, #68]	; (8009c20 <prvCheckForValidListAndQueue+0x78>)
 8009bda:	210c      	movs	r1, #12
 8009bdc:	200a      	movs	r0, #10
 8009bde:	f7fe f80b 	bl	8007bf8 <xQueueGenericCreateStatic>
 8009be2:	4603      	mov	r3, r0
 8009be4:	4a08      	ldr	r2, [pc, #32]	; (8009c08 <prvCheckForValidListAndQueue+0x60>)
 8009be6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009be8:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <prvCheckForValidListAndQueue+0x60>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <prvCheckForValidListAndQueue+0x60>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	490b      	ldr	r1, [pc, #44]	; (8009c24 <prvCheckForValidListAndQueue+0x7c>)
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fcda 	bl	80085b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bfc:	f000 f972 	bl	8009ee4 <vPortExitCritical>
}
 8009c00:	bf00      	nop
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20001374 	.word	0x20001374
 8009c0c:	20001344 	.word	0x20001344
 8009c10:	20001358 	.word	0x20001358
 8009c14:	2000136c 	.word	0x2000136c
 8009c18:	20001370 	.word	0x20001370
 8009c1c:	200013f8 	.word	0x200013f8
 8009c20:	20001380 	.word	0x20001380
 8009c24:	0800d60c 	.word	0x0800d60c

08009c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3b04      	subs	r3, #4
 8009c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b04      	subs	r3, #4
 8009c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f023 0201 	bic.w	r2, r3, #1
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <pxPortInitialiseStack+0x64>)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3b14      	subs	r3, #20
 8009c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f06f 0202 	mvn.w	r2, #2
 8009c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	3b20      	subs	r3, #32
 8009c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	08009c91 	.word	0x08009c91

08009c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <prvTaskExitError+0x54>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d00a      	beq.n	8009cba <prvTaskExitError+0x2a>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	60fb      	str	r3, [r7, #12]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <prvTaskExitError+0x28>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	60bb      	str	r3, [r7, #8]
}
 8009ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cce:	bf00      	nop
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0fc      	beq.n	8009cd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	bf00      	nop
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	2000006c 	.word	0x2000006c
	...

08009cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <pxCurrentTCBConst2>)
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	f380 8809 	msr	PSP, r0
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8811 	msr	BASEPRI, r0
 8009d0a:	4770      	bx	lr
 8009d0c:	f3af 8000 	nop.w

08009d10 <pxCurrentTCBConst2>:
 8009d10:	20001218 	.word	0x20001218
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop

08009d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d18:	4808      	ldr	r0, [pc, #32]	; (8009d3c <prvPortStartFirstTask+0x24>)
 8009d1a:	6800      	ldr	r0, [r0, #0]
 8009d1c:	6800      	ldr	r0, [r0, #0]
 8009d1e:	f380 8808 	msr	MSP, r0
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8814 	msr	CONTROL, r0
 8009d2a:	b662      	cpsie	i
 8009d2c:	b661      	cpsie	f
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	df00      	svc	0
 8009d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d3a:	bf00      	nop
 8009d3c:	e000ed08 	.word	0xe000ed08

08009d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d46:	4b46      	ldr	r3, [pc, #280]	; (8009e60 <xPortStartScheduler+0x120>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a46      	ldr	r2, [pc, #280]	; (8009e64 <xPortStartScheduler+0x124>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10a      	bne.n	8009d66 <xPortStartScheduler+0x26>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	613b      	str	r3, [r7, #16]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d66:	4b3e      	ldr	r3, [pc, #248]	; (8009e60 <xPortStartScheduler+0x120>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3f      	ldr	r2, [pc, #252]	; (8009e68 <xPortStartScheduler+0x128>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d10a      	bne.n	8009d86 <xPortStartScheduler+0x46>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d86:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <xPortStartScheduler+0x12c>)
 8009d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	22ff      	movs	r2, #255	; 0xff
 8009d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b31      	ldr	r3, [pc, #196]	; (8009e70 <xPortStartScheduler+0x130>)
 8009dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dae:	4b31      	ldr	r3, [pc, #196]	; (8009e74 <xPortStartScheduler+0x134>)
 8009db0:	2207      	movs	r2, #7
 8009db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009db4:	e009      	b.n	8009dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009db6:	4b2f      	ldr	r3, [pc, #188]	; (8009e74 <xPortStartScheduler+0x134>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	4a2d      	ldr	r2, [pc, #180]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d0ef      	beq.n	8009db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dd6:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1c3 0307 	rsb	r3, r3, #7
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d00a      	beq.n	8009df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	60bb      	str	r3, [r7, #8]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009df8:	4b1e      	ldr	r3, [pc, #120]	; (8009e74 <xPortStartScheduler+0x134>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	021b      	lsls	r3, r3, #8
 8009dfe:	4a1d      	ldr	r2, [pc, #116]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e0a:	4a1a      	ldr	r2, [pc, #104]	; (8009e74 <xPortStartScheduler+0x134>)
 8009e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e16:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a14      	ldr	r2, [pc, #80]	; (8009e78 <xPortStartScheduler+0x138>)
 8009e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e2e:	f000 f8dd 	bl	8009fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <xPortStartScheduler+0x13c>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e38:	f000 f8fc 	bl	800a034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <xPortStartScheduler+0x140>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a0f      	ldr	r2, [pc, #60]	; (8009e80 <xPortStartScheduler+0x140>)
 8009e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e48:	f7ff ff66 	bl	8009d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e4c:	f7fe ffae 	bl	8008dac <vTaskSwitchContext>
	prvTaskExitError();
 8009e50:	f7ff ff1e 	bl	8009c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	e000ed00 	.word	0xe000ed00
 8009e64:	410fc271 	.word	0x410fc271
 8009e68:	410fc270 	.word	0x410fc270
 8009e6c:	e000e400 	.word	0xe000e400
 8009e70:	20001440 	.word	0x20001440
 8009e74:	20001444 	.word	0x20001444
 8009e78:	e000ed20 	.word	0xe000ed20
 8009e7c:	2000006c 	.word	0x2000006c
 8009e80:	e000ef34 	.word	0xe000ef34

08009e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	607b      	str	r3, [r7, #4]
}
 8009e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <vPortEnterCritical+0x58>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a0d      	ldr	r2, [pc, #52]	; (8009edc <vPortEnterCritical+0x58>)
 8009ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <vPortEnterCritical+0x58>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d10f      	bne.n	8009ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009eb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <vPortEnterCritical+0x5c>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	603b      	str	r3, [r7, #0]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <vPortEnterCritical+0x4a>
	}
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	2000006c 	.word	0x2000006c
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eea:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <vPortExitCritical+0x50>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <vPortExitCritical+0x24>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	607b      	str	r3, [r7, #4]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <vPortExitCritical+0x50>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	4a09      	ldr	r2, [pc, #36]	; (8009f34 <vPortExitCritical+0x50>)
 8009f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f12:	4b08      	ldr	r3, [pc, #32]	; (8009f34 <vPortExitCritical+0x50>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <vPortExitCritical+0x42>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f383 8811 	msr	BASEPRI, r3
}
 8009f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	2000006c 	.word	0x2000006c
	...

08009f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f40:	f3ef 8009 	mrs	r0, PSP
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <pxCurrentTCBConst>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	f01e 0f10 	tst.w	lr, #16
 8009f50:	bf08      	it	eq
 8009f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	6010      	str	r0, [r2, #0]
 8009f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f64:	f380 8811 	msr	BASEPRI, r0
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f7fe ff1c 	bl	8008dac <vTaskSwitchContext>
 8009f74:	f04f 0000 	mov.w	r0, #0
 8009f78:	f380 8811 	msr	BASEPRI, r0
 8009f7c:	bc09      	pop	{r0, r3}
 8009f7e:	6819      	ldr	r1, [r3, #0]
 8009f80:	6808      	ldr	r0, [r1, #0]
 8009f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f86:	f01e 0f10 	tst.w	lr, #16
 8009f8a:	bf08      	it	eq
 8009f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f90:	f380 8809 	msr	PSP, r0
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst>:
 8009fa0:	20001218 	.word	0x20001218
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop

08009fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fc2:	f7fe fe3b 	bl	8008c3c <xTaskIncrementTick>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <SysTick_Handler+0x40>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f383 8811 	msr	BASEPRI, r3
}
 8009fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fe0:	bf00      	nop
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <vPortSetupTimerInterrupt+0x34>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <vPortSetupTimerInterrupt+0x38>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <vPortSetupTimerInterrupt+0x3c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a0a      	ldr	r2, [pc, #40]	; (800a02c <vPortSetupTimerInterrupt+0x40>)
 800a002:	fba2 2303 	umull	r2, r3, r2, r3
 800a006:	099b      	lsrs	r3, r3, #6
 800a008:	4a09      	ldr	r2, [pc, #36]	; (800a030 <vPortSetupTimerInterrupt+0x44>)
 800a00a:	3b01      	subs	r3, #1
 800a00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a00e:	4b04      	ldr	r3, [pc, #16]	; (800a020 <vPortSetupTimerInterrupt+0x34>)
 800a010:	2207      	movs	r2, #7
 800a012:	601a      	str	r2, [r3, #0]
}
 800a014:	bf00      	nop
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	e000e010 	.word	0xe000e010
 800a024:	e000e018 	.word	0xe000e018
 800a028:	20000000 	.word	0x20000000
 800a02c:	10624dd3 	.word	0x10624dd3
 800a030:	e000e014 	.word	0xe000e014

0800a034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a044 <vPortEnableVFP+0x10>
 800a038:	6801      	ldr	r1, [r0, #0]
 800a03a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a03e:	6001      	str	r1, [r0, #0]
 800a040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a042:	bf00      	nop
 800a044:	e000ed88 	.word	0xe000ed88

0800a048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a04e:	f3ef 8305 	mrs	r3, IPSR
 800a052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b0f      	cmp	r3, #15
 800a058:	d914      	bls.n	800a084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <vPortValidateInterruptPriority+0x70>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a064:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <vPortValidateInterruptPriority+0x74>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	7afa      	ldrb	r2, [r7, #11]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d20a      	bcs.n	800a084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	607b      	str	r3, [r7, #4]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a084:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <vPortValidateInterruptPriority+0x78>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a08c:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <vPortValidateInterruptPriority+0x7c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d90a      	bls.n	800a0aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	603b      	str	r3, [r7, #0]
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <vPortValidateInterruptPriority+0x60>
	}
 800a0aa:	bf00      	nop
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	e000e3f0 	.word	0xe000e3f0
 800a0bc:	20001440 	.word	0x20001440
 800a0c0:	e000ed0c 	.word	0xe000ed0c
 800a0c4:	20001444 	.word	0x20001444

0800a0c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	; 0x28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0d4:	f7fe fcf8 	bl	8008ac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0d8:	4b5b      	ldr	r3, [pc, #364]	; (800a248 <pvPortMalloc+0x180>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0e0:	f000 f920 	bl	800a324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0e4:	4b59      	ldr	r3, [pc, #356]	; (800a24c <pvPortMalloc+0x184>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f040 8093 	bne.w	800a218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01d      	beq.n	800a134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b00      	cmp	r3, #0
 800a108:	d014      	beq.n	800a134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f023 0307 	bic.w	r3, r3, #7
 800a110:	3308      	adds	r3, #8
 800a112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <pvPortMalloc+0x6c>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	617b      	str	r3, [r7, #20]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d06e      	beq.n	800a218 <pvPortMalloc+0x150>
 800a13a:	4b45      	ldr	r3, [pc, #276]	; (800a250 <pvPortMalloc+0x188>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d869      	bhi.n	800a218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a144:	4b43      	ldr	r3, [pc, #268]	; (800a254 <pvPortMalloc+0x18c>)
 800a146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a148:	4b42      	ldr	r3, [pc, #264]	; (800a254 <pvPortMalloc+0x18c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a14e:	e004      	b.n	800a15a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <pvPortMalloc+0xa4>
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f1      	bne.n	800a150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a16c:	4b36      	ldr	r3, [pc, #216]	; (800a248 <pvPortMalloc+0x180>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a172:	429a      	cmp	r2, r3
 800a174:	d050      	beq.n	800a218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2208      	movs	r2, #8
 800a17c:	4413      	add	r3, r2
 800a17e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	2308      	movs	r3, #8
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	429a      	cmp	r2, r3
 800a196:	d91f      	bls.n	800a1d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4413      	add	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	613b      	str	r3, [r7, #16]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1d2:	69b8      	ldr	r0, [r7, #24]
 800a1d4:	f000 f908 	bl	800a3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1d8:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <pvPortMalloc+0x188>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	4a1b      	ldr	r2, [pc, #108]	; (800a250 <pvPortMalloc+0x188>)
 800a1e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1e6:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <pvPortMalloc+0x188>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4b1b      	ldr	r3, [pc, #108]	; (800a258 <pvPortMalloc+0x190>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d203      	bcs.n	800a1fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1f2:	4b17      	ldr	r3, [pc, #92]	; (800a250 <pvPortMalloc+0x188>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a18      	ldr	r2, [pc, #96]	; (800a258 <pvPortMalloc+0x190>)
 800a1f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <pvPortMalloc+0x184>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	431a      	orrs	r2, r3
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <pvPortMalloc+0x194>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	4a11      	ldr	r2, [pc, #68]	; (800a25c <pvPortMalloc+0x194>)
 800a216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a218:	f7fe fc64 	bl	8008ae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <pvPortMalloc+0x174>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60fb      	str	r3, [r7, #12]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <pvPortMalloc+0x172>
	return pvReturn;
 800a23c:	69fb      	ldr	r3, [r7, #28]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3728      	adds	r7, #40	; 0x28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20005050 	.word	0x20005050
 800a24c:	20005064 	.word	0x20005064
 800a250:	20005054 	.word	0x20005054
 800a254:	20005048 	.word	0x20005048
 800a258:	20005058 	.word	0x20005058
 800a25c:	2000505c 	.word	0x2000505c

0800a260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d04d      	beq.n	800a30e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a272:	2308      	movs	r3, #8
 800a274:	425b      	negs	r3, r3
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4413      	add	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	4b24      	ldr	r3, [pc, #144]	; (800a318 <vPortFree+0xb8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4013      	ands	r3, r2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <vPortFree+0x44>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	60fb      	str	r3, [r7, #12]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <vPortFree+0x62>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	60bb      	str	r3, [r7, #8]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <vPortFree+0xb8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01e      	beq.n	800a30e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d11a      	bne.n	800a30e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <vPortFree+0xb8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	401a      	ands	r2, r3
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2e8:	f7fe fbee 	bl	8008ac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <vPortFree+0xbc>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	4a09      	ldr	r2, [pc, #36]	; (800a31c <vPortFree+0xbc>)
 800a2f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2fa:	6938      	ldr	r0, [r7, #16]
 800a2fc:	f000 f874 	bl	800a3e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <vPortFree+0xc0>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	4a06      	ldr	r2, [pc, #24]	; (800a320 <vPortFree+0xc0>)
 800a308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a30a:	f7fe fbeb 	bl	8008ae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a30e:	bf00      	nop
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20005064 	.word	0x20005064
 800a31c:	20005054 	.word	0x20005054
 800a320:	20005060 	.word	0x20005060

0800a324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a32a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a330:	4b27      	ldr	r3, [pc, #156]	; (800a3d0 <prvHeapInit+0xac>)
 800a332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00c      	beq.n	800a358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3307      	adds	r3, #7
 800a342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0307 	bic.w	r3, r3, #7
 800a34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <prvHeapInit+0xac>)
 800a354:	4413      	add	r3, r2
 800a356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a35c:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <prvHeapInit+0xb0>)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <prvHeapInit+0xb0>)
 800a364:	2200      	movs	r2, #0
 800a366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a370:	2208      	movs	r2, #8
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	1a9b      	subs	r3, r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0307 	bic.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <prvHeapInit+0xb4>)
 800a384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a386:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <prvHeapInit+0xb4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2200      	movs	r2, #0
 800a38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a38e:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <prvHeapInit+0xb4>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <prvHeapInit+0xb4>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <prvHeapInit+0xb8>)
 800a3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	4a09      	ldr	r2, [pc, #36]	; (800a3e0 <prvHeapInit+0xbc>)
 800a3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <prvHeapInit+0xc0>)
 800a3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3c2:	601a      	str	r2, [r3, #0]
}
 800a3c4:	bf00      	nop
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	20001448 	.word	0x20001448
 800a3d4:	20005048 	.word	0x20005048
 800a3d8:	20005050 	.word	0x20005050
 800a3dc:	20005058 	.word	0x20005058
 800a3e0:	20005054 	.word	0x20005054
 800a3e4:	20005064 	.word	0x20005064

0800a3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <prvInsertBlockIntoFreeList+0xac>)
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	e002      	b.n	800a3fc <prvInsertBlockIntoFreeList+0x14>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	429a      	cmp	r2, r3
 800a404:	d8f7      	bhi.n	800a3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	4413      	add	r3, r2
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d108      	bne.n	800a42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	441a      	add	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	441a      	add	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d118      	bne.n	800a470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4b15      	ldr	r3, [pc, #84]	; (800a498 <prvInsertBlockIntoFreeList+0xb0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	429a      	cmp	r2, r3
 800a448:	d00d      	beq.n	800a466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	441a      	add	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	e008      	b.n	800a478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <prvInsertBlockIntoFreeList+0xb0>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	601a      	str	r2, [r3, #0]
 800a46e:	e003      	b.n	800a478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d002      	beq.n	800a486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a486:	bf00      	nop
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20005048 	.word	0x20005048
 800a498:	20005050 	.word	0x20005050

0800a49c <findslot>:
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <findslot+0x2c>)
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	b118      	cbz	r0, 800a4ae <findslot+0x12>
 800a4a6:	6983      	ldr	r3, [r0, #24]
 800a4a8:	b90b      	cbnz	r3, 800a4ae <findslot+0x12>
 800a4aa:	f000 faf9 	bl	800aaa0 <__sinit>
 800a4ae:	2c13      	cmp	r4, #19
 800a4b0:	d807      	bhi.n	800a4c2 <findslot+0x26>
 800a4b2:	4806      	ldr	r0, [pc, #24]	; (800a4cc <findslot+0x30>)
 800a4b4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	d002      	beq.n	800a4c2 <findslot+0x26>
 800a4bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a4c0:	bd10      	pop	{r4, pc}
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e7fc      	b.n	800a4c0 <findslot+0x24>
 800a4c6:	bf00      	nop
 800a4c8:	20000078 	.word	0x20000078
 800a4cc:	20005074 	.word	0x20005074

0800a4d0 <error>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	f000 fa86 	bl	800a9e4 <__errno>
 800a4d8:	2613      	movs	r6, #19
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2700      	movs	r7, #0
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	beab      	bkpt	0x00ab
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	602e      	str	r6, [r5, #0]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4ec <checkerror>:
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d101      	bne.n	800a4f4 <checkerror+0x8>
 800a4f0:	f7ff bfee 	b.w	800a4d0 <error>
 800a4f4:	4770      	bx	lr

0800a4f6 <_swiread>:
 800a4f6:	b530      	push	{r4, r5, lr}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a4fe:	9203      	str	r2, [sp, #12]
 800a500:	2406      	movs	r4, #6
 800a502:	ad01      	add	r5, sp, #4
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	beab      	bkpt	0x00ab
 800a50a:	4604      	mov	r4, r0
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7ff ffed 	bl	800a4ec <checkerror>
 800a512:	b005      	add	sp, #20
 800a514:	bd30      	pop	{r4, r5, pc}

0800a516 <_read>:
 800a516:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a518:	4615      	mov	r5, r2
 800a51a:	9101      	str	r1, [sp, #4]
 800a51c:	f7ff ffbe 	bl	800a49c <findslot>
 800a520:	9901      	ldr	r1, [sp, #4]
 800a522:	4604      	mov	r4, r0
 800a524:	b938      	cbnz	r0, 800a536 <_read+0x20>
 800a526:	f000 fa5d 	bl	800a9e4 <__errno>
 800a52a:	2309      	movs	r3, #9
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	f04f 30ff 	mov.w	r0, #4294967295
 800a532:	b003      	add	sp, #12
 800a534:	bd30      	pop	{r4, r5, pc}
 800a536:	6800      	ldr	r0, [r0, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	f7ff ffdc 	bl	800a4f6 <_swiread>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d0f7      	beq.n	800a532 <_read+0x1c>
 800a542:	6863      	ldr	r3, [r4, #4]
 800a544:	1a2a      	subs	r2, r5, r0
 800a546:	4413      	add	r3, r2
 800a548:	6063      	str	r3, [r4, #4]
 800a54a:	4610      	mov	r0, r2
 800a54c:	e7f1      	b.n	800a532 <_read+0x1c>

0800a54e <_swilseek>:
 800a54e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a550:	460c      	mov	r4, r1
 800a552:	4616      	mov	r6, r2
 800a554:	f7ff ffa2 	bl	800a49c <findslot>
 800a558:	4605      	mov	r5, r0
 800a55a:	b940      	cbnz	r0, 800a56e <_swilseek+0x20>
 800a55c:	f000 fa42 	bl	800a9e4 <__errno>
 800a560:	2309      	movs	r3, #9
 800a562:	6003      	str	r3, [r0, #0]
 800a564:	f04f 34ff 	mov.w	r4, #4294967295
 800a568:	4620      	mov	r0, r4
 800a56a:	b003      	add	sp, #12
 800a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56e:	2e02      	cmp	r6, #2
 800a570:	d903      	bls.n	800a57a <_swilseek+0x2c>
 800a572:	f000 fa37 	bl	800a9e4 <__errno>
 800a576:	2316      	movs	r3, #22
 800a578:	e7f3      	b.n	800a562 <_swilseek+0x14>
 800a57a:	2e01      	cmp	r6, #1
 800a57c:	d112      	bne.n	800a5a4 <_swilseek+0x56>
 800a57e:	6843      	ldr	r3, [r0, #4]
 800a580:	18e4      	adds	r4, r4, r3
 800a582:	d4f6      	bmi.n	800a572 <_swilseek+0x24>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	260a      	movs	r6, #10
 800a588:	e9cd 3400 	strd	r3, r4, [sp]
 800a58c:	466f      	mov	r7, sp
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	beab      	bkpt	0x00ab
 800a594:	4606      	mov	r6, r0
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ffa8 	bl	800a4ec <checkerror>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	dbe1      	blt.n	800a564 <_swilseek+0x16>
 800a5a0:	606c      	str	r4, [r5, #4]
 800a5a2:	e7e1      	b.n	800a568 <_swilseek+0x1a>
 800a5a4:	2e02      	cmp	r6, #2
 800a5a6:	d1ed      	bne.n	800a584 <_swilseek+0x36>
 800a5a8:	6803      	ldr	r3, [r0, #0]
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	260c      	movs	r6, #12
 800a5ae:	466f      	mov	r7, sp
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	beab      	bkpt	0x00ab
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff ff97 	bl	800a4ec <checkerror>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	d0d0      	beq.n	800a564 <_swilseek+0x16>
 800a5c2:	4404      	add	r4, r0
 800a5c4:	e7de      	b.n	800a584 <_swilseek+0x36>

0800a5c6 <_lseek>:
 800a5c6:	f7ff bfc2 	b.w	800a54e <_swilseek>

0800a5ca <_swiwrite>:
 800a5ca:	b530      	push	{r4, r5, lr}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a5d2:	9203      	str	r2, [sp, #12]
 800a5d4:	2405      	movs	r4, #5
 800a5d6:	ad01      	add	r5, sp, #4
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	beab      	bkpt	0x00ab
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff ff83 	bl	800a4ec <checkerror>
 800a5e6:	b005      	add	sp, #20
 800a5e8:	bd30      	pop	{r4, r5, pc}

0800a5ea <_write>:
 800a5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	9101      	str	r1, [sp, #4]
 800a5f0:	f7ff ff54 	bl	800a49c <findslot>
 800a5f4:	9901      	ldr	r1, [sp, #4]
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	b930      	cbnz	r0, 800a608 <_write+0x1e>
 800a5fa:	f000 f9f3 	bl	800a9e4 <__errno>
 800a5fe:	2309      	movs	r3, #9
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	f04f 30ff 	mov.w	r0, #4294967295
 800a606:	e012      	b.n	800a62e <_write+0x44>
 800a608:	6800      	ldr	r0, [r0, #0]
 800a60a:	462a      	mov	r2, r5
 800a60c:	f7ff ffdd 	bl	800a5ca <_swiwrite>
 800a610:	2800      	cmp	r0, #0
 800a612:	dbf6      	blt.n	800a602 <_write+0x18>
 800a614:	6862      	ldr	r2, [r4, #4]
 800a616:	1a2b      	subs	r3, r5, r0
 800a618:	441a      	add	r2, r3
 800a61a:	42a8      	cmp	r0, r5
 800a61c:	6062      	str	r2, [r4, #4]
 800a61e:	d105      	bne.n	800a62c <_write+0x42>
 800a620:	2000      	movs	r0, #0
 800a622:	b003      	add	sp, #12
 800a624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a628:	f7ff bf52 	b.w	800a4d0 <error>
 800a62c:	4618      	mov	r0, r3
 800a62e:	b003      	add	sp, #12
 800a630:	bd30      	pop	{r4, r5, pc}

0800a632 <_swiclose>:
 800a632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a634:	2402      	movs	r4, #2
 800a636:	9001      	str	r0, [sp, #4]
 800a638:	ad01      	add	r5, sp, #4
 800a63a:	4620      	mov	r0, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	beab      	bkpt	0x00ab
 800a640:	4604      	mov	r4, r0
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff ff52 	bl	800a4ec <checkerror>
 800a648:	b003      	add	sp, #12
 800a64a:	bd30      	pop	{r4, r5, pc}

0800a64c <_close>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4605      	mov	r5, r0
 800a650:	f7ff ff24 	bl	800a49c <findslot>
 800a654:	4604      	mov	r4, r0
 800a656:	b930      	cbnz	r0, 800a666 <_close+0x1a>
 800a658:	f000 f9c4 	bl	800a9e4 <__errno>
 800a65c:	2309      	movs	r3, #9
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	3d01      	subs	r5, #1
 800a668:	2d01      	cmp	r5, #1
 800a66a:	d809      	bhi.n	800a680 <_close+0x34>
 800a66c:	4b09      	ldr	r3, [pc, #36]	; (800a694 <_close+0x48>)
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	429a      	cmp	r2, r3
 800a674:	d104      	bne.n	800a680 <_close+0x34>
 800a676:	f04f 33ff 	mov.w	r3, #4294967295
 800a67a:	6003      	str	r3, [r0, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e7f1      	b.n	800a664 <_close+0x18>
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	f7ff ffd6 	bl	800a632 <_swiclose>
 800a686:	2800      	cmp	r0, #0
 800a688:	d1ec      	bne.n	800a664 <_close+0x18>
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	e7e8      	b.n	800a664 <_close+0x18>
 800a692:	bf00      	nop
 800a694:	20005074 	.word	0x20005074

0800a698 <_getpid>:
 800a698:	2001      	movs	r0, #1
 800a69a:	4770      	bx	lr

0800a69c <_swistat>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f7ff fefc 	bl	800a49c <findslot>
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	b930      	cbnz	r0, 800a6b6 <_swistat+0x1a>
 800a6a8:	f000 f99c 	bl	800a9e4 <__errno>
 800a6ac:	2309      	movs	r3, #9
 800a6ae:	6003      	str	r3, [r0, #0]
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	6863      	ldr	r3, [r4, #4]
 800a6b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a6bc:	6063      	str	r3, [r4, #4]
 800a6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c2:	64a3      	str	r3, [r4, #72]	; 0x48
 800a6c4:	260c      	movs	r6, #12
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	beab      	bkpt	0x00ab
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f7ff ff0c 	bl	800a4ec <checkerror>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	bf1c      	itt	ne
 800a6d8:	6120      	strne	r0, [r4, #16]
 800a6da:	2000      	movne	r0, #0
 800a6dc:	e7ea      	b.n	800a6b4 <_swistat+0x18>

0800a6de <_fstat>:
 800a6de:	460b      	mov	r3, r1
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	2258      	movs	r2, #88	; 0x58
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 faac 	bl	800ac46 <memset>
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f6:	f7ff bfd1 	b.w	800a69c <_swistat>

0800a6fa <_stat>:
 800a6fa:	b538      	push	{r3, r4, r5, lr}
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	4604      	mov	r4, r0
 800a700:	2258      	movs	r2, #88	; 0x58
 800a702:	2100      	movs	r1, #0
 800a704:	4628      	mov	r0, r5
 800a706:	f000 fa9e 	bl	800ac46 <memset>
 800a70a:	4620      	mov	r0, r4
 800a70c:	2100      	movs	r1, #0
 800a70e:	f000 f811 	bl	800a734 <_swiopen>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	4604      	mov	r4, r0
 800a716:	d00b      	beq.n	800a730 <_stat+0x36>
 800a718:	686b      	ldr	r3, [r5, #4]
 800a71a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a71e:	606b      	str	r3, [r5, #4]
 800a720:	4629      	mov	r1, r5
 800a722:	f7ff ffbb 	bl	800a69c <_swistat>
 800a726:	4605      	mov	r5, r0
 800a728:	4620      	mov	r0, r4
 800a72a:	f7ff ff8f 	bl	800a64c <_close>
 800a72e:	462c      	mov	r4, r5
 800a730:	4620      	mov	r0, r4
 800a732:	bd38      	pop	{r3, r4, r5, pc}

0800a734 <_swiopen>:
 800a734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a738:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800a7e4 <_swiopen+0xb0>
 800a73c:	b097      	sub	sp, #92	; 0x5c
 800a73e:	4607      	mov	r7, r0
 800a740:	460e      	mov	r6, r1
 800a742:	2500      	movs	r5, #0
 800a744:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800a748:	1c61      	adds	r1, r4, #1
 800a74a:	d037      	beq.n	800a7bc <_swiopen+0x88>
 800a74c:	3501      	adds	r5, #1
 800a74e:	2d14      	cmp	r5, #20
 800a750:	d1f8      	bne.n	800a744 <_swiopen+0x10>
 800a752:	f000 f947 	bl	800a9e4 <__errno>
 800a756:	2318      	movs	r3, #24
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	f04f 34ff 	mov.w	r4, #4294967295
 800a75e:	e03d      	b.n	800a7dc <_swiopen+0xa8>
 800a760:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800a764:	f240 6301 	movw	r3, #1537	; 0x601
 800a768:	07b2      	lsls	r2, r6, #30
 800a76a:	bf48      	it	mi
 800a76c:	f044 0402 	orrmi.w	r4, r4, #2
 800a770:	421e      	tst	r6, r3
 800a772:	bf18      	it	ne
 800a774:	f044 0404 	orrne.w	r4, r4, #4
 800a778:	0733      	lsls	r3, r6, #28
 800a77a:	bf48      	it	mi
 800a77c:	f024 0404 	bicmi.w	r4, r4, #4
 800a780:	4638      	mov	r0, r7
 800a782:	bf48      	it	mi
 800a784:	f044 0408 	orrmi.w	r4, r4, #8
 800a788:	9700      	str	r7, [sp, #0]
 800a78a:	f7f5 fd21 	bl	80001d0 <strlen>
 800a78e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800a792:	2401      	movs	r4, #1
 800a794:	4620      	mov	r0, r4
 800a796:	4649      	mov	r1, r9
 800a798:	beab      	bkpt	0x00ab
 800a79a:	4604      	mov	r4, r0
 800a79c:	2c00      	cmp	r4, #0
 800a79e:	db08      	blt.n	800a7b2 <_swiopen+0x7e>
 800a7a0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800a7a4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c8 3004 	str.w	r3, [r8, #4]
 800a7ae:	462c      	mov	r4, r5
 800a7b0:	e014      	b.n	800a7dc <_swiopen+0xa8>
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff fe8c 	bl	800a4d0 <error>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	e00f      	b.n	800a7dc <_swiopen+0xa8>
 800a7bc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800a7c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a7c4:	46e9      	mov	r9, sp
 800a7c6:	d1cb      	bne.n	800a760 <_swiopen+0x2c>
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7ff ff95 	bl	800a6fa <_stat>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d0c5      	beq.n	800a760 <_swiopen+0x2c>
 800a7d4:	f000 f906 	bl	800a9e4 <__errno>
 800a7d8:	2311      	movs	r3, #17
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	b017      	add	sp, #92	; 0x5c
 800a7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e4:	20005074 	.word	0x20005074

0800a7e8 <_get_semihosting_exts>:
 800a7e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460f      	mov	r7, r1
 800a7f0:	482a      	ldr	r0, [pc, #168]	; (800a89c <_get_semihosting_exts+0xb4>)
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	f7ff ff9d 	bl	800a734 <_swiopen>
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	2100      	movs	r1, #0
 800a800:	4630      	mov	r0, r6
 800a802:	f000 fa20 	bl	800ac46 <memset>
 800a806:	1c63      	adds	r3, r4, #1
 800a808:	d016      	beq.n	800a838 <_get_semihosting_exts+0x50>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7ff fe46 	bl	800a49c <findslot>
 800a810:	f04f 090c 	mov.w	r9, #12
 800a814:	4680      	mov	r8, r0
 800a816:	4648      	mov	r0, r9
 800a818:	4641      	mov	r1, r8
 800a81a:	beab      	bkpt	0x00ab
 800a81c:	4680      	mov	r8, r0
 800a81e:	4640      	mov	r0, r8
 800a820:	f7ff fe64 	bl	800a4ec <checkerror>
 800a824:	2803      	cmp	r0, #3
 800a826:	dd02      	ble.n	800a82e <_get_semihosting_exts+0x46>
 800a828:	1ec3      	subs	r3, r0, #3
 800a82a:	42ab      	cmp	r3, r5
 800a82c:	dc08      	bgt.n	800a840 <_get_semihosting_exts+0x58>
 800a82e:	4620      	mov	r0, r4
 800a830:	f7ff ff0c 	bl	800a64c <_close>
 800a834:	f04f 34ff 	mov.w	r4, #4294967295
 800a838:	4620      	mov	r0, r4
 800a83a:	b003      	add	sp, #12
 800a83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a840:	2204      	movs	r2, #4
 800a842:	eb0d 0102 	add.w	r1, sp, r2
 800a846:	4620      	mov	r0, r4
 800a848:	f7ff fe65 	bl	800a516 <_read>
 800a84c:	2803      	cmp	r0, #3
 800a84e:	ddee      	ble.n	800a82e <_get_semihosting_exts+0x46>
 800a850:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a854:	2b53      	cmp	r3, #83	; 0x53
 800a856:	d1ea      	bne.n	800a82e <_get_semihosting_exts+0x46>
 800a858:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a85c:	2b48      	cmp	r3, #72	; 0x48
 800a85e:	d1e6      	bne.n	800a82e <_get_semihosting_exts+0x46>
 800a860:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a864:	2b46      	cmp	r3, #70	; 0x46
 800a866:	d1e2      	bne.n	800a82e <_get_semihosting_exts+0x46>
 800a868:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a86c:	2b42      	cmp	r3, #66	; 0x42
 800a86e:	d1de      	bne.n	800a82e <_get_semihosting_exts+0x46>
 800a870:	2201      	movs	r2, #1
 800a872:	4639      	mov	r1, r7
 800a874:	4620      	mov	r0, r4
 800a876:	f7ff fe6a 	bl	800a54e <_swilseek>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	dbd7      	blt.n	800a82e <_get_semihosting_exts+0x46>
 800a87e:	462a      	mov	r2, r5
 800a880:	4631      	mov	r1, r6
 800a882:	4620      	mov	r0, r4
 800a884:	f7ff fe47 	bl	800a516 <_read>
 800a888:	4605      	mov	r5, r0
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff fede 	bl	800a64c <_close>
 800a890:	4628      	mov	r0, r5
 800a892:	f7ff fe2b 	bl	800a4ec <checkerror>
 800a896:	4604      	mov	r4, r0
 800a898:	e7ce      	b.n	800a838 <_get_semihosting_exts+0x50>
 800a89a:	bf00      	nop
 800a89c:	08010438 	.word	0x08010438

0800a8a0 <initialise_semihosting_exts>:
 800a8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8a2:	4d0a      	ldr	r5, [pc, #40]	; (800a8cc <initialise_semihosting_exts+0x2c>)
 800a8a4:	4c0a      	ldr	r4, [pc, #40]	; (800a8d0 <initialise_semihosting_exts+0x30>)
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	a801      	add	r0, sp, #4
 800a8ac:	6029      	str	r1, [r5, #0]
 800a8ae:	6022      	str	r2, [r4, #0]
 800a8b0:	f7ff ff9a 	bl	800a7e8 <_get_semihosting_exts>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	dd07      	ble.n	800a8c8 <initialise_semihosting_exts+0x28>
 800a8b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a8bc:	f003 0201 	and.w	r2, r3, #1
 800a8c0:	f003 0302 	and.w	r3, r3, #2
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	b003      	add	sp, #12
 800a8ca:	bd30      	pop	{r4, r5, pc}
 800a8cc:	20000070 	.word	0x20000070
 800a8d0:	20000074 	.word	0x20000074

0800a8d4 <_has_ext_stdout_stderr>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	4c04      	ldr	r4, [pc, #16]	; (800a8e8 <_has_ext_stdout_stderr+0x14>)
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da01      	bge.n	800a8e2 <_has_ext_stdout_stderr+0xe>
 800a8de:	f7ff ffdf 	bl	800a8a0 <initialise_semihosting_exts>
 800a8e2:	6820      	ldr	r0, [r4, #0]
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20000074 	.word	0x20000074

0800a8ec <initialise_monitor_handles>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	b085      	sub	sp, #20
 800a8f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a9a4 <initialise_monitor_handles+0xb8>
 800a8f6:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	2400      	movs	r4, #0
 800a8fe:	9303      	str	r3, [sp, #12]
 800a900:	af01      	add	r7, sp, #4
 800a902:	9402      	str	r4, [sp, #8]
 800a904:	2501      	movs	r5, #1
 800a906:	4628      	mov	r0, r5
 800a908:	4639      	mov	r1, r7
 800a90a:	beab      	bkpt	0x00ab
 800a90c:	4605      	mov	r5, r0
 800a90e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a9a8 <initialise_monitor_handles+0xbc>
 800a912:	4623      	mov	r3, r4
 800a914:	4c20      	ldr	r4, [pc, #128]	; (800a998 <initialise_monitor_handles+0xac>)
 800a916:	f8c8 5000 	str.w	r5, [r8]
 800a91a:	f04f 32ff 	mov.w	r2, #4294967295
 800a91e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a922:	3301      	adds	r3, #1
 800a924:	2b14      	cmp	r3, #20
 800a926:	d1fa      	bne.n	800a91e <initialise_monitor_handles+0x32>
 800a928:	f7ff ffd4 	bl	800a8d4 <_has_ext_stdout_stderr>
 800a92c:	4d1b      	ldr	r5, [pc, #108]	; (800a99c <initialise_monitor_handles+0xb0>)
 800a92e:	b1d0      	cbz	r0, 800a966 <initialise_monitor_handles+0x7a>
 800a930:	f04f 0a03 	mov.w	sl, #3
 800a934:	2304      	movs	r3, #4
 800a936:	f8cd 9004 	str.w	r9, [sp, #4]
 800a93a:	2601      	movs	r6, #1
 800a93c:	f8cd a00c 	str.w	sl, [sp, #12]
 800a940:	9302      	str	r3, [sp, #8]
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	beab      	bkpt	0x00ab
 800a948:	4683      	mov	fp, r0
 800a94a:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <initialise_monitor_handles+0xb4>)
 800a94c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a950:	f8c3 b000 	str.w	fp, [r3]
 800a954:	2308      	movs	r3, #8
 800a956:	f8cd a00c 	str.w	sl, [sp, #12]
 800a95a:	9302      	str	r3, [sp, #8]
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	beab      	bkpt	0x00ab
 800a962:	4606      	mov	r6, r0
 800a964:	602e      	str	r6, [r5, #0]
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	3301      	adds	r3, #1
 800a96a:	bf02      	ittt	eq
 800a96c:	4b0c      	ldreq	r3, [pc, #48]	; (800a9a0 <initialise_monitor_handles+0xb4>)
 800a96e:	681b      	ldreq	r3, [r3, #0]
 800a970:	602b      	streq	r3, [r5, #0]
 800a972:	2600      	movs	r6, #0
 800a974:	f8d8 3000 	ldr.w	r3, [r8]
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	6066      	str	r6, [r4, #4]
 800a97c:	f7ff ffaa 	bl	800a8d4 <_has_ext_stdout_stderr>
 800a980:	b130      	cbz	r0, 800a990 <initialise_monitor_handles+0xa4>
 800a982:	4b07      	ldr	r3, [pc, #28]	; (800a9a0 <initialise_monitor_handles+0xb4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a990:	b005      	add	sp, #20
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	bf00      	nop
 800a998:	20005074 	.word	0x20005074
 800a99c:	20005068 	.word	0x20005068
 800a9a0:	20005070 	.word	0x20005070
 800a9a4:	0801044e 	.word	0x0801044e
 800a9a8:	2000506c 	.word	0x2000506c

0800a9ac <_isatty>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	f7ff fd75 	bl	800a49c <findslot>
 800a9b2:	2509      	movs	r5, #9
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	b920      	cbnz	r0, 800a9c2 <_isatty+0x16>
 800a9b8:	f000 f814 	bl	800a9e4 <__errno>
 800a9bc:	6005      	str	r5, [r0, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	bd70      	pop	{r4, r5, r6, pc}
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	beab      	bkpt	0x00ab
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	2c01      	cmp	r4, #1
 800a9cc:	d0f7      	beq.n	800a9be <_isatty+0x12>
 800a9ce:	f000 f809 	bl	800a9e4 <__errno>
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	2613      	movs	r6, #19
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4621      	mov	r1, r4
 800a9dc:	beab      	bkpt	0x00ab
 800a9de:	4606      	mov	r6, r0
 800a9e0:	602e      	str	r6, [r5, #0]
 800a9e2:	e7ec      	b.n	800a9be <_isatty+0x12>

0800a9e4 <__errno>:
 800a9e4:	4b01      	ldr	r3, [pc, #4]	; (800a9ec <__errno+0x8>)
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000078 	.word	0x20000078

0800a9f0 <std>:
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9fe:	6083      	str	r3, [r0, #8]
 800aa00:	8181      	strh	r1, [r0, #12]
 800aa02:	6643      	str	r3, [r0, #100]	; 0x64
 800aa04:	81c2      	strh	r2, [r0, #14]
 800aa06:	6183      	str	r3, [r0, #24]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	305c      	adds	r0, #92	; 0x5c
 800aa0e:	f000 f91a 	bl	800ac46 <memset>
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <std+0x38>)
 800aa14:	6263      	str	r3, [r4, #36]	; 0x24
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <std+0x3c>)
 800aa18:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <std+0x40>)
 800aa1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <std+0x44>)
 800aa20:	6224      	str	r4, [r4, #32]
 800aa22:	6323      	str	r3, [r4, #48]	; 0x30
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	0800b675 	.word	0x0800b675
 800aa2c:	0800b697 	.word	0x0800b697
 800aa30:	0800b6cf 	.word	0x0800b6cf
 800aa34:	0800b6f3 	.word	0x0800b6f3

0800aa38 <_cleanup_r>:
 800aa38:	4901      	ldr	r1, [pc, #4]	; (800aa40 <_cleanup_r+0x8>)
 800aa3a:	f000 b8af 	b.w	800ab9c <_fwalk_reent>
 800aa3e:	bf00      	nop
 800aa40:	0800c541 	.word	0x0800c541

0800aa44 <__sfmoreglue>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	2268      	movs	r2, #104	; 0x68
 800aa48:	1e4d      	subs	r5, r1, #1
 800aa4a:	4355      	muls	r5, r2
 800aa4c:	460e      	mov	r6, r1
 800aa4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa52:	f000 f921 	bl	800ac98 <_malloc_r>
 800aa56:	4604      	mov	r4, r0
 800aa58:	b140      	cbz	r0, 800aa6c <__sfmoreglue+0x28>
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa60:	300c      	adds	r0, #12
 800aa62:	60a0      	str	r0, [r4, #8]
 800aa64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa68:	f000 f8ed 	bl	800ac46 <memset>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}

0800aa70 <__sfp_lock_acquire>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__sfp_lock_acquire+0x8>)
 800aa72:	f000 b8d8 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800aa76:	bf00      	nop
 800aa78:	20005115 	.word	0x20005115

0800aa7c <__sfp_lock_release>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__sfp_lock_release+0x8>)
 800aa7e:	f000 b8d3 	b.w	800ac28 <__retarget_lock_release_recursive>
 800aa82:	bf00      	nop
 800aa84:	20005115 	.word	0x20005115

0800aa88 <__sinit_lock_acquire>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__sinit_lock_acquire+0x8>)
 800aa8a:	f000 b8cc 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800aa8e:	bf00      	nop
 800aa90:	20005116 	.word	0x20005116

0800aa94 <__sinit_lock_release>:
 800aa94:	4801      	ldr	r0, [pc, #4]	; (800aa9c <__sinit_lock_release+0x8>)
 800aa96:	f000 b8c7 	b.w	800ac28 <__retarget_lock_release_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	20005116 	.word	0x20005116

0800aaa0 <__sinit>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	f7ff fff0 	bl	800aa88 <__sinit_lock_acquire>
 800aaa8:	69a3      	ldr	r3, [r4, #24]
 800aaaa:	b11b      	cbz	r3, 800aab4 <__sinit+0x14>
 800aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab0:	f7ff bff0 	b.w	800aa94 <__sinit_lock_release>
 800aab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aab8:	6523      	str	r3, [r4, #80]	; 0x50
 800aaba:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <__sinit+0x68>)
 800aabc:	4a13      	ldr	r2, [pc, #76]	; (800ab0c <__sinit+0x6c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	bf04      	itt	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	61a3      	streq	r3, [r4, #24]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f820 	bl	800ab10 <__sfp>
 800aad0:	6060      	str	r0, [r4, #4]
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f81c 	bl	800ab10 <__sfp>
 800aad8:	60a0      	str	r0, [r4, #8]
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f818 	bl	800ab10 <__sfp>
 800aae0:	2200      	movs	r2, #0
 800aae2:	60e0      	str	r0, [r4, #12]
 800aae4:	2104      	movs	r1, #4
 800aae6:	6860      	ldr	r0, [r4, #4]
 800aae8:	f7ff ff82 	bl	800a9f0 <std>
 800aaec:	68a0      	ldr	r0, [r4, #8]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	2109      	movs	r1, #9
 800aaf2:	f7ff ff7d 	bl	800a9f0 <std>
 800aaf6:	68e0      	ldr	r0, [r4, #12]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	2112      	movs	r1, #18
 800aafc:	f7ff ff78 	bl	800a9f0 <std>
 800ab00:	2301      	movs	r3, #1
 800ab02:	61a3      	str	r3, [r4, #24]
 800ab04:	e7d2      	b.n	800aaac <__sinit+0xc>
 800ab06:	bf00      	nop
 800ab08:	080104b4 	.word	0x080104b4
 800ab0c:	0800aa39 	.word	0x0800aa39

0800ab10 <__sfp>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	4607      	mov	r7, r0
 800ab14:	f7ff ffac 	bl	800aa70 <__sfp_lock_acquire>
 800ab18:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <__sfp+0x84>)
 800ab1a:	681e      	ldr	r6, [r3, #0]
 800ab1c:	69b3      	ldr	r3, [r6, #24]
 800ab1e:	b913      	cbnz	r3, 800ab26 <__sfp+0x16>
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7ff ffbd 	bl	800aaa0 <__sinit>
 800ab26:	3648      	adds	r6, #72	; 0x48
 800ab28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	d503      	bpl.n	800ab38 <__sfp+0x28>
 800ab30:	6833      	ldr	r3, [r6, #0]
 800ab32:	b30b      	cbz	r3, 800ab78 <__sfp+0x68>
 800ab34:	6836      	ldr	r6, [r6, #0]
 800ab36:	e7f7      	b.n	800ab28 <__sfp+0x18>
 800ab38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab3c:	b9d5      	cbnz	r5, 800ab74 <__sfp+0x64>
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <__sfp+0x88>)
 800ab40:	60e3      	str	r3, [r4, #12]
 800ab42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab46:	6665      	str	r5, [r4, #100]	; 0x64
 800ab48:	f000 f86c 	bl	800ac24 <__retarget_lock_init_recursive>
 800ab4c:	f7ff ff96 	bl	800aa7c <__sfp_lock_release>
 800ab50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab58:	6025      	str	r5, [r4, #0]
 800ab5a:	61a5      	str	r5, [r4, #24]
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab64:	f000 f86f 	bl	800ac46 <memset>
 800ab68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab70:	4620      	mov	r0, r4
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	3468      	adds	r4, #104	; 0x68
 800ab76:	e7d9      	b.n	800ab2c <__sfp+0x1c>
 800ab78:	2104      	movs	r1, #4
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f7ff ff62 	bl	800aa44 <__sfmoreglue>
 800ab80:	4604      	mov	r4, r0
 800ab82:	6030      	str	r0, [r6, #0]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d1d5      	bne.n	800ab34 <__sfp+0x24>
 800ab88:	f7ff ff78 	bl	800aa7c <__sfp_lock_release>
 800ab8c:	230c      	movs	r3, #12
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	e7ee      	b.n	800ab70 <__sfp+0x60>
 800ab92:	bf00      	nop
 800ab94:	080104b4 	.word	0x080104b4
 800ab98:	ffff0001 	.word	0xffff0001

0800ab9c <_fwalk_reent>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	4606      	mov	r6, r0
 800aba2:	4688      	mov	r8, r1
 800aba4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aba8:	2700      	movs	r7, #0
 800abaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abae:	f1b9 0901 	subs.w	r9, r9, #1
 800abb2:	d505      	bpl.n	800abc0 <_fwalk_reent+0x24>
 800abb4:	6824      	ldr	r4, [r4, #0]
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	d1f7      	bne.n	800abaa <_fwalk_reent+0xe>
 800abba:	4638      	mov	r0, r7
 800abbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc0:	89ab      	ldrh	r3, [r5, #12]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d907      	bls.n	800abd6 <_fwalk_reent+0x3a>
 800abc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abca:	3301      	adds	r3, #1
 800abcc:	d003      	beq.n	800abd6 <_fwalk_reent+0x3a>
 800abce:	4629      	mov	r1, r5
 800abd0:	4630      	mov	r0, r6
 800abd2:	47c0      	blx	r8
 800abd4:	4307      	orrs	r7, r0
 800abd6:	3568      	adds	r5, #104	; 0x68
 800abd8:	e7e9      	b.n	800abae <_fwalk_reent+0x12>
	...

0800abdc <__libc_init_array>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	4d0d      	ldr	r5, [pc, #52]	; (800ac14 <__libc_init_array+0x38>)
 800abe0:	4c0d      	ldr	r4, [pc, #52]	; (800ac18 <__libc_init_array+0x3c>)
 800abe2:	1b64      	subs	r4, r4, r5
 800abe4:	10a4      	asrs	r4, r4, #2
 800abe6:	2600      	movs	r6, #0
 800abe8:	42a6      	cmp	r6, r4
 800abea:	d109      	bne.n	800ac00 <__libc_init_array+0x24>
 800abec:	4d0b      	ldr	r5, [pc, #44]	; (800ac1c <__libc_init_array+0x40>)
 800abee:	4c0c      	ldr	r4, [pc, #48]	; (800ac20 <__libc_init_array+0x44>)
 800abf0:	f002 fc4a 	bl	800d488 <_init>
 800abf4:	1b64      	subs	r4, r4, r5
 800abf6:	10a4      	asrs	r4, r4, #2
 800abf8:	2600      	movs	r6, #0
 800abfa:	42a6      	cmp	r6, r4
 800abfc:	d105      	bne.n	800ac0a <__libc_init_array+0x2e>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac04:	4798      	blx	r3
 800ac06:	3601      	adds	r6, #1
 800ac08:	e7ee      	b.n	800abe8 <__libc_init_array+0xc>
 800ac0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0e:	4798      	blx	r3
 800ac10:	3601      	adds	r6, #1
 800ac12:	e7f2      	b.n	800abfa <__libc_init_array+0x1e>
 800ac14:	08010834 	.word	0x08010834
 800ac18:	08010834 	.word	0x08010834
 800ac1c:	08010834 	.word	0x08010834
 800ac20:	08010838 	.word	0x08010838

0800ac24 <__retarget_lock_init_recursive>:
 800ac24:	4770      	bx	lr

0800ac26 <__retarget_lock_acquire_recursive>:
 800ac26:	4770      	bx	lr

0800ac28 <__retarget_lock_release_recursive>:
 800ac28:	4770      	bx	lr

0800ac2a <memcpy>:
 800ac2a:	440a      	add	r2, r1
 800ac2c:	4291      	cmp	r1, r2
 800ac2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac32:	d100      	bne.n	800ac36 <memcpy+0xc>
 800ac34:	4770      	bx	lr
 800ac36:	b510      	push	{r4, lr}
 800ac38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac40:	4291      	cmp	r1, r2
 800ac42:	d1f9      	bne.n	800ac38 <memcpy+0xe>
 800ac44:	bd10      	pop	{r4, pc}

0800ac46 <memset>:
 800ac46:	4402      	add	r2, r0
 800ac48:	4603      	mov	r3, r0
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d100      	bne.n	800ac50 <memset+0xa>
 800ac4e:	4770      	bx	lr
 800ac50:	f803 1b01 	strb.w	r1, [r3], #1
 800ac54:	e7f9      	b.n	800ac4a <memset+0x4>
	...

0800ac58 <sbrk_aligned>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	4e0e      	ldr	r6, [pc, #56]	; (800ac94 <sbrk_aligned+0x3c>)
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	6831      	ldr	r1, [r6, #0]
 800ac60:	4605      	mov	r5, r0
 800ac62:	b911      	cbnz	r1, 800ac6a <sbrk_aligned+0x12>
 800ac64:	f000 fcf6 	bl	800b654 <_sbrk_r>
 800ac68:	6030      	str	r0, [r6, #0]
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 fcf1 	bl	800b654 <_sbrk_r>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d00a      	beq.n	800ac8c <sbrk_aligned+0x34>
 800ac76:	1cc4      	adds	r4, r0, #3
 800ac78:	f024 0403 	bic.w	r4, r4, #3
 800ac7c:	42a0      	cmp	r0, r4
 800ac7e:	d007      	beq.n	800ac90 <sbrk_aligned+0x38>
 800ac80:	1a21      	subs	r1, r4, r0
 800ac82:	4628      	mov	r0, r5
 800ac84:	f000 fce6 	bl	800b654 <_sbrk_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d101      	bne.n	800ac90 <sbrk_aligned+0x38>
 800ac8c:	f04f 34ff 	mov.w	r4, #4294967295
 800ac90:	4620      	mov	r0, r4
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	2000511c 	.word	0x2000511c

0800ac98 <_malloc_r>:
 800ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9c:	1ccd      	adds	r5, r1, #3
 800ac9e:	f025 0503 	bic.w	r5, r5, #3
 800aca2:	3508      	adds	r5, #8
 800aca4:	2d0c      	cmp	r5, #12
 800aca6:	bf38      	it	cc
 800aca8:	250c      	movcc	r5, #12
 800acaa:	2d00      	cmp	r5, #0
 800acac:	4607      	mov	r7, r0
 800acae:	db01      	blt.n	800acb4 <_malloc_r+0x1c>
 800acb0:	42a9      	cmp	r1, r5
 800acb2:	d905      	bls.n	800acc0 <_malloc_r+0x28>
 800acb4:	230c      	movs	r3, #12
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	2600      	movs	r6, #0
 800acba:	4630      	mov	r0, r6
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc0:	4e2e      	ldr	r6, [pc, #184]	; (800ad7c <_malloc_r+0xe4>)
 800acc2:	f001 fc97 	bl	800c5f4 <__malloc_lock>
 800acc6:	6833      	ldr	r3, [r6, #0]
 800acc8:	461c      	mov	r4, r3
 800acca:	bb34      	cbnz	r4, 800ad1a <_malloc_r+0x82>
 800accc:	4629      	mov	r1, r5
 800acce:	4638      	mov	r0, r7
 800acd0:	f7ff ffc2 	bl	800ac58 <sbrk_aligned>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	4604      	mov	r4, r0
 800acd8:	d14d      	bne.n	800ad76 <_malloc_r+0xde>
 800acda:	6834      	ldr	r4, [r6, #0]
 800acdc:	4626      	mov	r6, r4
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d140      	bne.n	800ad64 <_malloc_r+0xcc>
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	4631      	mov	r1, r6
 800ace6:	4638      	mov	r0, r7
 800ace8:	eb04 0803 	add.w	r8, r4, r3
 800acec:	f000 fcb2 	bl	800b654 <_sbrk_r>
 800acf0:	4580      	cmp	r8, r0
 800acf2:	d13a      	bne.n	800ad6a <_malloc_r+0xd2>
 800acf4:	6821      	ldr	r1, [r4, #0]
 800acf6:	3503      	adds	r5, #3
 800acf8:	1a6d      	subs	r5, r5, r1
 800acfa:	f025 0503 	bic.w	r5, r5, #3
 800acfe:	3508      	adds	r5, #8
 800ad00:	2d0c      	cmp	r5, #12
 800ad02:	bf38      	it	cc
 800ad04:	250c      	movcc	r5, #12
 800ad06:	4629      	mov	r1, r5
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff ffa5 	bl	800ac58 <sbrk_aligned>
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d02b      	beq.n	800ad6a <_malloc_r+0xd2>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	442b      	add	r3, r5
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	e00e      	b.n	800ad38 <_malloc_r+0xa0>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	1b52      	subs	r2, r2, r5
 800ad1e:	d41e      	bmi.n	800ad5e <_malloc_r+0xc6>
 800ad20:	2a0b      	cmp	r2, #11
 800ad22:	d916      	bls.n	800ad52 <_malloc_r+0xba>
 800ad24:	1961      	adds	r1, r4, r5
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	6025      	str	r5, [r4, #0]
 800ad2a:	bf18      	it	ne
 800ad2c:	6059      	strne	r1, [r3, #4]
 800ad2e:	6863      	ldr	r3, [r4, #4]
 800ad30:	bf08      	it	eq
 800ad32:	6031      	streq	r1, [r6, #0]
 800ad34:	5162      	str	r2, [r4, r5]
 800ad36:	604b      	str	r3, [r1, #4]
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f104 060b 	add.w	r6, r4, #11
 800ad3e:	f001 fc5f 	bl	800c600 <__malloc_unlock>
 800ad42:	f026 0607 	bic.w	r6, r6, #7
 800ad46:	1d23      	adds	r3, r4, #4
 800ad48:	1af2      	subs	r2, r6, r3
 800ad4a:	d0b6      	beq.n	800acba <_malloc_r+0x22>
 800ad4c:	1b9b      	subs	r3, r3, r6
 800ad4e:	50a3      	str	r3, [r4, r2]
 800ad50:	e7b3      	b.n	800acba <_malloc_r+0x22>
 800ad52:	6862      	ldr	r2, [r4, #4]
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	bf0c      	ite	eq
 800ad58:	6032      	streq	r2, [r6, #0]
 800ad5a:	605a      	strne	r2, [r3, #4]
 800ad5c:	e7ec      	b.n	800ad38 <_malloc_r+0xa0>
 800ad5e:	4623      	mov	r3, r4
 800ad60:	6864      	ldr	r4, [r4, #4]
 800ad62:	e7b2      	b.n	800acca <_malloc_r+0x32>
 800ad64:	4634      	mov	r4, r6
 800ad66:	6876      	ldr	r6, [r6, #4]
 800ad68:	e7b9      	b.n	800acde <_malloc_r+0x46>
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	603b      	str	r3, [r7, #0]
 800ad6e:	4638      	mov	r0, r7
 800ad70:	f001 fc46 	bl	800c600 <__malloc_unlock>
 800ad74:	e7a1      	b.n	800acba <_malloc_r+0x22>
 800ad76:	6025      	str	r5, [r4, #0]
 800ad78:	e7de      	b.n	800ad38 <_malloc_r+0xa0>
 800ad7a:	bf00      	nop
 800ad7c:	20005118 	.word	0x20005118

0800ad80 <__cvt>:
 800ad80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	ec55 4b10 	vmov	r4, r5, d0
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	460e      	mov	r6, r1
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	462b      	mov	r3, r5
 800ad90:	bfbb      	ittet	lt
 800ad92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad96:	461d      	movlt	r5, r3
 800ad98:	2300      	movge	r3, #0
 800ad9a:	232d      	movlt	r3, #45	; 0x2d
 800ad9c:	700b      	strb	r3, [r1, #0]
 800ad9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ada0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ada4:	4691      	mov	r9, r2
 800ada6:	f023 0820 	bic.w	r8, r3, #32
 800adaa:	bfbc      	itt	lt
 800adac:	4622      	movlt	r2, r4
 800adae:	4614      	movlt	r4, r2
 800adb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adb4:	d005      	beq.n	800adc2 <__cvt+0x42>
 800adb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800adba:	d100      	bne.n	800adbe <__cvt+0x3e>
 800adbc:	3601      	adds	r6, #1
 800adbe:	2102      	movs	r1, #2
 800adc0:	e000      	b.n	800adc4 <__cvt+0x44>
 800adc2:	2103      	movs	r1, #3
 800adc4:	ab03      	add	r3, sp, #12
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	ab02      	add	r3, sp, #8
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	ec45 4b10 	vmov	d0, r4, r5
 800add0:	4653      	mov	r3, sl
 800add2:	4632      	mov	r2, r6
 800add4:	f000 fd40 	bl	800b858 <_dtoa_r>
 800add8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800addc:	4607      	mov	r7, r0
 800adde:	d102      	bne.n	800ade6 <__cvt+0x66>
 800ade0:	f019 0f01 	tst.w	r9, #1
 800ade4:	d022      	beq.n	800ae2c <__cvt+0xac>
 800ade6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adea:	eb07 0906 	add.w	r9, r7, r6
 800adee:	d110      	bne.n	800ae12 <__cvt+0x92>
 800adf0:	783b      	ldrb	r3, [r7, #0]
 800adf2:	2b30      	cmp	r3, #48	; 0x30
 800adf4:	d10a      	bne.n	800ae0c <__cvt+0x8c>
 800adf6:	2200      	movs	r2, #0
 800adf8:	2300      	movs	r3, #0
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae02:	b918      	cbnz	r0, 800ae0c <__cvt+0x8c>
 800ae04:	f1c6 0601 	rsb	r6, r6, #1
 800ae08:	f8ca 6000 	str.w	r6, [sl]
 800ae0c:	f8da 3000 	ldr.w	r3, [sl]
 800ae10:	4499      	add	r9, r3
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	4620      	mov	r0, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7f5 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae1e:	b108      	cbz	r0, 800ae24 <__cvt+0xa4>
 800ae20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae24:	2230      	movs	r2, #48	; 0x30
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	454b      	cmp	r3, r9
 800ae2a:	d307      	bcc.n	800ae3c <__cvt+0xbc>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae30:	1bdb      	subs	r3, r3, r7
 800ae32:	4638      	mov	r0, r7
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	b004      	add	sp, #16
 800ae38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3c:	1c59      	adds	r1, r3, #1
 800ae3e:	9103      	str	r1, [sp, #12]
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	e7f0      	b.n	800ae26 <__cvt+0xa6>

0800ae44 <__exponent>:
 800ae44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae46:	4603      	mov	r3, r0
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	bfb8      	it	lt
 800ae4c:	4249      	neglt	r1, r1
 800ae4e:	f803 2b02 	strb.w	r2, [r3], #2
 800ae52:	bfb4      	ite	lt
 800ae54:	222d      	movlt	r2, #45	; 0x2d
 800ae56:	222b      	movge	r2, #43	; 0x2b
 800ae58:	2909      	cmp	r1, #9
 800ae5a:	7042      	strb	r2, [r0, #1]
 800ae5c:	dd2a      	ble.n	800aeb4 <__exponent+0x70>
 800ae5e:	f10d 0407 	add.w	r4, sp, #7
 800ae62:	46a4      	mov	ip, r4
 800ae64:	270a      	movs	r7, #10
 800ae66:	46a6      	mov	lr, r4
 800ae68:	460a      	mov	r2, r1
 800ae6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae6e:	fb07 1516 	mls	r5, r7, r6, r1
 800ae72:	3530      	adds	r5, #48	; 0x30
 800ae74:	2a63      	cmp	r2, #99	; 0x63
 800ae76:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae7e:	4631      	mov	r1, r6
 800ae80:	dcf1      	bgt.n	800ae66 <__exponent+0x22>
 800ae82:	3130      	adds	r1, #48	; 0x30
 800ae84:	f1ae 0502 	sub.w	r5, lr, #2
 800ae88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae8c:	1c44      	adds	r4, r0, #1
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4561      	cmp	r1, ip
 800ae92:	d30a      	bcc.n	800aeaa <__exponent+0x66>
 800ae94:	f10d 0209 	add.w	r2, sp, #9
 800ae98:	eba2 020e 	sub.w	r2, r2, lr
 800ae9c:	4565      	cmp	r5, ip
 800ae9e:	bf88      	it	hi
 800aea0:	2200      	movhi	r2, #0
 800aea2:	4413      	add	r3, r2
 800aea4:	1a18      	subs	r0, r3, r0
 800aea6:	b003      	add	sp, #12
 800aea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aeb2:	e7ed      	b.n	800ae90 <__exponent+0x4c>
 800aeb4:	2330      	movs	r3, #48	; 0x30
 800aeb6:	3130      	adds	r1, #48	; 0x30
 800aeb8:	7083      	strb	r3, [r0, #2]
 800aeba:	70c1      	strb	r1, [r0, #3]
 800aebc:	1d03      	adds	r3, r0, #4
 800aebe:	e7f1      	b.n	800aea4 <__exponent+0x60>

0800aec0 <_printf_float>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	ed2d 8b02 	vpush	{d8}
 800aec8:	b08d      	sub	sp, #52	; 0x34
 800aeca:	460c      	mov	r4, r1
 800aecc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aed0:	4616      	mov	r6, r2
 800aed2:	461f      	mov	r7, r3
 800aed4:	4605      	mov	r5, r0
 800aed6:	f001 fb6f 	bl	800c5b8 <_localeconv_r>
 800aeda:	f8d0 a000 	ldr.w	sl, [r0]
 800aede:	4650      	mov	r0, sl
 800aee0:	f7f5 f976 	bl	80001d0 <strlen>
 800aee4:	2300      	movs	r3, #0
 800aee6:	930a      	str	r3, [sp, #40]	; 0x28
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	9305      	str	r3, [sp, #20]
 800aeec:	f8d8 3000 	ldr.w	r3, [r8]
 800aef0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aef4:	3307      	adds	r3, #7
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	f103 0208 	add.w	r2, r3, #8
 800aefe:	f8c8 2000 	str.w	r2, [r8]
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	f8cd 8018 	str.w	r8, [sp, #24]
 800af18:	ee08 0a10 	vmov	s16, r0
 800af1c:	4b9f      	ldr	r3, [pc, #636]	; (800b19c <_printf_float+0x2dc>)
 800af1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af22:	f04f 32ff 	mov.w	r2, #4294967295
 800af26:	f7f5 fe01 	bl	8000b2c <__aeabi_dcmpun>
 800af2a:	bb88      	cbnz	r0, 800af90 <_printf_float+0xd0>
 800af2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af30:	4b9a      	ldr	r3, [pc, #616]	; (800b19c <_printf_float+0x2dc>)
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	f7f5 fddb 	bl	8000af0 <__aeabi_dcmple>
 800af3a:	bb48      	cbnz	r0, 800af90 <_printf_float+0xd0>
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	4640      	mov	r0, r8
 800af42:	4649      	mov	r1, r9
 800af44:	f7f5 fdca 	bl	8000adc <__aeabi_dcmplt>
 800af48:	b110      	cbz	r0, 800af50 <_printf_float+0x90>
 800af4a:	232d      	movs	r3, #45	; 0x2d
 800af4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af50:	4b93      	ldr	r3, [pc, #588]	; (800b1a0 <_printf_float+0x2e0>)
 800af52:	4894      	ldr	r0, [pc, #592]	; (800b1a4 <_printf_float+0x2e4>)
 800af54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af58:	bf94      	ite	ls
 800af5a:	4698      	movls	r8, r3
 800af5c:	4680      	movhi	r8, r0
 800af5e:	2303      	movs	r3, #3
 800af60:	6123      	str	r3, [r4, #16]
 800af62:	9b05      	ldr	r3, [sp, #20]
 800af64:	f023 0204 	bic.w	r2, r3, #4
 800af68:	6022      	str	r2, [r4, #0]
 800af6a:	f04f 0900 	mov.w	r9, #0
 800af6e:	9700      	str	r7, [sp, #0]
 800af70:	4633      	mov	r3, r6
 800af72:	aa0b      	add	r2, sp, #44	; 0x2c
 800af74:	4621      	mov	r1, r4
 800af76:	4628      	mov	r0, r5
 800af78:	f000 f9d8 	bl	800b32c <_printf_common>
 800af7c:	3001      	adds	r0, #1
 800af7e:	f040 8090 	bne.w	800b0a2 <_printf_float+0x1e2>
 800af82:	f04f 30ff 	mov.w	r0, #4294967295
 800af86:	b00d      	add	sp, #52	; 0x34
 800af88:	ecbd 8b02 	vpop	{d8}
 800af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af90:	4642      	mov	r2, r8
 800af92:	464b      	mov	r3, r9
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f7f5 fdc8 	bl	8000b2c <__aeabi_dcmpun>
 800af9c:	b140      	cbz	r0, 800afb0 <_printf_float+0xf0>
 800af9e:	464b      	mov	r3, r9
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bfbc      	itt	lt
 800afa4:	232d      	movlt	r3, #45	; 0x2d
 800afa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800afaa:	487f      	ldr	r0, [pc, #508]	; (800b1a8 <_printf_float+0x2e8>)
 800afac:	4b7f      	ldr	r3, [pc, #508]	; (800b1ac <_printf_float+0x2ec>)
 800afae:	e7d1      	b.n	800af54 <_printf_float+0x94>
 800afb0:	6863      	ldr	r3, [r4, #4]
 800afb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800afb6:	9206      	str	r2, [sp, #24]
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	d13f      	bne.n	800b03c <_printf_float+0x17c>
 800afbc:	2306      	movs	r3, #6
 800afbe:	6063      	str	r3, [r4, #4]
 800afc0:	9b05      	ldr	r3, [sp, #20]
 800afc2:	6861      	ldr	r1, [r4, #4]
 800afc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afc8:	2300      	movs	r3, #0
 800afca:	9303      	str	r3, [sp, #12]
 800afcc:	ab0a      	add	r3, sp, #40	; 0x28
 800afce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afd2:	ab09      	add	r3, sp, #36	; 0x24
 800afd4:	ec49 8b10 	vmov	d0, r8, r9
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	6022      	str	r2, [r4, #0]
 800afdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afe0:	4628      	mov	r0, r5
 800afe2:	f7ff fecd 	bl	800ad80 <__cvt>
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afea:	2b47      	cmp	r3, #71	; 0x47
 800afec:	4680      	mov	r8, r0
 800afee:	d108      	bne.n	800b002 <_printf_float+0x142>
 800aff0:	1cc8      	adds	r0, r1, #3
 800aff2:	db02      	blt.n	800affa <_printf_float+0x13a>
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	4299      	cmp	r1, r3
 800aff8:	dd41      	ble.n	800b07e <_printf_float+0x1be>
 800affa:	f1ab 0b02 	sub.w	fp, fp, #2
 800affe:	fa5f fb8b 	uxtb.w	fp, fp
 800b002:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b006:	d820      	bhi.n	800b04a <_printf_float+0x18a>
 800b008:	3901      	subs	r1, #1
 800b00a:	465a      	mov	r2, fp
 800b00c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b010:	9109      	str	r1, [sp, #36]	; 0x24
 800b012:	f7ff ff17 	bl	800ae44 <__exponent>
 800b016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b018:	1813      	adds	r3, r2, r0
 800b01a:	2a01      	cmp	r2, #1
 800b01c:	4681      	mov	r9, r0
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	dc02      	bgt.n	800b028 <_printf_float+0x168>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	07d2      	lsls	r2, r2, #31
 800b026:	d501      	bpl.n	800b02c <_printf_float+0x16c>
 800b028:	3301      	adds	r3, #1
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b030:	2b00      	cmp	r3, #0
 800b032:	d09c      	beq.n	800af6e <_printf_float+0xae>
 800b034:	232d      	movs	r3, #45	; 0x2d
 800b036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b03a:	e798      	b.n	800af6e <_printf_float+0xae>
 800b03c:	9a06      	ldr	r2, [sp, #24]
 800b03e:	2a47      	cmp	r2, #71	; 0x47
 800b040:	d1be      	bne.n	800afc0 <_printf_float+0x100>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1bc      	bne.n	800afc0 <_printf_float+0x100>
 800b046:	2301      	movs	r3, #1
 800b048:	e7b9      	b.n	800afbe <_printf_float+0xfe>
 800b04a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b04e:	d118      	bne.n	800b082 <_printf_float+0x1c2>
 800b050:	2900      	cmp	r1, #0
 800b052:	6863      	ldr	r3, [r4, #4]
 800b054:	dd0b      	ble.n	800b06e <_printf_float+0x1ae>
 800b056:	6121      	str	r1, [r4, #16]
 800b058:	b913      	cbnz	r3, 800b060 <_printf_float+0x1a0>
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	07d0      	lsls	r0, r2, #31
 800b05e:	d502      	bpl.n	800b066 <_printf_float+0x1a6>
 800b060:	3301      	adds	r3, #1
 800b062:	440b      	add	r3, r1
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	65a1      	str	r1, [r4, #88]	; 0x58
 800b068:	f04f 0900 	mov.w	r9, #0
 800b06c:	e7de      	b.n	800b02c <_printf_float+0x16c>
 800b06e:	b913      	cbnz	r3, 800b076 <_printf_float+0x1b6>
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	07d2      	lsls	r2, r2, #31
 800b074:	d501      	bpl.n	800b07a <_printf_float+0x1ba>
 800b076:	3302      	adds	r3, #2
 800b078:	e7f4      	b.n	800b064 <_printf_float+0x1a4>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7f2      	b.n	800b064 <_printf_float+0x1a4>
 800b07e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b084:	4299      	cmp	r1, r3
 800b086:	db05      	blt.n	800b094 <_printf_float+0x1d4>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	6121      	str	r1, [r4, #16]
 800b08c:	07d8      	lsls	r0, r3, #31
 800b08e:	d5ea      	bpl.n	800b066 <_printf_float+0x1a6>
 800b090:	1c4b      	adds	r3, r1, #1
 800b092:	e7e7      	b.n	800b064 <_printf_float+0x1a4>
 800b094:	2900      	cmp	r1, #0
 800b096:	bfd4      	ite	le
 800b098:	f1c1 0202 	rsble	r2, r1, #2
 800b09c:	2201      	movgt	r2, #1
 800b09e:	4413      	add	r3, r2
 800b0a0:	e7e0      	b.n	800b064 <_printf_float+0x1a4>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	055a      	lsls	r2, r3, #21
 800b0a6:	d407      	bmi.n	800b0b8 <_printf_float+0x1f8>
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d12c      	bne.n	800b110 <_printf_float+0x250>
 800b0b6:	e764      	b.n	800af82 <_printf_float+0xc2>
 800b0b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0bc:	f240 80e0 	bls.w	800b280 <_printf_float+0x3c0>
 800b0c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f7f5 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d034      	beq.n	800b13a <_printf_float+0x27a>
 800b0d0:	4a37      	ldr	r2, [pc, #220]	; (800b1b0 <_printf_float+0x2f0>)
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	47b8      	blx	r7
 800b0da:	3001      	adds	r0, #1
 800b0dc:	f43f af51 	beq.w	800af82 <_printf_float+0xc2>
 800b0e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	db02      	blt.n	800b0ee <_printf_float+0x22e>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	07d8      	lsls	r0, r3, #31
 800b0ec:	d510      	bpl.n	800b110 <_printf_float+0x250>
 800b0ee:	ee18 3a10 	vmov	r3, s16
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f af41 	beq.w	800af82 <_printf_float+0xc2>
 800b100:	f04f 0800 	mov.w	r8, #0
 800b104:	f104 091a 	add.w	r9, r4, #26
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	3b01      	subs	r3, #1
 800b10c:	4543      	cmp	r3, r8
 800b10e:	dc09      	bgt.n	800b124 <_printf_float+0x264>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	079b      	lsls	r3, r3, #30
 800b114:	f100 8105 	bmi.w	800b322 <_printf_float+0x462>
 800b118:	68e0      	ldr	r0, [r4, #12]
 800b11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11c:	4298      	cmp	r0, r3
 800b11e:	bfb8      	it	lt
 800b120:	4618      	movlt	r0, r3
 800b122:	e730      	b.n	800af86 <_printf_float+0xc6>
 800b124:	2301      	movs	r3, #1
 800b126:	464a      	mov	r2, r9
 800b128:	4631      	mov	r1, r6
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b8      	blx	r7
 800b12e:	3001      	adds	r0, #1
 800b130:	f43f af27 	beq.w	800af82 <_printf_float+0xc2>
 800b134:	f108 0801 	add.w	r8, r8, #1
 800b138:	e7e6      	b.n	800b108 <_printf_float+0x248>
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dc39      	bgt.n	800b1b4 <_printf_float+0x2f4>
 800b140:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <_printf_float+0x2f0>)
 800b142:	2301      	movs	r3, #1
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	f43f af19 	beq.w	800af82 <_printf_float+0xc2>
 800b150:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b154:	4313      	orrs	r3, r2
 800b156:	d102      	bne.n	800b15e <_printf_float+0x29e>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	d5d8      	bpl.n	800b110 <_printf_float+0x250>
 800b15e:	ee18 3a10 	vmov	r3, s16
 800b162:	4652      	mov	r2, sl
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f af09 	beq.w	800af82 <_printf_float+0xc2>
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	f104 0a1a 	add.w	sl, r4, #26
 800b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17a:	425b      	negs	r3, r3
 800b17c:	454b      	cmp	r3, r9
 800b17e:	dc01      	bgt.n	800b184 <_printf_float+0x2c4>
 800b180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b182:	e792      	b.n	800b0aa <_printf_float+0x1ea>
 800b184:	2301      	movs	r3, #1
 800b186:	4652      	mov	r2, sl
 800b188:	4631      	mov	r1, r6
 800b18a:	4628      	mov	r0, r5
 800b18c:	47b8      	blx	r7
 800b18e:	3001      	adds	r0, #1
 800b190:	f43f aef7 	beq.w	800af82 <_printf_float+0xc2>
 800b194:	f109 0901 	add.w	r9, r9, #1
 800b198:	e7ee      	b.n	800b178 <_printf_float+0x2b8>
 800b19a:	bf00      	nop
 800b19c:	7fefffff 	.word	0x7fefffff
 800b1a0:	080104b8 	.word	0x080104b8
 800b1a4:	080104bc 	.word	0x080104bc
 800b1a8:	080104c4 	.word	0x080104c4
 800b1ac:	080104c0 	.word	0x080104c0
 800b1b0:	080104c8 	.word	0x080104c8
 800b1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	bfa8      	it	ge
 800b1bc:	461a      	movge	r2, r3
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	4691      	mov	r9, r2
 800b1c2:	dc37      	bgt.n	800b234 <_printf_float+0x374>
 800b1c4:	f04f 0b00 	mov.w	fp, #0
 800b1c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1cc:	f104 021a 	add.w	r2, r4, #26
 800b1d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	eba3 0309 	sub.w	r3, r3, r9
 800b1d8:	455b      	cmp	r3, fp
 800b1da:	dc33      	bgt.n	800b244 <_printf_float+0x384>
 800b1dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	db3b      	blt.n	800b25c <_printf_float+0x39c>
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	07da      	lsls	r2, r3, #31
 800b1e8:	d438      	bmi.n	800b25c <_printf_float+0x39c>
 800b1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ec:	9a05      	ldr	r2, [sp, #20]
 800b1ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1f0:	1a9a      	subs	r2, r3, r2
 800b1f2:	eba3 0901 	sub.w	r9, r3, r1
 800b1f6:	4591      	cmp	r9, r2
 800b1f8:	bfa8      	it	ge
 800b1fa:	4691      	movge	r9, r2
 800b1fc:	f1b9 0f00 	cmp.w	r9, #0
 800b200:	dc35      	bgt.n	800b26e <_printf_float+0x3ae>
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b20a:	f104 0a1a 	add.w	sl, r4, #26
 800b20e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b212:	1a9b      	subs	r3, r3, r2
 800b214:	eba3 0309 	sub.w	r3, r3, r9
 800b218:	4543      	cmp	r3, r8
 800b21a:	f77f af79 	ble.w	800b110 <_printf_float+0x250>
 800b21e:	2301      	movs	r3, #1
 800b220:	4652      	mov	r2, sl
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f aeaa 	beq.w	800af82 <_printf_float+0xc2>
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	e7ec      	b.n	800b20e <_printf_float+0x34e>
 800b234:	4613      	mov	r3, r2
 800b236:	4631      	mov	r1, r6
 800b238:	4642      	mov	r2, r8
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	d1c0      	bne.n	800b1c4 <_printf_float+0x304>
 800b242:	e69e      	b.n	800af82 <_printf_float+0xc2>
 800b244:	2301      	movs	r3, #1
 800b246:	4631      	mov	r1, r6
 800b248:	4628      	mov	r0, r5
 800b24a:	9205      	str	r2, [sp, #20]
 800b24c:	47b8      	blx	r7
 800b24e:	3001      	adds	r0, #1
 800b250:	f43f ae97 	beq.w	800af82 <_printf_float+0xc2>
 800b254:	9a05      	ldr	r2, [sp, #20]
 800b256:	f10b 0b01 	add.w	fp, fp, #1
 800b25a:	e7b9      	b.n	800b1d0 <_printf_float+0x310>
 800b25c:	ee18 3a10 	vmov	r3, s16
 800b260:	4652      	mov	r2, sl
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	47b8      	blx	r7
 800b268:	3001      	adds	r0, #1
 800b26a:	d1be      	bne.n	800b1ea <_printf_float+0x32a>
 800b26c:	e689      	b.n	800af82 <_printf_float+0xc2>
 800b26e:	9a05      	ldr	r2, [sp, #20]
 800b270:	464b      	mov	r3, r9
 800b272:	4442      	add	r2, r8
 800b274:	4631      	mov	r1, r6
 800b276:	4628      	mov	r0, r5
 800b278:	47b8      	blx	r7
 800b27a:	3001      	adds	r0, #1
 800b27c:	d1c1      	bne.n	800b202 <_printf_float+0x342>
 800b27e:	e680      	b.n	800af82 <_printf_float+0xc2>
 800b280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b282:	2a01      	cmp	r2, #1
 800b284:	dc01      	bgt.n	800b28a <_printf_float+0x3ca>
 800b286:	07db      	lsls	r3, r3, #31
 800b288:	d538      	bpl.n	800b2fc <_printf_float+0x43c>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4642      	mov	r2, r8
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f ae74 	beq.w	800af82 <_printf_float+0xc2>
 800b29a:	ee18 3a10 	vmov	r3, s16
 800b29e:	4652      	mov	r2, sl
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f43f ae6b 	beq.w	800af82 <_printf_float+0xc2>
 800b2ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f7f5 fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2b8:	b9d8      	cbnz	r0, 800b2f2 <_printf_float+0x432>
 800b2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2bc:	f108 0201 	add.w	r2, r8, #1
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d10e      	bne.n	800b2ea <_printf_float+0x42a>
 800b2cc:	e659      	b.n	800af82 <_printf_float+0xc2>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f43f ae52 	beq.w	800af82 <_printf_float+0xc2>
 800b2de:	f108 0801 	add.w	r8, r8, #1
 800b2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	4543      	cmp	r3, r8
 800b2e8:	dcf1      	bgt.n	800b2ce <_printf_float+0x40e>
 800b2ea:	464b      	mov	r3, r9
 800b2ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2f0:	e6dc      	b.n	800b0ac <_printf_float+0x1ec>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	f104 0a1a 	add.w	sl, r4, #26
 800b2fa:	e7f2      	b.n	800b2e2 <_printf_float+0x422>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4642      	mov	r2, r8
 800b300:	e7df      	b.n	800b2c2 <_printf_float+0x402>
 800b302:	2301      	movs	r3, #1
 800b304:	464a      	mov	r2, r9
 800b306:	4631      	mov	r1, r6
 800b308:	4628      	mov	r0, r5
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	f43f ae38 	beq.w	800af82 <_printf_float+0xc2>
 800b312:	f108 0801 	add.w	r8, r8, #1
 800b316:	68e3      	ldr	r3, [r4, #12]
 800b318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b31a:	1a5b      	subs	r3, r3, r1
 800b31c:	4543      	cmp	r3, r8
 800b31e:	dcf0      	bgt.n	800b302 <_printf_float+0x442>
 800b320:	e6fa      	b.n	800b118 <_printf_float+0x258>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	f104 0919 	add.w	r9, r4, #25
 800b32a:	e7f4      	b.n	800b316 <_printf_float+0x456>

0800b32c <_printf_common>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	4616      	mov	r6, r2
 800b332:	4699      	mov	r9, r3
 800b334:	688a      	ldr	r2, [r1, #8]
 800b336:	690b      	ldr	r3, [r1, #16]
 800b338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bfb8      	it	lt
 800b340:	4613      	movlt	r3, r2
 800b342:	6033      	str	r3, [r6, #0]
 800b344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b348:	4607      	mov	r7, r0
 800b34a:	460c      	mov	r4, r1
 800b34c:	b10a      	cbz	r2, 800b352 <_printf_common+0x26>
 800b34e:	3301      	adds	r3, #1
 800b350:	6033      	str	r3, [r6, #0]
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	0699      	lsls	r1, r3, #26
 800b356:	bf42      	ittt	mi
 800b358:	6833      	ldrmi	r3, [r6, #0]
 800b35a:	3302      	addmi	r3, #2
 800b35c:	6033      	strmi	r3, [r6, #0]
 800b35e:	6825      	ldr	r5, [r4, #0]
 800b360:	f015 0506 	ands.w	r5, r5, #6
 800b364:	d106      	bne.n	800b374 <_printf_common+0x48>
 800b366:	f104 0a19 	add.w	sl, r4, #25
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	6832      	ldr	r2, [r6, #0]
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc26      	bgt.n	800b3c2 <_printf_common+0x96>
 800b374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b378:	1e13      	subs	r3, r2, #0
 800b37a:	6822      	ldr	r2, [r4, #0]
 800b37c:	bf18      	it	ne
 800b37e:	2301      	movne	r3, #1
 800b380:	0692      	lsls	r2, r2, #26
 800b382:	d42b      	bmi.n	800b3dc <_printf_common+0xb0>
 800b384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b388:	4649      	mov	r1, r9
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	3001      	adds	r0, #1
 800b390:	d01e      	beq.n	800b3d0 <_printf_common+0xa4>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	68e5      	ldr	r5, [r4, #12]
 800b396:	6832      	ldr	r2, [r6, #0]
 800b398:	f003 0306 	and.w	r3, r3, #6
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	bf08      	it	eq
 800b3a0:	1aad      	subeq	r5, r5, r2
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	bf0c      	ite	eq
 800b3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ac:	2500      	movne	r5, #0
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	bfc4      	itt	gt
 800b3b2:	1a9b      	subgt	r3, r3, r2
 800b3b4:	18ed      	addgt	r5, r5, r3
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	341a      	adds	r4, #26
 800b3ba:	42b5      	cmp	r5, r6
 800b3bc:	d11a      	bne.n	800b3f4 <_printf_common+0xc8>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e008      	b.n	800b3d4 <_printf_common+0xa8>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	47c0      	blx	r8
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d103      	bne.n	800b3d8 <_printf_common+0xac>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	3501      	adds	r5, #1
 800b3da:	e7c6      	b.n	800b36a <_printf_common+0x3e>
 800b3dc:	18e1      	adds	r1, r4, r3
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	2030      	movs	r0, #48	; 0x30
 800b3e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3e6:	4422      	add	r2, r4
 800b3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7c7      	b.n	800b384 <_printf_common+0x58>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c0      	blx	r8
 800b3fe:	3001      	adds	r0, #1
 800b400:	d0e6      	beq.n	800b3d0 <_printf_common+0xa4>
 800b402:	3601      	adds	r6, #1
 800b404:	e7d9      	b.n	800b3ba <_printf_common+0x8e>
	...

0800b408 <_printf_i>:
 800b408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	7e0f      	ldrb	r7, [r1, #24]
 800b40e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b410:	2f78      	cmp	r7, #120	; 0x78
 800b412:	4691      	mov	r9, r2
 800b414:	4680      	mov	r8, r0
 800b416:	460c      	mov	r4, r1
 800b418:	469a      	mov	sl, r3
 800b41a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b41e:	d807      	bhi.n	800b430 <_printf_i+0x28>
 800b420:	2f62      	cmp	r7, #98	; 0x62
 800b422:	d80a      	bhi.n	800b43a <_printf_i+0x32>
 800b424:	2f00      	cmp	r7, #0
 800b426:	f000 80d8 	beq.w	800b5da <_printf_i+0x1d2>
 800b42a:	2f58      	cmp	r7, #88	; 0x58
 800b42c:	f000 80a3 	beq.w	800b576 <_printf_i+0x16e>
 800b430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b438:	e03a      	b.n	800b4b0 <_printf_i+0xa8>
 800b43a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b43e:	2b15      	cmp	r3, #21
 800b440:	d8f6      	bhi.n	800b430 <_printf_i+0x28>
 800b442:	a101      	add	r1, pc, #4	; (adr r1, 800b448 <_printf_i+0x40>)
 800b444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4b5 	.word	0x0800b4b5
 800b450:	0800b431 	.word	0x0800b431
 800b454:	0800b431 	.word	0x0800b431
 800b458:	0800b431 	.word	0x0800b431
 800b45c:	0800b431 	.word	0x0800b431
 800b460:	0800b4b5 	.word	0x0800b4b5
 800b464:	0800b431 	.word	0x0800b431
 800b468:	0800b431 	.word	0x0800b431
 800b46c:	0800b431 	.word	0x0800b431
 800b470:	0800b431 	.word	0x0800b431
 800b474:	0800b5c1 	.word	0x0800b5c1
 800b478:	0800b4e5 	.word	0x0800b4e5
 800b47c:	0800b5a3 	.word	0x0800b5a3
 800b480:	0800b431 	.word	0x0800b431
 800b484:	0800b431 	.word	0x0800b431
 800b488:	0800b5e3 	.word	0x0800b5e3
 800b48c:	0800b431 	.word	0x0800b431
 800b490:	0800b4e5 	.word	0x0800b4e5
 800b494:	0800b431 	.word	0x0800b431
 800b498:	0800b431 	.word	0x0800b431
 800b49c:	0800b5ab 	.word	0x0800b5ab
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	602a      	str	r2, [r5, #0]
 800b4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0a3      	b.n	800b5fc <_printf_i+0x1f4>
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	6829      	ldr	r1, [r5, #0]
 800b4b8:	0606      	lsls	r6, r0, #24
 800b4ba:	f101 0304 	add.w	r3, r1, #4
 800b4be:	d50a      	bpl.n	800b4d6 <_printf_i+0xce>
 800b4c0:	680e      	ldr	r6, [r1, #0]
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	da03      	bge.n	800b4d0 <_printf_i+0xc8>
 800b4c8:	232d      	movs	r3, #45	; 0x2d
 800b4ca:	4276      	negs	r6, r6
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d0:	485e      	ldr	r0, [pc, #376]	; (800b64c <_printf_i+0x244>)
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e019      	b.n	800b50a <_printf_i+0x102>
 800b4d6:	680e      	ldr	r6, [r1, #0]
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4de:	bf18      	it	ne
 800b4e0:	b236      	sxthne	r6, r6
 800b4e2:	e7ef      	b.n	800b4c4 <_printf_i+0xbc>
 800b4e4:	682b      	ldr	r3, [r5, #0]
 800b4e6:	6820      	ldr	r0, [r4, #0]
 800b4e8:	1d19      	adds	r1, r3, #4
 800b4ea:	6029      	str	r1, [r5, #0]
 800b4ec:	0601      	lsls	r1, r0, #24
 800b4ee:	d501      	bpl.n	800b4f4 <_printf_i+0xec>
 800b4f0:	681e      	ldr	r6, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <_printf_i+0xf2>
 800b4f4:	0646      	lsls	r6, r0, #25
 800b4f6:	d5fb      	bpl.n	800b4f0 <_printf_i+0xe8>
 800b4f8:	881e      	ldrh	r6, [r3, #0]
 800b4fa:	4854      	ldr	r0, [pc, #336]	; (800b64c <_printf_i+0x244>)
 800b4fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b4fe:	bf0c      	ite	eq
 800b500:	2308      	moveq	r3, #8
 800b502:	230a      	movne	r3, #10
 800b504:	2100      	movs	r1, #0
 800b506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b50a:	6865      	ldr	r5, [r4, #4]
 800b50c:	60a5      	str	r5, [r4, #8]
 800b50e:	2d00      	cmp	r5, #0
 800b510:	bfa2      	ittt	ge
 800b512:	6821      	ldrge	r1, [r4, #0]
 800b514:	f021 0104 	bicge.w	r1, r1, #4
 800b518:	6021      	strge	r1, [r4, #0]
 800b51a:	b90e      	cbnz	r6, 800b520 <_printf_i+0x118>
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	d04d      	beq.n	800b5bc <_printf_i+0x1b4>
 800b520:	4615      	mov	r5, r2
 800b522:	fbb6 f1f3 	udiv	r1, r6, r3
 800b526:	fb03 6711 	mls	r7, r3, r1, r6
 800b52a:	5dc7      	ldrb	r7, [r0, r7]
 800b52c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b530:	4637      	mov	r7, r6
 800b532:	42bb      	cmp	r3, r7
 800b534:	460e      	mov	r6, r1
 800b536:	d9f4      	bls.n	800b522 <_printf_i+0x11a>
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d10b      	bne.n	800b554 <_printf_i+0x14c>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	07de      	lsls	r6, r3, #31
 800b540:	d508      	bpl.n	800b554 <_printf_i+0x14c>
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	4299      	cmp	r1, r3
 800b548:	bfde      	ittt	le
 800b54a:	2330      	movle	r3, #48	; 0x30
 800b54c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b550:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b554:	1b52      	subs	r2, r2, r5
 800b556:	6122      	str	r2, [r4, #16]
 800b558:	f8cd a000 	str.w	sl, [sp]
 800b55c:	464b      	mov	r3, r9
 800b55e:	aa03      	add	r2, sp, #12
 800b560:	4621      	mov	r1, r4
 800b562:	4640      	mov	r0, r8
 800b564:	f7ff fee2 	bl	800b32c <_printf_common>
 800b568:	3001      	adds	r0, #1
 800b56a:	d14c      	bne.n	800b606 <_printf_i+0x1fe>
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	b004      	add	sp, #16
 800b572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b576:	4835      	ldr	r0, [pc, #212]	; (800b64c <_printf_i+0x244>)
 800b578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b57c:	6829      	ldr	r1, [r5, #0]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	f851 6b04 	ldr.w	r6, [r1], #4
 800b584:	6029      	str	r1, [r5, #0]
 800b586:	061d      	lsls	r5, r3, #24
 800b588:	d514      	bpl.n	800b5b4 <_printf_i+0x1ac>
 800b58a:	07df      	lsls	r7, r3, #31
 800b58c:	bf44      	itt	mi
 800b58e:	f043 0320 	orrmi.w	r3, r3, #32
 800b592:	6023      	strmi	r3, [r4, #0]
 800b594:	b91e      	cbnz	r6, 800b59e <_printf_i+0x196>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2310      	movs	r3, #16
 800b5a0:	e7b0      	b.n	800b504 <_printf_i+0xfc>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	f043 0320 	orr.w	r3, r3, #32
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	2378      	movs	r3, #120	; 0x78
 800b5ac:	4828      	ldr	r0, [pc, #160]	; (800b650 <_printf_i+0x248>)
 800b5ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5b2:	e7e3      	b.n	800b57c <_printf_i+0x174>
 800b5b4:	0659      	lsls	r1, r3, #25
 800b5b6:	bf48      	it	mi
 800b5b8:	b2b6      	uxthmi	r6, r6
 800b5ba:	e7e6      	b.n	800b58a <_printf_i+0x182>
 800b5bc:	4615      	mov	r5, r2
 800b5be:	e7bb      	b.n	800b538 <_printf_i+0x130>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	6826      	ldr	r6, [r4, #0]
 800b5c4:	6961      	ldr	r1, [r4, #20]
 800b5c6:	1d18      	adds	r0, r3, #4
 800b5c8:	6028      	str	r0, [r5, #0]
 800b5ca:	0635      	lsls	r5, r6, #24
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	d501      	bpl.n	800b5d4 <_printf_i+0x1cc>
 800b5d0:	6019      	str	r1, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <_printf_i+0x1d2>
 800b5d4:	0670      	lsls	r0, r6, #25
 800b5d6:	d5fb      	bpl.n	800b5d0 <_printf_i+0x1c8>
 800b5d8:	8019      	strh	r1, [r3, #0]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	4615      	mov	r5, r2
 800b5e0:	e7ba      	b.n	800b558 <_printf_i+0x150>
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	1d1a      	adds	r2, r3, #4
 800b5e6:	602a      	str	r2, [r5, #0]
 800b5e8:	681d      	ldr	r5, [r3, #0]
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7f4 fdf6 	bl	80001e0 <memchr>
 800b5f4:	b108      	cbz	r0, 800b5fa <_printf_i+0x1f2>
 800b5f6:	1b40      	subs	r0, r0, r5
 800b5f8:	6060      	str	r0, [r4, #4]
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	2300      	movs	r3, #0
 800b600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b604:	e7a8      	b.n	800b558 <_printf_i+0x150>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	462a      	mov	r2, r5
 800b60a:	4649      	mov	r1, r9
 800b60c:	4640      	mov	r0, r8
 800b60e:	47d0      	blx	sl
 800b610:	3001      	adds	r0, #1
 800b612:	d0ab      	beq.n	800b56c <_printf_i+0x164>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	d413      	bmi.n	800b642 <_printf_i+0x23a>
 800b61a:	68e0      	ldr	r0, [r4, #12]
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	4298      	cmp	r0, r3
 800b620:	bfb8      	it	lt
 800b622:	4618      	movlt	r0, r3
 800b624:	e7a4      	b.n	800b570 <_printf_i+0x168>
 800b626:	2301      	movs	r3, #1
 800b628:	4632      	mov	r2, r6
 800b62a:	4649      	mov	r1, r9
 800b62c:	4640      	mov	r0, r8
 800b62e:	47d0      	blx	sl
 800b630:	3001      	adds	r0, #1
 800b632:	d09b      	beq.n	800b56c <_printf_i+0x164>
 800b634:	3501      	adds	r5, #1
 800b636:	68e3      	ldr	r3, [r4, #12]
 800b638:	9903      	ldr	r1, [sp, #12]
 800b63a:	1a5b      	subs	r3, r3, r1
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	dcf2      	bgt.n	800b626 <_printf_i+0x21e>
 800b640:	e7eb      	b.n	800b61a <_printf_i+0x212>
 800b642:	2500      	movs	r5, #0
 800b644:	f104 0619 	add.w	r6, r4, #25
 800b648:	e7f5      	b.n	800b636 <_printf_i+0x22e>
 800b64a:	bf00      	nop
 800b64c:	080104ca 	.word	0x080104ca
 800b650:	080104db 	.word	0x080104db

0800b654 <_sbrk_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4d06      	ldr	r5, [pc, #24]	; (800b670 <_sbrk_r+0x1c>)
 800b658:	2300      	movs	r3, #0
 800b65a:	4604      	mov	r4, r0
 800b65c:	4608      	mov	r0, r1
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	f7f6 fbca 	bl	8001df8 <_sbrk>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_sbrk_r+0x1a>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_sbrk_r+0x1a>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	20005120 	.word	0x20005120

0800b674 <__sread>:
 800b674:	b510      	push	{r4, lr}
 800b676:	460c      	mov	r4, r1
 800b678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67c:	f001 fbac 	bl	800cdd8 <_read_r>
 800b680:	2800      	cmp	r0, #0
 800b682:	bfab      	itete	ge
 800b684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b686:	89a3      	ldrhlt	r3, [r4, #12]
 800b688:	181b      	addge	r3, r3, r0
 800b68a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b68e:	bfac      	ite	ge
 800b690:	6563      	strge	r3, [r4, #84]	; 0x54
 800b692:	81a3      	strhlt	r3, [r4, #12]
 800b694:	bd10      	pop	{r4, pc}

0800b696 <__swrite>:
 800b696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69a:	461f      	mov	r7, r3
 800b69c:	898b      	ldrh	r3, [r1, #12]
 800b69e:	05db      	lsls	r3, r3, #23
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	d505      	bpl.n	800b6b4 <__swrite+0x1e>
 800b6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f000 ff86 	bl	800c5c0 <_lseek_r>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6be:	81a3      	strh	r3, [r4, #12]
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ca:	f000 b817 	b.w	800b6fc <_write_r>

0800b6ce <__sseek>:
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d6:	f000 ff73 	bl	800c5c0 <_lseek_r>
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	bf15      	itete	ne
 800b6e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6ea:	81a3      	strheq	r3, [r4, #12]
 800b6ec:	bf18      	it	ne
 800b6ee:	81a3      	strhne	r3, [r4, #12]
 800b6f0:	bd10      	pop	{r4, pc}

0800b6f2 <__sclose>:
 800b6f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f6:	f000 b813 	b.w	800b720 <_close_r>
	...

0800b6fc <_write_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_write_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7fe ff6d 	bl	800a5ea <_write>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_write_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_write_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	20005120 	.word	0x20005120

0800b720 <_close_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_close_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7fe ff8e 	bl	800a64c <_close>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_close_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_close_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20005120 	.word	0x20005120

0800b740 <quorem>:
 800b740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	6903      	ldr	r3, [r0, #16]
 800b746:	690c      	ldr	r4, [r1, #16]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	4607      	mov	r7, r0
 800b74c:	f2c0 8081 	blt.w	800b852 <quorem+0x112>
 800b750:	3c01      	subs	r4, #1
 800b752:	f101 0814 	add.w	r8, r1, #20
 800b756:	f100 0514 	add.w	r5, r0, #20
 800b75a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b768:	3301      	adds	r3, #1
 800b76a:	429a      	cmp	r2, r3
 800b76c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b774:	fbb2 f6f3 	udiv	r6, r2, r3
 800b778:	d331      	bcc.n	800b7de <quorem+0x9e>
 800b77a:	f04f 0e00 	mov.w	lr, #0
 800b77e:	4640      	mov	r0, r8
 800b780:	46ac      	mov	ip, r5
 800b782:	46f2      	mov	sl, lr
 800b784:	f850 2b04 	ldr.w	r2, [r0], #4
 800b788:	b293      	uxth	r3, r2
 800b78a:	fb06 e303 	mla	r3, r6, r3, lr
 800b78e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b792:	b29b      	uxth	r3, r3
 800b794:	ebaa 0303 	sub.w	r3, sl, r3
 800b798:	f8dc a000 	ldr.w	sl, [ip]
 800b79c:	0c12      	lsrs	r2, r2, #16
 800b79e:	fa13 f38a 	uxtah	r3, r3, sl
 800b7a2:	fb06 e202 	mla	r2, r6, r2, lr
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	9b00      	ldr	r3, [sp, #0]
 800b7aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7bc:	4581      	cmp	r9, r0
 800b7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b7c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7ca:	d2db      	bcs.n	800b784 <quorem+0x44>
 800b7cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7d0:	b92b      	cbnz	r3, 800b7de <quorem+0x9e>
 800b7d2:	9b01      	ldr	r3, [sp, #4]
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	461a      	mov	r2, r3
 800b7da:	d32e      	bcc.n	800b83a <quorem+0xfa>
 800b7dc:	613c      	str	r4, [r7, #16]
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f001 f996 	bl	800cb10 <__mcmp>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	db24      	blt.n	800b832 <quorem+0xf2>
 800b7e8:	3601      	adds	r6, #1
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f04f 0c00 	mov.w	ip, #0
 800b7f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7f4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7f8:	b293      	uxth	r3, r2
 800b7fa:	ebac 0303 	sub.w	r3, ip, r3
 800b7fe:	0c12      	lsrs	r2, r2, #16
 800b800:	fa13 f38e 	uxtah	r3, r3, lr
 800b804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b812:	45c1      	cmp	r9, r8
 800b814:	f840 3b04 	str.w	r3, [r0], #4
 800b818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b81c:	d2e8      	bcs.n	800b7f0 <quorem+0xb0>
 800b81e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b826:	b922      	cbnz	r2, 800b832 <quorem+0xf2>
 800b828:	3b04      	subs	r3, #4
 800b82a:	429d      	cmp	r5, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	d30a      	bcc.n	800b846 <quorem+0x106>
 800b830:	613c      	str	r4, [r7, #16]
 800b832:	4630      	mov	r0, r6
 800b834:	b003      	add	sp, #12
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	2a00      	cmp	r2, #0
 800b840:	d1cc      	bne.n	800b7dc <quorem+0x9c>
 800b842:	3c01      	subs	r4, #1
 800b844:	e7c7      	b.n	800b7d6 <quorem+0x96>
 800b846:	6812      	ldr	r2, [r2, #0]
 800b848:	3b04      	subs	r3, #4
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1f0      	bne.n	800b830 <quorem+0xf0>
 800b84e:	3c01      	subs	r4, #1
 800b850:	e7eb      	b.n	800b82a <quorem+0xea>
 800b852:	2000      	movs	r0, #0
 800b854:	e7ee      	b.n	800b834 <quorem+0xf4>
	...

0800b858 <_dtoa_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	ed2d 8b04 	vpush	{d8-d9}
 800b860:	ec57 6b10 	vmov	r6, r7, d0
 800b864:	b093      	sub	sp, #76	; 0x4c
 800b866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b86c:	9106      	str	r1, [sp, #24]
 800b86e:	ee10 aa10 	vmov	sl, s0
 800b872:	4604      	mov	r4, r0
 800b874:	9209      	str	r2, [sp, #36]	; 0x24
 800b876:	930c      	str	r3, [sp, #48]	; 0x30
 800b878:	46bb      	mov	fp, r7
 800b87a:	b975      	cbnz	r5, 800b89a <_dtoa_r+0x42>
 800b87c:	2010      	movs	r0, #16
 800b87e:	f000 feb1 	bl	800c5e4 <malloc>
 800b882:	4602      	mov	r2, r0
 800b884:	6260      	str	r0, [r4, #36]	; 0x24
 800b886:	b920      	cbnz	r0, 800b892 <_dtoa_r+0x3a>
 800b888:	4ba7      	ldr	r3, [pc, #668]	; (800bb28 <_dtoa_r+0x2d0>)
 800b88a:	21ea      	movs	r1, #234	; 0xea
 800b88c:	48a7      	ldr	r0, [pc, #668]	; (800bb2c <_dtoa_r+0x2d4>)
 800b88e:	f001 fab5 	bl	800cdfc <__assert_func>
 800b892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b896:	6005      	str	r5, [r0, #0]
 800b898:	60c5      	str	r5, [r0, #12]
 800b89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	b151      	cbz	r1, 800b8b6 <_dtoa_r+0x5e>
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	604a      	str	r2, [r1, #4]
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	4093      	lsls	r3, r2
 800b8a8:	608b      	str	r3, [r1, #8]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 feee 	bl	800c68c <_Bfree>
 800b8b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	1e3b      	subs	r3, r7, #0
 800b8b8:	bfaa      	itet	ge
 800b8ba:	2300      	movge	r3, #0
 800b8bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8c0:	f8c8 3000 	strge.w	r3, [r8]
 800b8c4:	4b9a      	ldr	r3, [pc, #616]	; (800bb30 <_dtoa_r+0x2d8>)
 800b8c6:	bfbc      	itt	lt
 800b8c8:	2201      	movlt	r2, #1
 800b8ca:	f8c8 2000 	strlt.w	r2, [r8]
 800b8ce:	ea33 030b 	bics.w	r3, r3, fp
 800b8d2:	d11b      	bne.n	800b90c <_dtoa_r+0xb4>
 800b8d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8e0:	4333      	orrs	r3, r6
 800b8e2:	f000 8592 	beq.w	800c40a <_dtoa_r+0xbb2>
 800b8e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e8:	b963      	cbnz	r3, 800b904 <_dtoa_r+0xac>
 800b8ea:	4b92      	ldr	r3, [pc, #584]	; (800bb34 <_dtoa_r+0x2dc>)
 800b8ec:	e022      	b.n	800b934 <_dtoa_r+0xdc>
 800b8ee:	4b92      	ldr	r3, [pc, #584]	; (800bb38 <_dtoa_r+0x2e0>)
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	9801      	ldr	r0, [sp, #4]
 800b8fa:	b013      	add	sp, #76	; 0x4c
 800b8fc:	ecbd 8b04 	vpop	{d8-d9}
 800b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	4b8b      	ldr	r3, [pc, #556]	; (800bb34 <_dtoa_r+0x2dc>)
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	3303      	adds	r3, #3
 800b90a:	e7f3      	b.n	800b8f4 <_dtoa_r+0x9c>
 800b90c:	2200      	movs	r2, #0
 800b90e:	2300      	movs	r3, #0
 800b910:	4650      	mov	r0, sl
 800b912:	4659      	mov	r1, fp
 800b914:	f7f5 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b918:	ec4b ab19 	vmov	d9, sl, fp
 800b91c:	4680      	mov	r8, r0
 800b91e:	b158      	cbz	r0, 800b938 <_dtoa_r+0xe0>
 800b920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b922:	2301      	movs	r3, #1
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 856b 	beq.w	800c404 <_dtoa_r+0xbac>
 800b92e:	4883      	ldr	r0, [pc, #524]	; (800bb3c <_dtoa_r+0x2e4>)
 800b930:	6018      	str	r0, [r3, #0]
 800b932:	1e43      	subs	r3, r0, #1
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	e7df      	b.n	800b8f8 <_dtoa_r+0xa0>
 800b938:	ec4b ab10 	vmov	d0, sl, fp
 800b93c:	aa10      	add	r2, sp, #64	; 0x40
 800b93e:	a911      	add	r1, sp, #68	; 0x44
 800b940:	4620      	mov	r0, r4
 800b942:	f001 f98b 	bl	800cc5c <__d2b>
 800b946:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b94a:	ee08 0a10 	vmov	s16, r0
 800b94e:	2d00      	cmp	r5, #0
 800b950:	f000 8084 	beq.w	800ba5c <_dtoa_r+0x204>
 800b954:	ee19 3a90 	vmov	r3, s19
 800b958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b95c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b960:	4656      	mov	r6, sl
 800b962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b96a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b96e:	4b74      	ldr	r3, [pc, #464]	; (800bb40 <_dtoa_r+0x2e8>)
 800b970:	2200      	movs	r2, #0
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f4 fc87 	bl	8000288 <__aeabi_dsub>
 800b97a:	a365      	add	r3, pc, #404	; (adr r3, 800bb10 <_dtoa_r+0x2b8>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fe3a 	bl	80005f8 <__aeabi_dmul>
 800b984:	a364      	add	r3, pc, #400	; (adr r3, 800bb18 <_dtoa_r+0x2c0>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	f7f4 fc7f 	bl	800028c <__adddf3>
 800b98e:	4606      	mov	r6, r0
 800b990:	4628      	mov	r0, r5
 800b992:	460f      	mov	r7, r1
 800b994:	f7f4 fdc6 	bl	8000524 <__aeabi_i2d>
 800b998:	a361      	add	r3, pc, #388	; (adr r3, 800bb20 <_dtoa_r+0x2c8>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f7f4 fe2b 	bl	80005f8 <__aeabi_dmul>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	f7f4 fc6f 	bl	800028c <__adddf3>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	460f      	mov	r7, r1
 800b9b2:	f7f5 f8d1 	bl	8000b58 <__aeabi_d2iz>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	9000      	str	r0, [sp, #0]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f5 f88c 	bl	8000adc <__aeabi_dcmplt>
 800b9c4:	b150      	cbz	r0, 800b9dc <_dtoa_r+0x184>
 800b9c6:	9800      	ldr	r0, [sp, #0]
 800b9c8:	f7f4 fdac 	bl	8000524 <__aeabi_i2d>
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	f7f5 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d4:	b910      	cbnz	r0, 800b9dc <_dtoa_r+0x184>
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	9b00      	ldr	r3, [sp, #0]
 800b9de:	2b16      	cmp	r3, #22
 800b9e0:	d85a      	bhi.n	800ba98 <_dtoa_r+0x240>
 800b9e2:	9a00      	ldr	r2, [sp, #0]
 800b9e4:	4b57      	ldr	r3, [pc, #348]	; (800bb44 <_dtoa_r+0x2ec>)
 800b9e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	ec51 0b19 	vmov	r0, r1, d9
 800b9f2:	f7f5 f873 	bl	8000adc <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d050      	beq.n	800ba9c <_dtoa_r+0x244>
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2300      	movs	r3, #0
 800ba02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba06:	1b5d      	subs	r5, r3, r5
 800ba08:	1e6b      	subs	r3, r5, #1
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	bf45      	ittet	mi
 800ba0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba12:	9304      	strmi	r3, [sp, #16]
 800ba14:	2300      	movpl	r3, #0
 800ba16:	2300      	movmi	r3, #0
 800ba18:	bf4c      	ite	mi
 800ba1a:	9305      	strmi	r3, [sp, #20]
 800ba1c:	9304      	strpl	r3, [sp, #16]
 800ba1e:	9b00      	ldr	r3, [sp, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	db3d      	blt.n	800baa0 <_dtoa_r+0x248>
 800ba24:	9b05      	ldr	r3, [sp, #20]
 800ba26:	9a00      	ldr	r2, [sp, #0]
 800ba28:	920a      	str	r2, [sp, #40]	; 0x28
 800ba2a:	4413      	add	r3, r2
 800ba2c:	9305      	str	r3, [sp, #20]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	9b06      	ldr	r3, [sp, #24]
 800ba34:	2b09      	cmp	r3, #9
 800ba36:	f200 8089 	bhi.w	800bb4c <_dtoa_r+0x2f4>
 800ba3a:	2b05      	cmp	r3, #5
 800ba3c:	bfc4      	itt	gt
 800ba3e:	3b04      	subgt	r3, #4
 800ba40:	9306      	strgt	r3, [sp, #24]
 800ba42:	9b06      	ldr	r3, [sp, #24]
 800ba44:	f1a3 0302 	sub.w	r3, r3, #2
 800ba48:	bfcc      	ite	gt
 800ba4a:	2500      	movgt	r5, #0
 800ba4c:	2501      	movle	r5, #1
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	f200 8087 	bhi.w	800bb62 <_dtoa_r+0x30a>
 800ba54:	e8df f003 	tbb	[pc, r3]
 800ba58:	59383a2d 	.word	0x59383a2d
 800ba5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba60:	441d      	add	r5, r3
 800ba62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba66:	2b20      	cmp	r3, #32
 800ba68:	bfc1      	itttt	gt
 800ba6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba72:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba7a:	bfda      	itte	le
 800ba7c:	f1c3 0320 	rsble	r3, r3, #32
 800ba80:	fa06 f003 	lslle.w	r0, r6, r3
 800ba84:	4318      	orrgt	r0, r3
 800ba86:	f7f4 fd3d 	bl	8000504 <__aeabi_ui2d>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba92:	3d01      	subs	r5, #1
 800ba94:	930e      	str	r3, [sp, #56]	; 0x38
 800ba96:	e76a      	b.n	800b96e <_dtoa_r+0x116>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7b2      	b.n	800ba02 <_dtoa_r+0x1aa>
 800ba9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba9e:	e7b1      	b.n	800ba04 <_dtoa_r+0x1ac>
 800baa0:	9b04      	ldr	r3, [sp, #16]
 800baa2:	9a00      	ldr	r2, [sp, #0]
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	9304      	str	r3, [sp, #16]
 800baa8:	4253      	negs	r3, r2
 800baaa:	9307      	str	r3, [sp, #28]
 800baac:	2300      	movs	r3, #0
 800baae:	930a      	str	r3, [sp, #40]	; 0x28
 800bab0:	e7bf      	b.n	800ba32 <_dtoa_r+0x1da>
 800bab2:	2300      	movs	r3, #0
 800bab4:	9308      	str	r3, [sp, #32]
 800bab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dc55      	bgt.n	800bb68 <_dtoa_r+0x310>
 800babc:	2301      	movs	r3, #1
 800babe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bac2:	461a      	mov	r2, r3
 800bac4:	9209      	str	r2, [sp, #36]	; 0x24
 800bac6:	e00c      	b.n	800bae2 <_dtoa_r+0x28a>
 800bac8:	2301      	movs	r3, #1
 800baca:	e7f3      	b.n	800bab4 <_dtoa_r+0x25c>
 800bacc:	2300      	movs	r3, #0
 800bace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad0:	9308      	str	r3, [sp, #32]
 800bad2:	9b00      	ldr	r3, [sp, #0]
 800bad4:	4413      	add	r3, r2
 800bad6:	9302      	str	r3, [sp, #8]
 800bad8:	3301      	adds	r3, #1
 800bada:	2b01      	cmp	r3, #1
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	bfb8      	it	lt
 800bae0:	2301      	movlt	r3, #1
 800bae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bae4:	2200      	movs	r2, #0
 800bae6:	6042      	str	r2, [r0, #4]
 800bae8:	2204      	movs	r2, #4
 800baea:	f102 0614 	add.w	r6, r2, #20
 800baee:	429e      	cmp	r6, r3
 800baf0:	6841      	ldr	r1, [r0, #4]
 800baf2:	d93d      	bls.n	800bb70 <_dtoa_r+0x318>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f000 fd89 	bl	800c60c <_Balloc>
 800bafa:	9001      	str	r0, [sp, #4]
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d13b      	bne.n	800bb78 <_dtoa_r+0x320>
 800bb00:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <_dtoa_r+0x2f0>)
 800bb02:	4602      	mov	r2, r0
 800bb04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb08:	e6c0      	b.n	800b88c <_dtoa_r+0x34>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e7df      	b.n	800bace <_dtoa_r+0x276>
 800bb0e:	bf00      	nop
 800bb10:	636f4361 	.word	0x636f4361
 800bb14:	3fd287a7 	.word	0x3fd287a7
 800bb18:	8b60c8b3 	.word	0x8b60c8b3
 800bb1c:	3fc68a28 	.word	0x3fc68a28
 800bb20:	509f79fb 	.word	0x509f79fb
 800bb24:	3fd34413 	.word	0x3fd34413
 800bb28:	080104f9 	.word	0x080104f9
 800bb2c:	08010510 	.word	0x08010510
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	080104f5 	.word	0x080104f5
 800bb38:	080104ec 	.word	0x080104ec
 800bb3c:	080104c9 	.word	0x080104c9
 800bb40:	3ff80000 	.word	0x3ff80000
 800bb44:	08010600 	.word	0x08010600
 800bb48:	0801056b 	.word	0x0801056b
 800bb4c:	2501      	movs	r5, #1
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9306      	str	r3, [sp, #24]
 800bb52:	9508      	str	r5, [sp, #32]
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	2312      	movs	r3, #18
 800bb60:	e7b0      	b.n	800bac4 <_dtoa_r+0x26c>
 800bb62:	2301      	movs	r3, #1
 800bb64:	9308      	str	r3, [sp, #32]
 800bb66:	e7f5      	b.n	800bb54 <_dtoa_r+0x2fc>
 800bb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb6e:	e7b8      	b.n	800bae2 <_dtoa_r+0x28a>
 800bb70:	3101      	adds	r1, #1
 800bb72:	6041      	str	r1, [r0, #4]
 800bb74:	0052      	lsls	r2, r2, #1
 800bb76:	e7b8      	b.n	800baea <_dtoa_r+0x292>
 800bb78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb7a:	9a01      	ldr	r2, [sp, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	2b0e      	cmp	r3, #14
 800bb82:	f200 809d 	bhi.w	800bcc0 <_dtoa_r+0x468>
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	f000 809a 	beq.w	800bcc0 <_dtoa_r+0x468>
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dd32      	ble.n	800bbf8 <_dtoa_r+0x3a0>
 800bb92:	4ab7      	ldr	r2, [pc, #732]	; (800be70 <_dtoa_r+0x618>)
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bba0:	9b00      	ldr	r3, [sp, #0]
 800bba2:	05d8      	lsls	r0, r3, #23
 800bba4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bba8:	d516      	bpl.n	800bbd8 <_dtoa_r+0x380>
 800bbaa:	4bb2      	ldr	r3, [pc, #712]	; (800be74 <_dtoa_r+0x61c>)
 800bbac:	ec51 0b19 	vmov	r0, r1, d9
 800bbb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbb4:	f7f4 fe4a 	bl	800084c <__aeabi_ddiv>
 800bbb8:	f007 070f 	and.w	r7, r7, #15
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	468b      	mov	fp, r1
 800bbc0:	2503      	movs	r5, #3
 800bbc2:	4eac      	ldr	r6, [pc, #688]	; (800be74 <_dtoa_r+0x61c>)
 800bbc4:	b957      	cbnz	r7, 800bbdc <_dtoa_r+0x384>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	4650      	mov	r0, sl
 800bbcc:	4659      	mov	r1, fp
 800bbce:	f7f4 fe3d 	bl	800084c <__aeabi_ddiv>
 800bbd2:	4682      	mov	sl, r0
 800bbd4:	468b      	mov	fp, r1
 800bbd6:	e028      	b.n	800bc2a <_dtoa_r+0x3d2>
 800bbd8:	2502      	movs	r5, #2
 800bbda:	e7f2      	b.n	800bbc2 <_dtoa_r+0x36a>
 800bbdc:	07f9      	lsls	r1, r7, #31
 800bbde:	d508      	bpl.n	800bbf2 <_dtoa_r+0x39a>
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbe8:	f7f4 fd06 	bl	80005f8 <__aeabi_dmul>
 800bbec:	3501      	adds	r5, #1
 800bbee:	4680      	mov	r8, r0
 800bbf0:	4689      	mov	r9, r1
 800bbf2:	107f      	asrs	r7, r7, #1
 800bbf4:	3608      	adds	r6, #8
 800bbf6:	e7e5      	b.n	800bbc4 <_dtoa_r+0x36c>
 800bbf8:	f000 809b 	beq.w	800bd32 <_dtoa_r+0x4da>
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	4f9d      	ldr	r7, [pc, #628]	; (800be74 <_dtoa_r+0x61c>)
 800bc00:	425e      	negs	r6, r3
 800bc02:	4b9b      	ldr	r3, [pc, #620]	; (800be70 <_dtoa_r+0x618>)
 800bc04:	f006 020f 	and.w	r2, r6, #15
 800bc08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	ec51 0b19 	vmov	r0, r1, d9
 800bc14:	f7f4 fcf0 	bl	80005f8 <__aeabi_dmul>
 800bc18:	1136      	asrs	r6, r6, #4
 800bc1a:	4682      	mov	sl, r0
 800bc1c:	468b      	mov	fp, r1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2502      	movs	r5, #2
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	d17a      	bne.n	800bd1c <_dtoa_r+0x4c4>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1d3      	bne.n	800bbd2 <_dtoa_r+0x37a>
 800bc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 8082 	beq.w	800bd36 <_dtoa_r+0x4de>
 800bc32:	4b91      	ldr	r3, [pc, #580]	; (800be78 <_dtoa_r+0x620>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	4650      	mov	r0, sl
 800bc38:	4659      	mov	r1, fp
 800bc3a:	f7f4 ff4f 	bl	8000adc <__aeabi_dcmplt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d079      	beq.n	800bd36 <_dtoa_r+0x4de>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d076      	beq.n	800bd36 <_dtoa_r+0x4de>
 800bc48:	9b02      	ldr	r3, [sp, #8]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dd36      	ble.n	800bcbc <_dtoa_r+0x464>
 800bc4e:	9b00      	ldr	r3, [sp, #0]
 800bc50:	4650      	mov	r0, sl
 800bc52:	4659      	mov	r1, fp
 800bc54:	1e5f      	subs	r7, r3, #1
 800bc56:	2200      	movs	r2, #0
 800bc58:	4b88      	ldr	r3, [pc, #544]	; (800be7c <_dtoa_r+0x624>)
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	9e02      	ldr	r6, [sp, #8]
 800bc60:	4682      	mov	sl, r0
 800bc62:	468b      	mov	fp, r1
 800bc64:	3501      	adds	r5, #1
 800bc66:	4628      	mov	r0, r5
 800bc68:	f7f4 fc5c 	bl	8000524 <__aeabi_i2d>
 800bc6c:	4652      	mov	r2, sl
 800bc6e:	465b      	mov	r3, fp
 800bc70:	f7f4 fcc2 	bl	80005f8 <__aeabi_dmul>
 800bc74:	4b82      	ldr	r3, [pc, #520]	; (800be80 <_dtoa_r+0x628>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	f7f4 fb08 	bl	800028c <__adddf3>
 800bc7c:	46d0      	mov	r8, sl
 800bc7e:	46d9      	mov	r9, fp
 800bc80:	4682      	mov	sl, r0
 800bc82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	d158      	bne.n	800bd3c <_dtoa_r+0x4e4>
 800bc8a:	4b7e      	ldr	r3, [pc, #504]	; (800be84 <_dtoa_r+0x62c>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4649      	mov	r1, r9
 800bc92:	f7f4 faf9 	bl	8000288 <__aeabi_dsub>
 800bc96:	4652      	mov	r2, sl
 800bc98:	465b      	mov	r3, fp
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	4689      	mov	r9, r1
 800bc9e:	f7f4 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	f040 8295 	bne.w	800c1d2 <_dtoa_r+0x97a>
 800bca8:	4652      	mov	r2, sl
 800bcaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	f7f4 ff13 	bl	8000adc <__aeabi_dcmplt>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f040 8289 	bne.w	800c1ce <_dtoa_r+0x976>
 800bcbc:	ec5b ab19 	vmov	sl, fp, d9
 800bcc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f2c0 8148 	blt.w	800bf58 <_dtoa_r+0x700>
 800bcc8:	9a00      	ldr	r2, [sp, #0]
 800bcca:	2a0e      	cmp	r2, #14
 800bccc:	f300 8144 	bgt.w	800bf58 <_dtoa_r+0x700>
 800bcd0:	4b67      	ldr	r3, [pc, #412]	; (800be70 <_dtoa_r+0x618>)
 800bcd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f280 80d5 	bge.w	800be8c <_dtoa_r+0x634>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f300 80d1 	bgt.w	800be8c <_dtoa_r+0x634>
 800bcea:	f040 826f 	bne.w	800c1cc <_dtoa_r+0x974>
 800bcee:	4b65      	ldr	r3, [pc, #404]	; (800be84 <_dtoa_r+0x62c>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	f7f4 fc7f 	bl	80005f8 <__aeabi_dmul>
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	f7f4 ff01 	bl	8000b04 <__aeabi_dcmpge>
 800bd02:	9e03      	ldr	r6, [sp, #12]
 800bd04:	4637      	mov	r7, r6
 800bd06:	2800      	cmp	r0, #0
 800bd08:	f040 8245 	bne.w	800c196 <_dtoa_r+0x93e>
 800bd0c:	9d01      	ldr	r5, [sp, #4]
 800bd0e:	2331      	movs	r3, #49	; 0x31
 800bd10:	f805 3b01 	strb.w	r3, [r5], #1
 800bd14:	9b00      	ldr	r3, [sp, #0]
 800bd16:	3301      	adds	r3, #1
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	e240      	b.n	800c19e <_dtoa_r+0x946>
 800bd1c:	07f2      	lsls	r2, r6, #31
 800bd1e:	d505      	bpl.n	800bd2c <_dtoa_r+0x4d4>
 800bd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd24:	f7f4 fc68 	bl	80005f8 <__aeabi_dmul>
 800bd28:	3501      	adds	r5, #1
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	1076      	asrs	r6, r6, #1
 800bd2e:	3708      	adds	r7, #8
 800bd30:	e777      	b.n	800bc22 <_dtoa_r+0x3ca>
 800bd32:	2502      	movs	r5, #2
 800bd34:	e779      	b.n	800bc2a <_dtoa_r+0x3d2>
 800bd36:	9f00      	ldr	r7, [sp, #0]
 800bd38:	9e03      	ldr	r6, [sp, #12]
 800bd3a:	e794      	b.n	800bc66 <_dtoa_r+0x40e>
 800bd3c:	9901      	ldr	r1, [sp, #4]
 800bd3e:	4b4c      	ldr	r3, [pc, #304]	; (800be70 <_dtoa_r+0x618>)
 800bd40:	4431      	add	r1, r6
 800bd42:	910d      	str	r1, [sp, #52]	; 0x34
 800bd44:	9908      	ldr	r1, [sp, #32]
 800bd46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd4e:	2900      	cmp	r1, #0
 800bd50:	d043      	beq.n	800bdda <_dtoa_r+0x582>
 800bd52:	494d      	ldr	r1, [pc, #308]	; (800be88 <_dtoa_r+0x630>)
 800bd54:	2000      	movs	r0, #0
 800bd56:	f7f4 fd79 	bl	800084c <__aeabi_ddiv>
 800bd5a:	4652      	mov	r2, sl
 800bd5c:	465b      	mov	r3, fp
 800bd5e:	f7f4 fa93 	bl	8000288 <__aeabi_dsub>
 800bd62:	9d01      	ldr	r5, [sp, #4]
 800bd64:	4682      	mov	sl, r0
 800bd66:	468b      	mov	fp, r1
 800bd68:	4649      	mov	r1, r9
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f7f4 fef4 	bl	8000b58 <__aeabi_d2iz>
 800bd70:	4606      	mov	r6, r0
 800bd72:	f7f4 fbd7 	bl	8000524 <__aeabi_i2d>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fa83 	bl	8000288 <__aeabi_dsub>
 800bd82:	3630      	adds	r6, #48	; 0x30
 800bd84:	f805 6b01 	strb.w	r6, [r5], #1
 800bd88:	4652      	mov	r2, sl
 800bd8a:	465b      	mov	r3, fp
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	4689      	mov	r9, r1
 800bd90:	f7f4 fea4 	bl	8000adc <__aeabi_dcmplt>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d163      	bne.n	800be60 <_dtoa_r+0x608>
 800bd98:	4642      	mov	r2, r8
 800bd9a:	464b      	mov	r3, r9
 800bd9c:	4936      	ldr	r1, [pc, #216]	; (800be78 <_dtoa_r+0x620>)
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f7f4 fa72 	bl	8000288 <__aeabi_dsub>
 800bda4:	4652      	mov	r2, sl
 800bda6:	465b      	mov	r3, fp
 800bda8:	f7f4 fe98 	bl	8000adc <__aeabi_dcmplt>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f040 80b5 	bne.w	800bf1c <_dtoa_r+0x6c4>
 800bdb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdb4:	429d      	cmp	r5, r3
 800bdb6:	d081      	beq.n	800bcbc <_dtoa_r+0x464>
 800bdb8:	4b30      	ldr	r3, [pc, #192]	; (800be7c <_dtoa_r+0x624>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	4659      	mov	r1, fp
 800bdc0:	f7f4 fc1a 	bl	80005f8 <__aeabi_dmul>
 800bdc4:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <_dtoa_r+0x624>)
 800bdc6:	4682      	mov	sl, r0
 800bdc8:	468b      	mov	fp, r1
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	4689      	mov	r9, r1
 800bdd8:	e7c6      	b.n	800bd68 <_dtoa_r+0x510>
 800bdda:	4650      	mov	r0, sl
 800bddc:	4659      	mov	r1, fp
 800bdde:	f7f4 fc0b 	bl	80005f8 <__aeabi_dmul>
 800bde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde4:	9d01      	ldr	r5, [sp, #4]
 800bde6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bde8:	4682      	mov	sl, r0
 800bdea:	468b      	mov	fp, r1
 800bdec:	4649      	mov	r1, r9
 800bdee:	4640      	mov	r0, r8
 800bdf0:	f7f4 feb2 	bl	8000b58 <__aeabi_d2iz>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	f7f4 fb95 	bl	8000524 <__aeabi_i2d>
 800bdfa:	3630      	adds	r6, #48	; 0x30
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fa40 	bl	8000288 <__aeabi_dsub>
 800be08:	f805 6b01 	strb.w	r6, [r5], #1
 800be0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be0e:	429d      	cmp	r5, r3
 800be10:	4680      	mov	r8, r0
 800be12:	4689      	mov	r9, r1
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	d124      	bne.n	800be64 <_dtoa_r+0x60c>
 800be1a:	4b1b      	ldr	r3, [pc, #108]	; (800be88 <_dtoa_r+0x630>)
 800be1c:	4650      	mov	r0, sl
 800be1e:	4659      	mov	r1, fp
 800be20:	f7f4 fa34 	bl	800028c <__adddf3>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4640      	mov	r0, r8
 800be2a:	4649      	mov	r1, r9
 800be2c:	f7f4 fe74 	bl	8000b18 <__aeabi_dcmpgt>
 800be30:	2800      	cmp	r0, #0
 800be32:	d173      	bne.n	800bf1c <_dtoa_r+0x6c4>
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	4913      	ldr	r1, [pc, #76]	; (800be88 <_dtoa_r+0x630>)
 800be3a:	2000      	movs	r0, #0
 800be3c:	f7f4 fa24 	bl	8000288 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 fe48 	bl	8000adc <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f43f af35 	beq.w	800bcbc <_dtoa_r+0x464>
 800be52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be54:	1e6b      	subs	r3, r5, #1
 800be56:	930f      	str	r3, [sp, #60]	; 0x3c
 800be58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be5c:	2b30      	cmp	r3, #48	; 0x30
 800be5e:	d0f8      	beq.n	800be52 <_dtoa_r+0x5fa>
 800be60:	9700      	str	r7, [sp, #0]
 800be62:	e049      	b.n	800bef8 <_dtoa_r+0x6a0>
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <_dtoa_r+0x624>)
 800be66:	f7f4 fbc7 	bl	80005f8 <__aeabi_dmul>
 800be6a:	4680      	mov	r8, r0
 800be6c:	4689      	mov	r9, r1
 800be6e:	e7bd      	b.n	800bdec <_dtoa_r+0x594>
 800be70:	08010600 	.word	0x08010600
 800be74:	080105d8 	.word	0x080105d8
 800be78:	3ff00000 	.word	0x3ff00000
 800be7c:	40240000 	.word	0x40240000
 800be80:	401c0000 	.word	0x401c0000
 800be84:	40140000 	.word	0x40140000
 800be88:	3fe00000 	.word	0x3fe00000
 800be8c:	9d01      	ldr	r5, [sp, #4]
 800be8e:	4656      	mov	r6, sl
 800be90:	465f      	mov	r7, fp
 800be92:	4642      	mov	r2, r8
 800be94:	464b      	mov	r3, r9
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 fcd7 	bl	800084c <__aeabi_ddiv>
 800be9e:	f7f4 fe5b 	bl	8000b58 <__aeabi_d2iz>
 800bea2:	4682      	mov	sl, r0
 800bea4:	f7f4 fb3e 	bl	8000524 <__aeabi_i2d>
 800bea8:	4642      	mov	r2, r8
 800beaa:	464b      	mov	r3, r9
 800beac:	f7f4 fba4 	bl	80005f8 <__aeabi_dmul>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bebc:	f7f4 f9e4 	bl	8000288 <__aeabi_dsub>
 800bec0:	f805 6b01 	strb.w	r6, [r5], #1
 800bec4:	9e01      	ldr	r6, [sp, #4]
 800bec6:	9f03      	ldr	r7, [sp, #12]
 800bec8:	1bae      	subs	r6, r5, r6
 800beca:	42b7      	cmp	r7, r6
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	d135      	bne.n	800bf3e <_dtoa_r+0x6e6>
 800bed2:	f7f4 f9db 	bl	800028c <__adddf3>
 800bed6:	4642      	mov	r2, r8
 800bed8:	464b      	mov	r3, r9
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	f7f4 fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 800bee2:	b9d0      	cbnz	r0, 800bf1a <_dtoa_r+0x6c2>
 800bee4:	4642      	mov	r2, r8
 800bee6:	464b      	mov	r3, r9
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 800bef0:	b110      	cbz	r0, 800bef8 <_dtoa_r+0x6a0>
 800bef2:	f01a 0f01 	tst.w	sl, #1
 800bef6:	d110      	bne.n	800bf1a <_dtoa_r+0x6c2>
 800bef8:	4620      	mov	r0, r4
 800befa:	ee18 1a10 	vmov	r1, s16
 800befe:	f000 fbc5 	bl	800c68c <_Bfree>
 800bf02:	2300      	movs	r3, #0
 800bf04:	9800      	ldr	r0, [sp, #0]
 800bf06:	702b      	strb	r3, [r5, #0]
 800bf08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	6018      	str	r0, [r3, #0]
 800bf0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f43f acf1 	beq.w	800b8f8 <_dtoa_r+0xa0>
 800bf16:	601d      	str	r5, [r3, #0]
 800bf18:	e4ee      	b.n	800b8f8 <_dtoa_r+0xa0>
 800bf1a:	9f00      	ldr	r7, [sp, #0]
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	461d      	mov	r5, r3
 800bf20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf24:	2a39      	cmp	r2, #57	; 0x39
 800bf26:	d106      	bne.n	800bf36 <_dtoa_r+0x6de>
 800bf28:	9a01      	ldr	r2, [sp, #4]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d1f7      	bne.n	800bf1e <_dtoa_r+0x6c6>
 800bf2e:	9901      	ldr	r1, [sp, #4]
 800bf30:	2230      	movs	r2, #48	; 0x30
 800bf32:	3701      	adds	r7, #1
 800bf34:	700a      	strb	r2, [r1, #0]
 800bf36:	781a      	ldrb	r2, [r3, #0]
 800bf38:	3201      	adds	r2, #1
 800bf3a:	701a      	strb	r2, [r3, #0]
 800bf3c:	e790      	b.n	800be60 <_dtoa_r+0x608>
 800bf3e:	4ba6      	ldr	r3, [pc, #664]	; (800c1d8 <_dtoa_r+0x980>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	2200      	movs	r2, #0
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460f      	mov	r7, r1
 800bf4e:	f7f4 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d09d      	beq.n	800be92 <_dtoa_r+0x63a>
 800bf56:	e7cf      	b.n	800bef8 <_dtoa_r+0x6a0>
 800bf58:	9a08      	ldr	r2, [sp, #32]
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	f000 80d7 	beq.w	800c10e <_dtoa_r+0x8b6>
 800bf60:	9a06      	ldr	r2, [sp, #24]
 800bf62:	2a01      	cmp	r2, #1
 800bf64:	f300 80ba 	bgt.w	800c0dc <_dtoa_r+0x884>
 800bf68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	f000 80b2 	beq.w	800c0d4 <_dtoa_r+0x87c>
 800bf70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf74:	9e07      	ldr	r6, [sp, #28]
 800bf76:	9d04      	ldr	r5, [sp, #16]
 800bf78:	9a04      	ldr	r2, [sp, #16]
 800bf7a:	441a      	add	r2, r3
 800bf7c:	9204      	str	r2, [sp, #16]
 800bf7e:	9a05      	ldr	r2, [sp, #20]
 800bf80:	2101      	movs	r1, #1
 800bf82:	441a      	add	r2, r3
 800bf84:	4620      	mov	r0, r4
 800bf86:	9205      	str	r2, [sp, #20]
 800bf88:	f000 fc38 	bl	800c7fc <__i2b>
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	dd0c      	ble.n	800bfac <_dtoa_r+0x754>
 800bf92:	9b05      	ldr	r3, [sp, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dd09      	ble.n	800bfac <_dtoa_r+0x754>
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	9a04      	ldr	r2, [sp, #16]
 800bf9c:	bfa8      	it	ge
 800bf9e:	462b      	movge	r3, r5
 800bfa0:	1ad2      	subs	r2, r2, r3
 800bfa2:	9204      	str	r2, [sp, #16]
 800bfa4:	9a05      	ldr	r2, [sp, #20]
 800bfa6:	1aed      	subs	r5, r5, r3
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	9305      	str	r3, [sp, #20]
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	b31b      	cbz	r3, 800bff8 <_dtoa_r+0x7a0>
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 80af 	beq.w	800c116 <_dtoa_r+0x8be>
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	dd13      	ble.n	800bfe4 <_dtoa_r+0x78c>
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 fcdb 	bl	800c97c <__pow5mult>
 800bfc6:	ee18 2a10 	vmov	r2, s16
 800bfca:	4601      	mov	r1, r0
 800bfcc:	4607      	mov	r7, r0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 fc2a 	bl	800c828 <__multiply>
 800bfd4:	ee18 1a10 	vmov	r1, s16
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 fb56 	bl	800c68c <_Bfree>
 800bfe0:	ee08 8a10 	vmov	s16, r8
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	1b9a      	subs	r2, r3, r6
 800bfe8:	d006      	beq.n	800bff8 <_dtoa_r+0x7a0>
 800bfea:	ee18 1a10 	vmov	r1, s16
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 fcc4 	bl	800c97c <__pow5mult>
 800bff4:	ee08 0a10 	vmov	s16, r0
 800bff8:	2101      	movs	r1, #1
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 fbfe 	bl	800c7fc <__i2b>
 800c000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c002:	2b00      	cmp	r3, #0
 800c004:	4606      	mov	r6, r0
 800c006:	f340 8088 	ble.w	800c11a <_dtoa_r+0x8c2>
 800c00a:	461a      	mov	r2, r3
 800c00c:	4601      	mov	r1, r0
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fcb4 	bl	800c97c <__pow5mult>
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	2b01      	cmp	r3, #1
 800c018:	4606      	mov	r6, r0
 800c01a:	f340 8081 	ble.w	800c120 <_dtoa_r+0x8c8>
 800c01e:	f04f 0800 	mov.w	r8, #0
 800c022:	6933      	ldr	r3, [r6, #16]
 800c024:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c028:	6918      	ldr	r0, [r3, #16]
 800c02a:	f000 fb97 	bl	800c75c <__hi0bits>
 800c02e:	f1c0 0020 	rsb	r0, r0, #32
 800c032:	9b05      	ldr	r3, [sp, #20]
 800c034:	4418      	add	r0, r3
 800c036:	f010 001f 	ands.w	r0, r0, #31
 800c03a:	f000 8092 	beq.w	800c162 <_dtoa_r+0x90a>
 800c03e:	f1c0 0320 	rsb	r3, r0, #32
 800c042:	2b04      	cmp	r3, #4
 800c044:	f340 808a 	ble.w	800c15c <_dtoa_r+0x904>
 800c048:	f1c0 001c 	rsb	r0, r0, #28
 800c04c:	9b04      	ldr	r3, [sp, #16]
 800c04e:	4403      	add	r3, r0
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9b05      	ldr	r3, [sp, #20]
 800c054:	4403      	add	r3, r0
 800c056:	4405      	add	r5, r0
 800c058:	9305      	str	r3, [sp, #20]
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd07      	ble.n	800c070 <_dtoa_r+0x818>
 800c060:	ee18 1a10 	vmov	r1, s16
 800c064:	461a      	mov	r2, r3
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fce2 	bl	800ca30 <__lshift>
 800c06c:	ee08 0a10 	vmov	s16, r0
 800c070:	9b05      	ldr	r3, [sp, #20]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dd05      	ble.n	800c082 <_dtoa_r+0x82a>
 800c076:	4631      	mov	r1, r6
 800c078:	461a      	mov	r2, r3
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fcd8 	bl	800ca30 <__lshift>
 800c080:	4606      	mov	r6, r0
 800c082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c084:	2b00      	cmp	r3, #0
 800c086:	d06e      	beq.n	800c166 <_dtoa_r+0x90e>
 800c088:	ee18 0a10 	vmov	r0, s16
 800c08c:	4631      	mov	r1, r6
 800c08e:	f000 fd3f 	bl	800cb10 <__mcmp>
 800c092:	2800      	cmp	r0, #0
 800c094:	da67      	bge.n	800c166 <_dtoa_r+0x90e>
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	3b01      	subs	r3, #1
 800c09a:	ee18 1a10 	vmov	r1, s16
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fb13 	bl	800c6d0 <__multadd>
 800c0aa:	9b08      	ldr	r3, [sp, #32]
 800c0ac:	ee08 0a10 	vmov	s16, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 81b1 	beq.w	800c418 <_dtoa_r+0xbc0>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fb07 	bl	800c6d0 <__multadd>
 800c0c2:	9b02      	ldr	r3, [sp, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	4607      	mov	r7, r0
 800c0c8:	f300 808e 	bgt.w	800c1e8 <_dtoa_r+0x990>
 800c0cc:	9b06      	ldr	r3, [sp, #24]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	dc51      	bgt.n	800c176 <_dtoa_r+0x91e>
 800c0d2:	e089      	b.n	800c1e8 <_dtoa_r+0x990>
 800c0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0da:	e74b      	b.n	800bf74 <_dtoa_r+0x71c>
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	1e5e      	subs	r6, r3, #1
 800c0e0:	9b07      	ldr	r3, [sp, #28]
 800c0e2:	42b3      	cmp	r3, r6
 800c0e4:	bfbf      	itttt	lt
 800c0e6:	9b07      	ldrlt	r3, [sp, #28]
 800c0e8:	9607      	strlt	r6, [sp, #28]
 800c0ea:	1af2      	sublt	r2, r6, r3
 800c0ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0ee:	bfb6      	itet	lt
 800c0f0:	189b      	addlt	r3, r3, r2
 800c0f2:	1b9e      	subge	r6, r3, r6
 800c0f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	bfb8      	it	lt
 800c0fa:	2600      	movlt	r6, #0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfb7      	itett	lt
 800c100:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c104:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c108:	1a9d      	sublt	r5, r3, r2
 800c10a:	2300      	movlt	r3, #0
 800c10c:	e734      	b.n	800bf78 <_dtoa_r+0x720>
 800c10e:	9e07      	ldr	r6, [sp, #28]
 800c110:	9d04      	ldr	r5, [sp, #16]
 800c112:	9f08      	ldr	r7, [sp, #32]
 800c114:	e73b      	b.n	800bf8e <_dtoa_r+0x736>
 800c116:	9a07      	ldr	r2, [sp, #28]
 800c118:	e767      	b.n	800bfea <_dtoa_r+0x792>
 800c11a:	9b06      	ldr	r3, [sp, #24]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	dc18      	bgt.n	800c152 <_dtoa_r+0x8fa>
 800c120:	f1ba 0f00 	cmp.w	sl, #0
 800c124:	d115      	bne.n	800c152 <_dtoa_r+0x8fa>
 800c126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c12a:	b993      	cbnz	r3, 800c152 <_dtoa_r+0x8fa>
 800c12c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c130:	0d1b      	lsrs	r3, r3, #20
 800c132:	051b      	lsls	r3, r3, #20
 800c134:	b183      	cbz	r3, 800c158 <_dtoa_r+0x900>
 800c136:	9b04      	ldr	r3, [sp, #16]
 800c138:	3301      	adds	r3, #1
 800c13a:	9304      	str	r3, [sp, #16]
 800c13c:	9b05      	ldr	r3, [sp, #20]
 800c13e:	3301      	adds	r3, #1
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	f04f 0801 	mov.w	r8, #1
 800c146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f47f af6a 	bne.w	800c022 <_dtoa_r+0x7ca>
 800c14e:	2001      	movs	r0, #1
 800c150:	e76f      	b.n	800c032 <_dtoa_r+0x7da>
 800c152:	f04f 0800 	mov.w	r8, #0
 800c156:	e7f6      	b.n	800c146 <_dtoa_r+0x8ee>
 800c158:	4698      	mov	r8, r3
 800c15a:	e7f4      	b.n	800c146 <_dtoa_r+0x8ee>
 800c15c:	f43f af7d 	beq.w	800c05a <_dtoa_r+0x802>
 800c160:	4618      	mov	r0, r3
 800c162:	301c      	adds	r0, #28
 800c164:	e772      	b.n	800c04c <_dtoa_r+0x7f4>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	dc37      	bgt.n	800c1dc <_dtoa_r+0x984>
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	dd34      	ble.n	800c1dc <_dtoa_r+0x984>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	9b02      	ldr	r3, [sp, #8]
 800c178:	b96b      	cbnz	r3, 800c196 <_dtoa_r+0x93e>
 800c17a:	4631      	mov	r1, r6
 800c17c:	2205      	movs	r2, #5
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 faa6 	bl	800c6d0 <__multadd>
 800c184:	4601      	mov	r1, r0
 800c186:	4606      	mov	r6, r0
 800c188:	ee18 0a10 	vmov	r0, s16
 800c18c:	f000 fcc0 	bl	800cb10 <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	f73f adbb 	bgt.w	800bd0c <_dtoa_r+0x4b4>
 800c196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c198:	9d01      	ldr	r5, [sp, #4]
 800c19a:	43db      	mvns	r3, r3
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	f04f 0800 	mov.w	r8, #0
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 fa71 	bl	800c68c <_Bfree>
 800c1aa:	2f00      	cmp	r7, #0
 800c1ac:	f43f aea4 	beq.w	800bef8 <_dtoa_r+0x6a0>
 800c1b0:	f1b8 0f00 	cmp.w	r8, #0
 800c1b4:	d005      	beq.n	800c1c2 <_dtoa_r+0x96a>
 800c1b6:	45b8      	cmp	r8, r7
 800c1b8:	d003      	beq.n	800c1c2 <_dtoa_r+0x96a>
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 fa65 	bl	800c68c <_Bfree>
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fa61 	bl	800c68c <_Bfree>
 800c1ca:	e695      	b.n	800bef8 <_dtoa_r+0x6a0>
 800c1cc:	2600      	movs	r6, #0
 800c1ce:	4637      	mov	r7, r6
 800c1d0:	e7e1      	b.n	800c196 <_dtoa_r+0x93e>
 800c1d2:	9700      	str	r7, [sp, #0]
 800c1d4:	4637      	mov	r7, r6
 800c1d6:	e599      	b.n	800bd0c <_dtoa_r+0x4b4>
 800c1d8:	40240000 	.word	0x40240000
 800c1dc:	9b08      	ldr	r3, [sp, #32]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 80ca 	beq.w	800c378 <_dtoa_r+0xb20>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	9302      	str	r3, [sp, #8]
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	dd05      	ble.n	800c1f8 <_dtoa_r+0x9a0>
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 fc1d 	bl	800ca30 <__lshift>
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	f1b8 0f00 	cmp.w	r8, #0
 800c1fc:	d05b      	beq.n	800c2b6 <_dtoa_r+0xa5e>
 800c1fe:	6879      	ldr	r1, [r7, #4]
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fa03 	bl	800c60c <_Balloc>
 800c206:	4605      	mov	r5, r0
 800c208:	b928      	cbnz	r0, 800c216 <_dtoa_r+0x9be>
 800c20a:	4b87      	ldr	r3, [pc, #540]	; (800c428 <_dtoa_r+0xbd0>)
 800c20c:	4602      	mov	r2, r0
 800c20e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c212:	f7ff bb3b 	b.w	800b88c <_dtoa_r+0x34>
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	3202      	adds	r2, #2
 800c21a:	0092      	lsls	r2, r2, #2
 800c21c:	f107 010c 	add.w	r1, r7, #12
 800c220:	300c      	adds	r0, #12
 800c222:	f7fe fd02 	bl	800ac2a <memcpy>
 800c226:	2201      	movs	r2, #1
 800c228:	4629      	mov	r1, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 fc00 	bl	800ca30 <__lshift>
 800c230:	9b01      	ldr	r3, [sp, #4]
 800c232:	f103 0901 	add.w	r9, r3, #1
 800c236:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c23a:	4413      	add	r3, r2
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	f00a 0301 	and.w	r3, sl, #1
 800c242:	46b8      	mov	r8, r7
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	4607      	mov	r7, r0
 800c248:	4631      	mov	r1, r6
 800c24a:	ee18 0a10 	vmov	r0, s16
 800c24e:	f7ff fa77 	bl	800b740 <quorem>
 800c252:	4641      	mov	r1, r8
 800c254:	9002      	str	r0, [sp, #8]
 800c256:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c25a:	ee18 0a10 	vmov	r0, s16
 800c25e:	f000 fc57 	bl	800cb10 <__mcmp>
 800c262:	463a      	mov	r2, r7
 800c264:	9003      	str	r0, [sp, #12]
 800c266:	4631      	mov	r1, r6
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 fc6d 	bl	800cb48 <__mdiff>
 800c26e:	68c2      	ldr	r2, [r0, #12]
 800c270:	f109 3bff 	add.w	fp, r9, #4294967295
 800c274:	4605      	mov	r5, r0
 800c276:	bb02      	cbnz	r2, 800c2ba <_dtoa_r+0xa62>
 800c278:	4601      	mov	r1, r0
 800c27a:	ee18 0a10 	vmov	r0, s16
 800c27e:	f000 fc47 	bl	800cb10 <__mcmp>
 800c282:	4602      	mov	r2, r0
 800c284:	4629      	mov	r1, r5
 800c286:	4620      	mov	r0, r4
 800c288:	9207      	str	r2, [sp, #28]
 800c28a:	f000 f9ff 	bl	800c68c <_Bfree>
 800c28e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c292:	ea43 0102 	orr.w	r1, r3, r2
 800c296:	9b04      	ldr	r3, [sp, #16]
 800c298:	430b      	orrs	r3, r1
 800c29a:	464d      	mov	r5, r9
 800c29c:	d10f      	bne.n	800c2be <_dtoa_r+0xa66>
 800c29e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2a2:	d02a      	beq.n	800c2fa <_dtoa_r+0xaa2>
 800c2a4:	9b03      	ldr	r3, [sp, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	dd02      	ble.n	800c2b0 <_dtoa_r+0xa58>
 800c2aa:	9b02      	ldr	r3, [sp, #8]
 800c2ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c2b0:	f88b a000 	strb.w	sl, [fp]
 800c2b4:	e775      	b.n	800c1a2 <_dtoa_r+0x94a>
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	e7ba      	b.n	800c230 <_dtoa_r+0x9d8>
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	e7e2      	b.n	800c284 <_dtoa_r+0xa2c>
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	db04      	blt.n	800c2ce <_dtoa_r+0xa76>
 800c2c4:	9906      	ldr	r1, [sp, #24]
 800c2c6:	430b      	orrs	r3, r1
 800c2c8:	9904      	ldr	r1, [sp, #16]
 800c2ca:	430b      	orrs	r3, r1
 800c2cc:	d122      	bne.n	800c314 <_dtoa_r+0xabc>
 800c2ce:	2a00      	cmp	r2, #0
 800c2d0:	ddee      	ble.n	800c2b0 <_dtoa_r+0xa58>
 800c2d2:	ee18 1a10 	vmov	r1, s16
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fba9 	bl	800ca30 <__lshift>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	ee08 0a10 	vmov	s16, r0
 800c2e4:	f000 fc14 	bl	800cb10 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	dc03      	bgt.n	800c2f4 <_dtoa_r+0xa9c>
 800c2ec:	d1e0      	bne.n	800c2b0 <_dtoa_r+0xa58>
 800c2ee:	f01a 0f01 	tst.w	sl, #1
 800c2f2:	d0dd      	beq.n	800c2b0 <_dtoa_r+0xa58>
 800c2f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2f8:	d1d7      	bne.n	800c2aa <_dtoa_r+0xa52>
 800c2fa:	2339      	movs	r3, #57	; 0x39
 800c2fc:	f88b 3000 	strb.w	r3, [fp]
 800c300:	462b      	mov	r3, r5
 800c302:	461d      	mov	r5, r3
 800c304:	3b01      	subs	r3, #1
 800c306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c30a:	2a39      	cmp	r2, #57	; 0x39
 800c30c:	d071      	beq.n	800c3f2 <_dtoa_r+0xb9a>
 800c30e:	3201      	adds	r2, #1
 800c310:	701a      	strb	r2, [r3, #0]
 800c312:	e746      	b.n	800c1a2 <_dtoa_r+0x94a>
 800c314:	2a00      	cmp	r2, #0
 800c316:	dd07      	ble.n	800c328 <_dtoa_r+0xad0>
 800c318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c31c:	d0ed      	beq.n	800c2fa <_dtoa_r+0xaa2>
 800c31e:	f10a 0301 	add.w	r3, sl, #1
 800c322:	f88b 3000 	strb.w	r3, [fp]
 800c326:	e73c      	b.n	800c1a2 <_dtoa_r+0x94a>
 800c328:	9b05      	ldr	r3, [sp, #20]
 800c32a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c32e:	4599      	cmp	r9, r3
 800c330:	d047      	beq.n	800c3c2 <_dtoa_r+0xb6a>
 800c332:	ee18 1a10 	vmov	r1, s16
 800c336:	2300      	movs	r3, #0
 800c338:	220a      	movs	r2, #10
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f9c8 	bl	800c6d0 <__multadd>
 800c340:	45b8      	cmp	r8, r7
 800c342:	ee08 0a10 	vmov	s16, r0
 800c346:	f04f 0300 	mov.w	r3, #0
 800c34a:	f04f 020a 	mov.w	r2, #10
 800c34e:	4641      	mov	r1, r8
 800c350:	4620      	mov	r0, r4
 800c352:	d106      	bne.n	800c362 <_dtoa_r+0xb0a>
 800c354:	f000 f9bc 	bl	800c6d0 <__multadd>
 800c358:	4680      	mov	r8, r0
 800c35a:	4607      	mov	r7, r0
 800c35c:	f109 0901 	add.w	r9, r9, #1
 800c360:	e772      	b.n	800c248 <_dtoa_r+0x9f0>
 800c362:	f000 f9b5 	bl	800c6d0 <__multadd>
 800c366:	4639      	mov	r1, r7
 800c368:	4680      	mov	r8, r0
 800c36a:	2300      	movs	r3, #0
 800c36c:	220a      	movs	r2, #10
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f9ae 	bl	800c6d0 <__multadd>
 800c374:	4607      	mov	r7, r0
 800c376:	e7f1      	b.n	800c35c <_dtoa_r+0xb04>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	9302      	str	r3, [sp, #8]
 800c37c:	9d01      	ldr	r5, [sp, #4]
 800c37e:	ee18 0a10 	vmov	r0, s16
 800c382:	4631      	mov	r1, r6
 800c384:	f7ff f9dc 	bl	800b740 <quorem>
 800c388:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c38c:	9b01      	ldr	r3, [sp, #4]
 800c38e:	f805 ab01 	strb.w	sl, [r5], #1
 800c392:	1aea      	subs	r2, r5, r3
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	4293      	cmp	r3, r2
 800c398:	dd09      	ble.n	800c3ae <_dtoa_r+0xb56>
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	2300      	movs	r3, #0
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f994 	bl	800c6d0 <__multadd>
 800c3a8:	ee08 0a10 	vmov	s16, r0
 800c3ac:	e7e7      	b.n	800c37e <_dtoa_r+0xb26>
 800c3ae:	9b02      	ldr	r3, [sp, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bfc8      	it	gt
 800c3b4:	461d      	movgt	r5, r3
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	bfd8      	it	le
 800c3ba:	2501      	movle	r5, #1
 800c3bc:	441d      	add	r5, r3
 800c3be:	f04f 0800 	mov.w	r8, #0
 800c3c2:	ee18 1a10 	vmov	r1, s16
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fb31 	bl	800ca30 <__lshift>
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	ee08 0a10 	vmov	s16, r0
 800c3d4:	f000 fb9c 	bl	800cb10 <__mcmp>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	dc91      	bgt.n	800c300 <_dtoa_r+0xaa8>
 800c3dc:	d102      	bne.n	800c3e4 <_dtoa_r+0xb8c>
 800c3de:	f01a 0f01 	tst.w	sl, #1
 800c3e2:	d18d      	bne.n	800c300 <_dtoa_r+0xaa8>
 800c3e4:	462b      	mov	r3, r5
 800c3e6:	461d      	mov	r5, r3
 800c3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3ec:	2a30      	cmp	r2, #48	; 0x30
 800c3ee:	d0fa      	beq.n	800c3e6 <_dtoa_r+0xb8e>
 800c3f0:	e6d7      	b.n	800c1a2 <_dtoa_r+0x94a>
 800c3f2:	9a01      	ldr	r2, [sp, #4]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d184      	bne.n	800c302 <_dtoa_r+0xaaa>
 800c3f8:	9b00      	ldr	r3, [sp, #0]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	2331      	movs	r3, #49	; 0x31
 800c400:	7013      	strb	r3, [r2, #0]
 800c402:	e6ce      	b.n	800c1a2 <_dtoa_r+0x94a>
 800c404:	4b09      	ldr	r3, [pc, #36]	; (800c42c <_dtoa_r+0xbd4>)
 800c406:	f7ff ba95 	b.w	800b934 <_dtoa_r+0xdc>
 800c40a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f47f aa6e 	bne.w	800b8ee <_dtoa_r+0x96>
 800c412:	4b07      	ldr	r3, [pc, #28]	; (800c430 <_dtoa_r+0xbd8>)
 800c414:	f7ff ba8e 	b.w	800b934 <_dtoa_r+0xdc>
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dcae      	bgt.n	800c37c <_dtoa_r+0xb24>
 800c41e:	9b06      	ldr	r3, [sp, #24]
 800c420:	2b02      	cmp	r3, #2
 800c422:	f73f aea8 	bgt.w	800c176 <_dtoa_r+0x91e>
 800c426:	e7a9      	b.n	800c37c <_dtoa_r+0xb24>
 800c428:	0801056b 	.word	0x0801056b
 800c42c:	080104c8 	.word	0x080104c8
 800c430:	080104ec 	.word	0x080104ec

0800c434 <__sflush_r>:
 800c434:	898a      	ldrh	r2, [r1, #12]
 800c436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43a:	4605      	mov	r5, r0
 800c43c:	0710      	lsls	r0, r2, #28
 800c43e:	460c      	mov	r4, r1
 800c440:	d458      	bmi.n	800c4f4 <__sflush_r+0xc0>
 800c442:	684b      	ldr	r3, [r1, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	dc05      	bgt.n	800c454 <__sflush_r+0x20>
 800c448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dc02      	bgt.n	800c454 <__sflush_r+0x20>
 800c44e:	2000      	movs	r0, #0
 800c450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c456:	2e00      	cmp	r6, #0
 800c458:	d0f9      	beq.n	800c44e <__sflush_r+0x1a>
 800c45a:	2300      	movs	r3, #0
 800c45c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c460:	682f      	ldr	r7, [r5, #0]
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	d032      	beq.n	800c4cc <__sflush_r+0x98>
 800c466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	075a      	lsls	r2, r3, #29
 800c46c:	d505      	bpl.n	800c47a <__sflush_r+0x46>
 800c46e:	6863      	ldr	r3, [r4, #4]
 800c470:	1ac0      	subs	r0, r0, r3
 800c472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c474:	b10b      	cbz	r3, 800c47a <__sflush_r+0x46>
 800c476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c478:	1ac0      	subs	r0, r0, r3
 800c47a:	2300      	movs	r3, #0
 800c47c:	4602      	mov	r2, r0
 800c47e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c480:	6a21      	ldr	r1, [r4, #32]
 800c482:	4628      	mov	r0, r5
 800c484:	47b0      	blx	r6
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	d106      	bne.n	800c49a <__sflush_r+0x66>
 800c48c:	6829      	ldr	r1, [r5, #0]
 800c48e:	291d      	cmp	r1, #29
 800c490:	d82c      	bhi.n	800c4ec <__sflush_r+0xb8>
 800c492:	4a2a      	ldr	r2, [pc, #168]	; (800c53c <__sflush_r+0x108>)
 800c494:	40ca      	lsrs	r2, r1
 800c496:	07d6      	lsls	r6, r2, #31
 800c498:	d528      	bpl.n	800c4ec <__sflush_r+0xb8>
 800c49a:	2200      	movs	r2, #0
 800c49c:	6062      	str	r2, [r4, #4]
 800c49e:	04d9      	lsls	r1, r3, #19
 800c4a0:	6922      	ldr	r2, [r4, #16]
 800c4a2:	6022      	str	r2, [r4, #0]
 800c4a4:	d504      	bpl.n	800c4b0 <__sflush_r+0x7c>
 800c4a6:	1c42      	adds	r2, r0, #1
 800c4a8:	d101      	bne.n	800c4ae <__sflush_r+0x7a>
 800c4aa:	682b      	ldr	r3, [r5, #0]
 800c4ac:	b903      	cbnz	r3, 800c4b0 <__sflush_r+0x7c>
 800c4ae:	6560      	str	r0, [r4, #84]	; 0x54
 800c4b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4b2:	602f      	str	r7, [r5, #0]
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	d0ca      	beq.n	800c44e <__sflush_r+0x1a>
 800c4b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4bc:	4299      	cmp	r1, r3
 800c4be:	d002      	beq.n	800c4c6 <__sflush_r+0x92>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f000 fc3d 	bl	800cd40 <_free_r>
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ca:	e7c1      	b.n	800c450 <__sflush_r+0x1c>
 800c4cc:	6a21      	ldr	r1, [r4, #32]
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	47b0      	blx	r6
 800c4d4:	1c41      	adds	r1, r0, #1
 800c4d6:	d1c7      	bne.n	800c468 <__sflush_r+0x34>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0c4      	beq.n	800c468 <__sflush_r+0x34>
 800c4de:	2b1d      	cmp	r3, #29
 800c4e0:	d001      	beq.n	800c4e6 <__sflush_r+0xb2>
 800c4e2:	2b16      	cmp	r3, #22
 800c4e4:	d101      	bne.n	800c4ea <__sflush_r+0xb6>
 800c4e6:	602f      	str	r7, [r5, #0]
 800c4e8:	e7b1      	b.n	800c44e <__sflush_r+0x1a>
 800c4ea:	89a3      	ldrh	r3, [r4, #12]
 800c4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f0:	81a3      	strh	r3, [r4, #12]
 800c4f2:	e7ad      	b.n	800c450 <__sflush_r+0x1c>
 800c4f4:	690f      	ldr	r7, [r1, #16]
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	d0a9      	beq.n	800c44e <__sflush_r+0x1a>
 800c4fa:	0793      	lsls	r3, r2, #30
 800c4fc:	680e      	ldr	r6, [r1, #0]
 800c4fe:	bf08      	it	eq
 800c500:	694b      	ldreq	r3, [r1, #20]
 800c502:	600f      	str	r7, [r1, #0]
 800c504:	bf18      	it	ne
 800c506:	2300      	movne	r3, #0
 800c508:	eba6 0807 	sub.w	r8, r6, r7
 800c50c:	608b      	str	r3, [r1, #8]
 800c50e:	f1b8 0f00 	cmp.w	r8, #0
 800c512:	dd9c      	ble.n	800c44e <__sflush_r+0x1a>
 800c514:	6a21      	ldr	r1, [r4, #32]
 800c516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c518:	4643      	mov	r3, r8
 800c51a:	463a      	mov	r2, r7
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b0      	blx	r6
 800c520:	2800      	cmp	r0, #0
 800c522:	dc06      	bgt.n	800c532 <__sflush_r+0xfe>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c52a:	81a3      	strh	r3, [r4, #12]
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	e78e      	b.n	800c450 <__sflush_r+0x1c>
 800c532:	4407      	add	r7, r0
 800c534:	eba8 0800 	sub.w	r8, r8, r0
 800c538:	e7e9      	b.n	800c50e <__sflush_r+0xda>
 800c53a:	bf00      	nop
 800c53c:	20400001 	.word	0x20400001

0800c540 <_fflush_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	690b      	ldr	r3, [r1, #16]
 800c544:	4605      	mov	r5, r0
 800c546:	460c      	mov	r4, r1
 800c548:	b913      	cbnz	r3, 800c550 <_fflush_r+0x10>
 800c54a:	2500      	movs	r5, #0
 800c54c:	4628      	mov	r0, r5
 800c54e:	bd38      	pop	{r3, r4, r5, pc}
 800c550:	b118      	cbz	r0, 800c55a <_fflush_r+0x1a>
 800c552:	6983      	ldr	r3, [r0, #24]
 800c554:	b90b      	cbnz	r3, 800c55a <_fflush_r+0x1a>
 800c556:	f7fe faa3 	bl	800aaa0 <__sinit>
 800c55a:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <_fflush_r+0x6c>)
 800c55c:	429c      	cmp	r4, r3
 800c55e:	d11b      	bne.n	800c598 <_fflush_r+0x58>
 800c560:	686c      	ldr	r4, [r5, #4]
 800c562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0ef      	beq.n	800c54a <_fflush_r+0xa>
 800c56a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c56c:	07d0      	lsls	r0, r2, #31
 800c56e:	d404      	bmi.n	800c57a <_fflush_r+0x3a>
 800c570:	0599      	lsls	r1, r3, #22
 800c572:	d402      	bmi.n	800c57a <_fflush_r+0x3a>
 800c574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c576:	f7fe fb56 	bl	800ac26 <__retarget_lock_acquire_recursive>
 800c57a:	4628      	mov	r0, r5
 800c57c:	4621      	mov	r1, r4
 800c57e:	f7ff ff59 	bl	800c434 <__sflush_r>
 800c582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c584:	07da      	lsls	r2, r3, #31
 800c586:	4605      	mov	r5, r0
 800c588:	d4e0      	bmi.n	800c54c <_fflush_r+0xc>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	059b      	lsls	r3, r3, #22
 800c58e:	d4dd      	bmi.n	800c54c <_fflush_r+0xc>
 800c590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c592:	f7fe fb49 	bl	800ac28 <__retarget_lock_release_recursive>
 800c596:	e7d9      	b.n	800c54c <_fflush_r+0xc>
 800c598:	4b05      	ldr	r3, [pc, #20]	; (800c5b0 <_fflush_r+0x70>)
 800c59a:	429c      	cmp	r4, r3
 800c59c:	d101      	bne.n	800c5a2 <_fflush_r+0x62>
 800c59e:	68ac      	ldr	r4, [r5, #8]
 800c5a0:	e7df      	b.n	800c562 <_fflush_r+0x22>
 800c5a2:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <_fflush_r+0x74>)
 800c5a4:	429c      	cmp	r4, r3
 800c5a6:	bf08      	it	eq
 800c5a8:	68ec      	ldreq	r4, [r5, #12]
 800c5aa:	e7da      	b.n	800c562 <_fflush_r+0x22>
 800c5ac:	08010474 	.word	0x08010474
 800c5b0:	08010494 	.word	0x08010494
 800c5b4:	08010454 	.word	0x08010454

0800c5b8 <_localeconv_r>:
 800c5b8:	4800      	ldr	r0, [pc, #0]	; (800c5bc <_localeconv_r+0x4>)
 800c5ba:	4770      	bx	lr
 800c5bc:	200001cc 	.word	0x200001cc

0800c5c0 <_lseek_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d07      	ldr	r5, [pc, #28]	; (800c5e0 <_lseek_r+0x20>)
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	602a      	str	r2, [r5, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f7fd fff9 	bl	800a5c6 <_lseek>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_lseek_r+0x1e>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_lseek_r+0x1e>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	20005120 	.word	0x20005120

0800c5e4 <malloc>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <malloc+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f7fe bb55 	b.w	800ac98 <_malloc_r>
 800c5ee:	bf00      	nop
 800c5f0:	20000078 	.word	0x20000078

0800c5f4 <__malloc_lock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__malloc_lock+0x8>)
 800c5f6:	f7fe bb16 	b.w	800ac26 <__retarget_lock_acquire_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	20005114 	.word	0x20005114

0800c600 <__malloc_unlock>:
 800c600:	4801      	ldr	r0, [pc, #4]	; (800c608 <__malloc_unlock+0x8>)
 800c602:	f7fe bb11 	b.w	800ac28 <__retarget_lock_release_recursive>
 800c606:	bf00      	nop
 800c608:	20005114 	.word	0x20005114

0800c60c <_Balloc>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c610:	4604      	mov	r4, r0
 800c612:	460d      	mov	r5, r1
 800c614:	b976      	cbnz	r6, 800c634 <_Balloc+0x28>
 800c616:	2010      	movs	r0, #16
 800c618:	f7ff ffe4 	bl	800c5e4 <malloc>
 800c61c:	4602      	mov	r2, r0
 800c61e:	6260      	str	r0, [r4, #36]	; 0x24
 800c620:	b920      	cbnz	r0, 800c62c <_Balloc+0x20>
 800c622:	4b18      	ldr	r3, [pc, #96]	; (800c684 <_Balloc+0x78>)
 800c624:	4818      	ldr	r0, [pc, #96]	; (800c688 <_Balloc+0x7c>)
 800c626:	2166      	movs	r1, #102	; 0x66
 800c628:	f000 fbe8 	bl	800cdfc <__assert_func>
 800c62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c630:	6006      	str	r6, [r0, #0]
 800c632:	60c6      	str	r6, [r0, #12]
 800c634:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c636:	68f3      	ldr	r3, [r6, #12]
 800c638:	b183      	cbz	r3, 800c65c <_Balloc+0x50>
 800c63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c642:	b9b8      	cbnz	r0, 800c674 <_Balloc+0x68>
 800c644:	2101      	movs	r1, #1
 800c646:	fa01 f605 	lsl.w	r6, r1, r5
 800c64a:	1d72      	adds	r2, r6, #5
 800c64c:	0092      	lsls	r2, r2, #2
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fb60 	bl	800cd14 <_calloc_r>
 800c654:	b160      	cbz	r0, 800c670 <_Balloc+0x64>
 800c656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c65a:	e00e      	b.n	800c67a <_Balloc+0x6e>
 800c65c:	2221      	movs	r2, #33	; 0x21
 800c65e:	2104      	movs	r1, #4
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fb57 	bl	800cd14 <_calloc_r>
 800c666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c668:	60f0      	str	r0, [r6, #12]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e4      	bne.n	800c63a <_Balloc+0x2e>
 800c670:	2000      	movs	r0, #0
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	6802      	ldr	r2, [r0, #0]
 800c676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c67a:	2300      	movs	r3, #0
 800c67c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c680:	e7f7      	b.n	800c672 <_Balloc+0x66>
 800c682:	bf00      	nop
 800c684:	080104f9 	.word	0x080104f9
 800c688:	0801057c 	.word	0x0801057c

0800c68c <_Bfree>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c690:	4605      	mov	r5, r0
 800c692:	460c      	mov	r4, r1
 800c694:	b976      	cbnz	r6, 800c6b4 <_Bfree+0x28>
 800c696:	2010      	movs	r0, #16
 800c698:	f7ff ffa4 	bl	800c5e4 <malloc>
 800c69c:	4602      	mov	r2, r0
 800c69e:	6268      	str	r0, [r5, #36]	; 0x24
 800c6a0:	b920      	cbnz	r0, 800c6ac <_Bfree+0x20>
 800c6a2:	4b09      	ldr	r3, [pc, #36]	; (800c6c8 <_Bfree+0x3c>)
 800c6a4:	4809      	ldr	r0, [pc, #36]	; (800c6cc <_Bfree+0x40>)
 800c6a6:	218a      	movs	r1, #138	; 0x8a
 800c6a8:	f000 fba8 	bl	800cdfc <__assert_func>
 800c6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6b0:	6006      	str	r6, [r0, #0]
 800c6b2:	60c6      	str	r6, [r0, #12]
 800c6b4:	b13c      	cbz	r4, 800c6c6 <_Bfree+0x3a>
 800c6b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6b8:	6862      	ldr	r2, [r4, #4]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6c0:	6021      	str	r1, [r4, #0]
 800c6c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	080104f9 	.word	0x080104f9
 800c6cc:	0801057c 	.word	0x0801057c

0800c6d0 <__multadd>:
 800c6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d4:	690d      	ldr	r5, [r1, #16]
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	460c      	mov	r4, r1
 800c6da:	461e      	mov	r6, r3
 800c6dc:	f101 0c14 	add.w	ip, r1, #20
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c6e6:	b299      	uxth	r1, r3
 800c6e8:	fb02 6101 	mla	r1, r2, r1, r6
 800c6ec:	0c1e      	lsrs	r6, r3, #16
 800c6ee:	0c0b      	lsrs	r3, r1, #16
 800c6f0:	fb02 3306 	mla	r3, r2, r6, r3
 800c6f4:	b289      	uxth	r1, r1
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6fc:	4285      	cmp	r5, r0
 800c6fe:	f84c 1b04 	str.w	r1, [ip], #4
 800c702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c706:	dcec      	bgt.n	800c6e2 <__multadd+0x12>
 800c708:	b30e      	cbz	r6, 800c74e <__multadd+0x7e>
 800c70a:	68a3      	ldr	r3, [r4, #8]
 800c70c:	42ab      	cmp	r3, r5
 800c70e:	dc19      	bgt.n	800c744 <__multadd+0x74>
 800c710:	6861      	ldr	r1, [r4, #4]
 800c712:	4638      	mov	r0, r7
 800c714:	3101      	adds	r1, #1
 800c716:	f7ff ff79 	bl	800c60c <_Balloc>
 800c71a:	4680      	mov	r8, r0
 800c71c:	b928      	cbnz	r0, 800c72a <__multadd+0x5a>
 800c71e:	4602      	mov	r2, r0
 800c720:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <__multadd+0x84>)
 800c722:	480d      	ldr	r0, [pc, #52]	; (800c758 <__multadd+0x88>)
 800c724:	21b5      	movs	r1, #181	; 0xb5
 800c726:	f000 fb69 	bl	800cdfc <__assert_func>
 800c72a:	6922      	ldr	r2, [r4, #16]
 800c72c:	3202      	adds	r2, #2
 800c72e:	f104 010c 	add.w	r1, r4, #12
 800c732:	0092      	lsls	r2, r2, #2
 800c734:	300c      	adds	r0, #12
 800c736:	f7fe fa78 	bl	800ac2a <memcpy>
 800c73a:	4621      	mov	r1, r4
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7ff ffa5 	bl	800c68c <_Bfree>
 800c742:	4644      	mov	r4, r8
 800c744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c748:	3501      	adds	r5, #1
 800c74a:	615e      	str	r6, [r3, #20]
 800c74c:	6125      	str	r5, [r4, #16]
 800c74e:	4620      	mov	r0, r4
 800c750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c754:	0801056b 	.word	0x0801056b
 800c758:	0801057c 	.word	0x0801057c

0800c75c <__hi0bits>:
 800c75c:	0c03      	lsrs	r3, r0, #16
 800c75e:	041b      	lsls	r3, r3, #16
 800c760:	b9d3      	cbnz	r3, 800c798 <__hi0bits+0x3c>
 800c762:	0400      	lsls	r0, r0, #16
 800c764:	2310      	movs	r3, #16
 800c766:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c76a:	bf04      	itt	eq
 800c76c:	0200      	lsleq	r0, r0, #8
 800c76e:	3308      	addeq	r3, #8
 800c770:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c774:	bf04      	itt	eq
 800c776:	0100      	lsleq	r0, r0, #4
 800c778:	3304      	addeq	r3, #4
 800c77a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c77e:	bf04      	itt	eq
 800c780:	0080      	lsleq	r0, r0, #2
 800c782:	3302      	addeq	r3, #2
 800c784:	2800      	cmp	r0, #0
 800c786:	db05      	blt.n	800c794 <__hi0bits+0x38>
 800c788:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c78c:	f103 0301 	add.w	r3, r3, #1
 800c790:	bf08      	it	eq
 800c792:	2320      	moveq	r3, #32
 800c794:	4618      	mov	r0, r3
 800c796:	4770      	bx	lr
 800c798:	2300      	movs	r3, #0
 800c79a:	e7e4      	b.n	800c766 <__hi0bits+0xa>

0800c79c <__lo0bits>:
 800c79c:	6803      	ldr	r3, [r0, #0]
 800c79e:	f013 0207 	ands.w	r2, r3, #7
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	d00b      	beq.n	800c7be <__lo0bits+0x22>
 800c7a6:	07da      	lsls	r2, r3, #31
 800c7a8:	d423      	bmi.n	800c7f2 <__lo0bits+0x56>
 800c7aa:	0798      	lsls	r0, r3, #30
 800c7ac:	bf49      	itett	mi
 800c7ae:	085b      	lsrmi	r3, r3, #1
 800c7b0:	089b      	lsrpl	r3, r3, #2
 800c7b2:	2001      	movmi	r0, #1
 800c7b4:	600b      	strmi	r3, [r1, #0]
 800c7b6:	bf5c      	itt	pl
 800c7b8:	600b      	strpl	r3, [r1, #0]
 800c7ba:	2002      	movpl	r0, #2
 800c7bc:	4770      	bx	lr
 800c7be:	b298      	uxth	r0, r3
 800c7c0:	b9a8      	cbnz	r0, 800c7ee <__lo0bits+0x52>
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	2010      	movs	r0, #16
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	b90a      	cbnz	r2, 800c7ce <__lo0bits+0x32>
 800c7ca:	3008      	adds	r0, #8
 800c7cc:	0a1b      	lsrs	r3, r3, #8
 800c7ce:	071a      	lsls	r2, r3, #28
 800c7d0:	bf04      	itt	eq
 800c7d2:	091b      	lsreq	r3, r3, #4
 800c7d4:	3004      	addeq	r0, #4
 800c7d6:	079a      	lsls	r2, r3, #30
 800c7d8:	bf04      	itt	eq
 800c7da:	089b      	lsreq	r3, r3, #2
 800c7dc:	3002      	addeq	r0, #2
 800c7de:	07da      	lsls	r2, r3, #31
 800c7e0:	d403      	bmi.n	800c7ea <__lo0bits+0x4e>
 800c7e2:	085b      	lsrs	r3, r3, #1
 800c7e4:	f100 0001 	add.w	r0, r0, #1
 800c7e8:	d005      	beq.n	800c7f6 <__lo0bits+0x5a>
 800c7ea:	600b      	str	r3, [r1, #0]
 800c7ec:	4770      	bx	lr
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	e7e9      	b.n	800c7c6 <__lo0bits+0x2a>
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	4770      	bx	lr
 800c7f6:	2020      	movs	r0, #32
 800c7f8:	4770      	bx	lr
	...

0800c7fc <__i2b>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	2101      	movs	r1, #1
 800c802:	f7ff ff03 	bl	800c60c <_Balloc>
 800c806:	4602      	mov	r2, r0
 800c808:	b928      	cbnz	r0, 800c816 <__i2b+0x1a>
 800c80a:	4b05      	ldr	r3, [pc, #20]	; (800c820 <__i2b+0x24>)
 800c80c:	4805      	ldr	r0, [pc, #20]	; (800c824 <__i2b+0x28>)
 800c80e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c812:	f000 faf3 	bl	800cdfc <__assert_func>
 800c816:	2301      	movs	r3, #1
 800c818:	6144      	str	r4, [r0, #20]
 800c81a:	6103      	str	r3, [r0, #16]
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	bf00      	nop
 800c820:	0801056b 	.word	0x0801056b
 800c824:	0801057c 	.word	0x0801057c

0800c828 <__multiply>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4691      	mov	r9, r2
 800c82e:	690a      	ldr	r2, [r1, #16]
 800c830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c834:	429a      	cmp	r2, r3
 800c836:	bfb8      	it	lt
 800c838:	460b      	movlt	r3, r1
 800c83a:	460c      	mov	r4, r1
 800c83c:	bfbc      	itt	lt
 800c83e:	464c      	movlt	r4, r9
 800c840:	4699      	movlt	r9, r3
 800c842:	6927      	ldr	r7, [r4, #16]
 800c844:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c848:	68a3      	ldr	r3, [r4, #8]
 800c84a:	6861      	ldr	r1, [r4, #4]
 800c84c:	eb07 060a 	add.w	r6, r7, sl
 800c850:	42b3      	cmp	r3, r6
 800c852:	b085      	sub	sp, #20
 800c854:	bfb8      	it	lt
 800c856:	3101      	addlt	r1, #1
 800c858:	f7ff fed8 	bl	800c60c <_Balloc>
 800c85c:	b930      	cbnz	r0, 800c86c <__multiply+0x44>
 800c85e:	4602      	mov	r2, r0
 800c860:	4b44      	ldr	r3, [pc, #272]	; (800c974 <__multiply+0x14c>)
 800c862:	4845      	ldr	r0, [pc, #276]	; (800c978 <__multiply+0x150>)
 800c864:	f240 115d 	movw	r1, #349	; 0x15d
 800c868:	f000 fac8 	bl	800cdfc <__assert_func>
 800c86c:	f100 0514 	add.w	r5, r0, #20
 800c870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c874:	462b      	mov	r3, r5
 800c876:	2200      	movs	r2, #0
 800c878:	4543      	cmp	r3, r8
 800c87a:	d321      	bcc.n	800c8c0 <__multiply+0x98>
 800c87c:	f104 0314 	add.w	r3, r4, #20
 800c880:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c884:	f109 0314 	add.w	r3, r9, #20
 800c888:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c88c:	9202      	str	r2, [sp, #8]
 800c88e:	1b3a      	subs	r2, r7, r4
 800c890:	3a15      	subs	r2, #21
 800c892:	f022 0203 	bic.w	r2, r2, #3
 800c896:	3204      	adds	r2, #4
 800c898:	f104 0115 	add.w	r1, r4, #21
 800c89c:	428f      	cmp	r7, r1
 800c89e:	bf38      	it	cc
 800c8a0:	2204      	movcc	r2, #4
 800c8a2:	9201      	str	r2, [sp, #4]
 800c8a4:	9a02      	ldr	r2, [sp, #8]
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d80c      	bhi.n	800c8c6 <__multiply+0x9e>
 800c8ac:	2e00      	cmp	r6, #0
 800c8ae:	dd03      	ble.n	800c8b8 <__multiply+0x90>
 800c8b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d05a      	beq.n	800c96e <__multiply+0x146>
 800c8b8:	6106      	str	r6, [r0, #16]
 800c8ba:	b005      	add	sp, #20
 800c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c0:	f843 2b04 	str.w	r2, [r3], #4
 800c8c4:	e7d8      	b.n	800c878 <__multiply+0x50>
 800c8c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8ca:	f1ba 0f00 	cmp.w	sl, #0
 800c8ce:	d024      	beq.n	800c91a <__multiply+0xf2>
 800c8d0:	f104 0e14 	add.w	lr, r4, #20
 800c8d4:	46a9      	mov	r9, r5
 800c8d6:	f04f 0c00 	mov.w	ip, #0
 800c8da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8de:	f8d9 1000 	ldr.w	r1, [r9]
 800c8e2:	fa1f fb82 	uxth.w	fp, r2
 800c8e6:	b289      	uxth	r1, r1
 800c8e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800c8f4:	4461      	add	r1, ip
 800c8f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800c8fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c902:	b289      	uxth	r1, r1
 800c904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c908:	4577      	cmp	r7, lr
 800c90a:	f849 1b04 	str.w	r1, [r9], #4
 800c90e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c912:	d8e2      	bhi.n	800c8da <__multiply+0xb2>
 800c914:	9a01      	ldr	r2, [sp, #4]
 800c916:	f845 c002 	str.w	ip, [r5, r2]
 800c91a:	9a03      	ldr	r2, [sp, #12]
 800c91c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c920:	3304      	adds	r3, #4
 800c922:	f1b9 0f00 	cmp.w	r9, #0
 800c926:	d020      	beq.n	800c96a <__multiply+0x142>
 800c928:	6829      	ldr	r1, [r5, #0]
 800c92a:	f104 0c14 	add.w	ip, r4, #20
 800c92e:	46ae      	mov	lr, r5
 800c930:	f04f 0a00 	mov.w	sl, #0
 800c934:	f8bc b000 	ldrh.w	fp, [ip]
 800c938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c93c:	fb09 220b 	mla	r2, r9, fp, r2
 800c940:	4492      	add	sl, r2
 800c942:	b289      	uxth	r1, r1
 800c944:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c948:	f84e 1b04 	str.w	r1, [lr], #4
 800c94c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c950:	f8be 1000 	ldrh.w	r1, [lr]
 800c954:	0c12      	lsrs	r2, r2, #16
 800c956:	fb09 1102 	mla	r1, r9, r2, r1
 800c95a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c95e:	4567      	cmp	r7, ip
 800c960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c964:	d8e6      	bhi.n	800c934 <__multiply+0x10c>
 800c966:	9a01      	ldr	r2, [sp, #4]
 800c968:	50a9      	str	r1, [r5, r2]
 800c96a:	3504      	adds	r5, #4
 800c96c:	e79a      	b.n	800c8a4 <__multiply+0x7c>
 800c96e:	3e01      	subs	r6, #1
 800c970:	e79c      	b.n	800c8ac <__multiply+0x84>
 800c972:	bf00      	nop
 800c974:	0801056b 	.word	0x0801056b
 800c978:	0801057c 	.word	0x0801057c

0800c97c <__pow5mult>:
 800c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c980:	4615      	mov	r5, r2
 800c982:	f012 0203 	ands.w	r2, r2, #3
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	d007      	beq.n	800c99c <__pow5mult+0x20>
 800c98c:	4c25      	ldr	r4, [pc, #148]	; (800ca24 <__pow5mult+0xa8>)
 800c98e:	3a01      	subs	r2, #1
 800c990:	2300      	movs	r3, #0
 800c992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c996:	f7ff fe9b 	bl	800c6d0 <__multadd>
 800c99a:	4607      	mov	r7, r0
 800c99c:	10ad      	asrs	r5, r5, #2
 800c99e:	d03d      	beq.n	800ca1c <__pow5mult+0xa0>
 800c9a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9a2:	b97c      	cbnz	r4, 800c9c4 <__pow5mult+0x48>
 800c9a4:	2010      	movs	r0, #16
 800c9a6:	f7ff fe1d 	bl	800c5e4 <malloc>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	6270      	str	r0, [r6, #36]	; 0x24
 800c9ae:	b928      	cbnz	r0, 800c9bc <__pow5mult+0x40>
 800c9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ca28 <__pow5mult+0xac>)
 800c9b2:	481e      	ldr	r0, [pc, #120]	; (800ca2c <__pow5mult+0xb0>)
 800c9b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9b8:	f000 fa20 	bl	800cdfc <__assert_func>
 800c9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9c0:	6004      	str	r4, [r0, #0]
 800c9c2:	60c4      	str	r4, [r0, #12]
 800c9c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9cc:	b94c      	cbnz	r4, 800c9e2 <__pow5mult+0x66>
 800c9ce:	f240 2171 	movw	r1, #625	; 0x271
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7ff ff12 	bl	800c7fc <__i2b>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9de:	4604      	mov	r4, r0
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	f04f 0900 	mov.w	r9, #0
 800c9e6:	07eb      	lsls	r3, r5, #31
 800c9e8:	d50a      	bpl.n	800ca00 <__pow5mult+0x84>
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ff1a 	bl	800c828 <__multiply>
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff fe47 	bl	800c68c <_Bfree>
 800c9fe:	4647      	mov	r7, r8
 800ca00:	106d      	asrs	r5, r5, #1
 800ca02:	d00b      	beq.n	800ca1c <__pow5mult+0xa0>
 800ca04:	6820      	ldr	r0, [r4, #0]
 800ca06:	b938      	cbnz	r0, 800ca18 <__pow5mult+0x9c>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff ff0b 	bl	800c828 <__multiply>
 800ca12:	6020      	str	r0, [r4, #0]
 800ca14:	f8c0 9000 	str.w	r9, [r0]
 800ca18:	4604      	mov	r4, r0
 800ca1a:	e7e4      	b.n	800c9e6 <__pow5mult+0x6a>
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	bf00      	nop
 800ca24:	080106c8 	.word	0x080106c8
 800ca28:	080104f9 	.word	0x080104f9
 800ca2c:	0801057c 	.word	0x0801057c

0800ca30 <__lshift>:
 800ca30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	460c      	mov	r4, r1
 800ca36:	6849      	ldr	r1, [r1, #4]
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca3e:	68a3      	ldr	r3, [r4, #8]
 800ca40:	4607      	mov	r7, r0
 800ca42:	4691      	mov	r9, r2
 800ca44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca48:	f108 0601 	add.w	r6, r8, #1
 800ca4c:	42b3      	cmp	r3, r6
 800ca4e:	db0b      	blt.n	800ca68 <__lshift+0x38>
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff fddb 	bl	800c60c <_Balloc>
 800ca56:	4605      	mov	r5, r0
 800ca58:	b948      	cbnz	r0, 800ca6e <__lshift+0x3e>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	4b2a      	ldr	r3, [pc, #168]	; (800cb08 <__lshift+0xd8>)
 800ca5e:	482b      	ldr	r0, [pc, #172]	; (800cb0c <__lshift+0xdc>)
 800ca60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca64:	f000 f9ca 	bl	800cdfc <__assert_func>
 800ca68:	3101      	adds	r1, #1
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	e7ee      	b.n	800ca4c <__lshift+0x1c>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f100 0114 	add.w	r1, r0, #20
 800ca74:	f100 0210 	add.w	r2, r0, #16
 800ca78:	4618      	mov	r0, r3
 800ca7a:	4553      	cmp	r3, sl
 800ca7c:	db37      	blt.n	800caee <__lshift+0xbe>
 800ca7e:	6920      	ldr	r0, [r4, #16]
 800ca80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca84:	f104 0314 	add.w	r3, r4, #20
 800ca88:	f019 091f 	ands.w	r9, r9, #31
 800ca8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ca94:	d02f      	beq.n	800caf6 <__lshift+0xc6>
 800ca96:	f1c9 0e20 	rsb	lr, r9, #32
 800ca9a:	468a      	mov	sl, r1
 800ca9c:	f04f 0c00 	mov.w	ip, #0
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	fa02 f209 	lsl.w	r2, r2, r9
 800caa6:	ea42 020c 	orr.w	r2, r2, ip
 800caaa:	f84a 2b04 	str.w	r2, [sl], #4
 800caae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab2:	4298      	cmp	r0, r3
 800cab4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cab8:	d8f2      	bhi.n	800caa0 <__lshift+0x70>
 800caba:	1b03      	subs	r3, r0, r4
 800cabc:	3b15      	subs	r3, #21
 800cabe:	f023 0303 	bic.w	r3, r3, #3
 800cac2:	3304      	adds	r3, #4
 800cac4:	f104 0215 	add.w	r2, r4, #21
 800cac8:	4290      	cmp	r0, r2
 800caca:	bf38      	it	cc
 800cacc:	2304      	movcc	r3, #4
 800cace:	f841 c003 	str.w	ip, [r1, r3]
 800cad2:	f1bc 0f00 	cmp.w	ip, #0
 800cad6:	d001      	beq.n	800cadc <__lshift+0xac>
 800cad8:	f108 0602 	add.w	r6, r8, #2
 800cadc:	3e01      	subs	r6, #1
 800cade:	4638      	mov	r0, r7
 800cae0:	612e      	str	r6, [r5, #16]
 800cae2:	4621      	mov	r1, r4
 800cae4:	f7ff fdd2 	bl	800c68c <_Bfree>
 800cae8:	4628      	mov	r0, r5
 800caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caee:	f842 0f04 	str.w	r0, [r2, #4]!
 800caf2:	3301      	adds	r3, #1
 800caf4:	e7c1      	b.n	800ca7a <__lshift+0x4a>
 800caf6:	3904      	subs	r1, #4
 800caf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cafc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb00:	4298      	cmp	r0, r3
 800cb02:	d8f9      	bhi.n	800caf8 <__lshift+0xc8>
 800cb04:	e7ea      	b.n	800cadc <__lshift+0xac>
 800cb06:	bf00      	nop
 800cb08:	0801056b 	.word	0x0801056b
 800cb0c:	0801057c 	.word	0x0801057c

0800cb10 <__mcmp>:
 800cb10:	b530      	push	{r4, r5, lr}
 800cb12:	6902      	ldr	r2, [r0, #16]
 800cb14:	690c      	ldr	r4, [r1, #16]
 800cb16:	1b12      	subs	r2, r2, r4
 800cb18:	d10e      	bne.n	800cb38 <__mcmp+0x28>
 800cb1a:	f100 0314 	add.w	r3, r0, #20
 800cb1e:	3114      	adds	r1, #20
 800cb20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb30:	42a5      	cmp	r5, r4
 800cb32:	d003      	beq.n	800cb3c <__mcmp+0x2c>
 800cb34:	d305      	bcc.n	800cb42 <__mcmp+0x32>
 800cb36:	2201      	movs	r2, #1
 800cb38:	4610      	mov	r0, r2
 800cb3a:	bd30      	pop	{r4, r5, pc}
 800cb3c:	4283      	cmp	r3, r0
 800cb3e:	d3f3      	bcc.n	800cb28 <__mcmp+0x18>
 800cb40:	e7fa      	b.n	800cb38 <__mcmp+0x28>
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	e7f7      	b.n	800cb38 <__mcmp+0x28>

0800cb48 <__mdiff>:
 800cb48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	4606      	mov	r6, r0
 800cb50:	4611      	mov	r1, r2
 800cb52:	4620      	mov	r0, r4
 800cb54:	4690      	mov	r8, r2
 800cb56:	f7ff ffdb 	bl	800cb10 <__mcmp>
 800cb5a:	1e05      	subs	r5, r0, #0
 800cb5c:	d110      	bne.n	800cb80 <__mdiff+0x38>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4630      	mov	r0, r6
 800cb62:	f7ff fd53 	bl	800c60c <_Balloc>
 800cb66:	b930      	cbnz	r0, 800cb76 <__mdiff+0x2e>
 800cb68:	4b3a      	ldr	r3, [pc, #232]	; (800cc54 <__mdiff+0x10c>)
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	f240 2132 	movw	r1, #562	; 0x232
 800cb70:	4839      	ldr	r0, [pc, #228]	; (800cc58 <__mdiff+0x110>)
 800cb72:	f000 f943 	bl	800cdfc <__assert_func>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb80:	bfa4      	itt	ge
 800cb82:	4643      	movge	r3, r8
 800cb84:	46a0      	movge	r8, r4
 800cb86:	4630      	mov	r0, r6
 800cb88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb8c:	bfa6      	itte	ge
 800cb8e:	461c      	movge	r4, r3
 800cb90:	2500      	movge	r5, #0
 800cb92:	2501      	movlt	r5, #1
 800cb94:	f7ff fd3a 	bl	800c60c <_Balloc>
 800cb98:	b920      	cbnz	r0, 800cba4 <__mdiff+0x5c>
 800cb9a:	4b2e      	ldr	r3, [pc, #184]	; (800cc54 <__mdiff+0x10c>)
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cba2:	e7e5      	b.n	800cb70 <__mdiff+0x28>
 800cba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cba8:	6926      	ldr	r6, [r4, #16]
 800cbaa:	60c5      	str	r5, [r0, #12]
 800cbac:	f104 0914 	add.w	r9, r4, #20
 800cbb0:	f108 0514 	add.w	r5, r8, #20
 800cbb4:	f100 0e14 	add.w	lr, r0, #20
 800cbb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cbbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbc0:	f108 0210 	add.w	r2, r8, #16
 800cbc4:	46f2      	mov	sl, lr
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbd0:	fa1f f883 	uxth.w	r8, r3
 800cbd4:	fa11 f18b 	uxtah	r1, r1, fp
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	eba1 0808 	sub.w	r8, r1, r8
 800cbde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbe2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbe6:	fa1f f888 	uxth.w	r8, r8
 800cbea:	1419      	asrs	r1, r3, #16
 800cbec:	454e      	cmp	r6, r9
 800cbee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cbf2:	f84a 3b04 	str.w	r3, [sl], #4
 800cbf6:	d8e7      	bhi.n	800cbc8 <__mdiff+0x80>
 800cbf8:	1b33      	subs	r3, r6, r4
 800cbfa:	3b15      	subs	r3, #21
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	3304      	adds	r3, #4
 800cc02:	3415      	adds	r4, #21
 800cc04:	42a6      	cmp	r6, r4
 800cc06:	bf38      	it	cc
 800cc08:	2304      	movcc	r3, #4
 800cc0a:	441d      	add	r5, r3
 800cc0c:	4473      	add	r3, lr
 800cc0e:	469e      	mov	lr, r3
 800cc10:	462e      	mov	r6, r5
 800cc12:	4566      	cmp	r6, ip
 800cc14:	d30e      	bcc.n	800cc34 <__mdiff+0xec>
 800cc16:	f10c 0203 	add.w	r2, ip, #3
 800cc1a:	1b52      	subs	r2, r2, r5
 800cc1c:	f022 0203 	bic.w	r2, r2, #3
 800cc20:	3d03      	subs	r5, #3
 800cc22:	45ac      	cmp	ip, r5
 800cc24:	bf38      	it	cc
 800cc26:	2200      	movcc	r2, #0
 800cc28:	441a      	add	r2, r3
 800cc2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc2e:	b17b      	cbz	r3, 800cc50 <__mdiff+0x108>
 800cc30:	6107      	str	r7, [r0, #16]
 800cc32:	e7a3      	b.n	800cb7c <__mdiff+0x34>
 800cc34:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc38:	fa11 f288 	uxtah	r2, r1, r8
 800cc3c:	1414      	asrs	r4, r2, #16
 800cc3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc42:	b292      	uxth	r2, r2
 800cc44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc48:	f84e 2b04 	str.w	r2, [lr], #4
 800cc4c:	1421      	asrs	r1, r4, #16
 800cc4e:	e7e0      	b.n	800cc12 <__mdiff+0xca>
 800cc50:	3f01      	subs	r7, #1
 800cc52:	e7ea      	b.n	800cc2a <__mdiff+0xe2>
 800cc54:	0801056b 	.word	0x0801056b
 800cc58:	0801057c 	.word	0x0801057c

0800cc5c <__d2b>:
 800cc5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	4689      	mov	r9, r1
 800cc62:	2101      	movs	r1, #1
 800cc64:	ec57 6b10 	vmov	r6, r7, d0
 800cc68:	4690      	mov	r8, r2
 800cc6a:	f7ff fccf 	bl	800c60c <_Balloc>
 800cc6e:	4604      	mov	r4, r0
 800cc70:	b930      	cbnz	r0, 800cc80 <__d2b+0x24>
 800cc72:	4602      	mov	r2, r0
 800cc74:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <__d2b+0xb0>)
 800cc76:	4826      	ldr	r0, [pc, #152]	; (800cd10 <__d2b+0xb4>)
 800cc78:	f240 310a 	movw	r1, #778	; 0x30a
 800cc7c:	f000 f8be 	bl	800cdfc <__assert_func>
 800cc80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc88:	bb35      	cbnz	r5, 800ccd8 <__d2b+0x7c>
 800cc8a:	2e00      	cmp	r6, #0
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	d028      	beq.n	800cce2 <__d2b+0x86>
 800cc90:	4668      	mov	r0, sp
 800cc92:	9600      	str	r6, [sp, #0]
 800cc94:	f7ff fd82 	bl	800c79c <__lo0bits>
 800cc98:	9900      	ldr	r1, [sp, #0]
 800cc9a:	b300      	cbz	r0, 800ccde <__d2b+0x82>
 800cc9c:	9a01      	ldr	r2, [sp, #4]
 800cc9e:	f1c0 0320 	rsb	r3, r0, #32
 800cca2:	fa02 f303 	lsl.w	r3, r2, r3
 800cca6:	430b      	orrs	r3, r1
 800cca8:	40c2      	lsrs	r2, r0
 800ccaa:	6163      	str	r3, [r4, #20]
 800ccac:	9201      	str	r2, [sp, #4]
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	61a3      	str	r3, [r4, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	bf14      	ite	ne
 800ccb6:	2202      	movne	r2, #2
 800ccb8:	2201      	moveq	r2, #1
 800ccba:	6122      	str	r2, [r4, #16]
 800ccbc:	b1d5      	cbz	r5, 800ccf4 <__d2b+0x98>
 800ccbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccc2:	4405      	add	r5, r0
 800ccc4:	f8c9 5000 	str.w	r5, [r9]
 800ccc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cccc:	f8c8 0000 	str.w	r0, [r8]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	b003      	add	sp, #12
 800ccd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccdc:	e7d5      	b.n	800cc8a <__d2b+0x2e>
 800ccde:	6161      	str	r1, [r4, #20]
 800cce0:	e7e5      	b.n	800ccae <__d2b+0x52>
 800cce2:	a801      	add	r0, sp, #4
 800cce4:	f7ff fd5a 	bl	800c79c <__lo0bits>
 800cce8:	9b01      	ldr	r3, [sp, #4]
 800ccea:	6163      	str	r3, [r4, #20]
 800ccec:	2201      	movs	r2, #1
 800ccee:	6122      	str	r2, [r4, #16]
 800ccf0:	3020      	adds	r0, #32
 800ccf2:	e7e3      	b.n	800ccbc <__d2b+0x60>
 800ccf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccfc:	f8c9 0000 	str.w	r0, [r9]
 800cd00:	6918      	ldr	r0, [r3, #16]
 800cd02:	f7ff fd2b 	bl	800c75c <__hi0bits>
 800cd06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd0a:	e7df      	b.n	800cccc <__d2b+0x70>
 800cd0c:	0801056b 	.word	0x0801056b
 800cd10:	0801057c 	.word	0x0801057c

0800cd14 <_calloc_r>:
 800cd14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd16:	fba1 2402 	umull	r2, r4, r1, r2
 800cd1a:	b94c      	cbnz	r4, 800cd30 <_calloc_r+0x1c>
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	9201      	str	r2, [sp, #4]
 800cd20:	f7fd ffba 	bl	800ac98 <_malloc_r>
 800cd24:	9a01      	ldr	r2, [sp, #4]
 800cd26:	4605      	mov	r5, r0
 800cd28:	b930      	cbnz	r0, 800cd38 <_calloc_r+0x24>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	b003      	add	sp, #12
 800cd2e:	bd30      	pop	{r4, r5, pc}
 800cd30:	220c      	movs	r2, #12
 800cd32:	6002      	str	r2, [r0, #0]
 800cd34:	2500      	movs	r5, #0
 800cd36:	e7f8      	b.n	800cd2a <_calloc_r+0x16>
 800cd38:	4621      	mov	r1, r4
 800cd3a:	f7fd ff84 	bl	800ac46 <memset>
 800cd3e:	e7f4      	b.n	800cd2a <_calloc_r+0x16>

0800cd40 <_free_r>:
 800cd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd42:	2900      	cmp	r1, #0
 800cd44:	d044      	beq.n	800cdd0 <_free_r+0x90>
 800cd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd4a:	9001      	str	r0, [sp, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd52:	bfb8      	it	lt
 800cd54:	18e4      	addlt	r4, r4, r3
 800cd56:	f7ff fc4d 	bl	800c5f4 <__malloc_lock>
 800cd5a:	4a1e      	ldr	r2, [pc, #120]	; (800cdd4 <_free_r+0x94>)
 800cd5c:	9801      	ldr	r0, [sp, #4]
 800cd5e:	6813      	ldr	r3, [r2, #0]
 800cd60:	b933      	cbnz	r3, 800cd70 <_free_r+0x30>
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	6014      	str	r4, [r2, #0]
 800cd66:	b003      	add	sp, #12
 800cd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd6c:	f7ff bc48 	b.w	800c600 <__malloc_unlock>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d908      	bls.n	800cd86 <_free_r+0x46>
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	1961      	adds	r1, r4, r5
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf01      	itttt	eq
 800cd7c:	6819      	ldreq	r1, [r3, #0]
 800cd7e:	685b      	ldreq	r3, [r3, #4]
 800cd80:	1949      	addeq	r1, r1, r5
 800cd82:	6021      	streq	r1, [r4, #0]
 800cd84:	e7ed      	b.n	800cd62 <_free_r+0x22>
 800cd86:	461a      	mov	r2, r3
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	b10b      	cbz	r3, 800cd90 <_free_r+0x50>
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d9fa      	bls.n	800cd86 <_free_r+0x46>
 800cd90:	6811      	ldr	r1, [r2, #0]
 800cd92:	1855      	adds	r5, r2, r1
 800cd94:	42a5      	cmp	r5, r4
 800cd96:	d10b      	bne.n	800cdb0 <_free_r+0x70>
 800cd98:	6824      	ldr	r4, [r4, #0]
 800cd9a:	4421      	add	r1, r4
 800cd9c:	1854      	adds	r4, r2, r1
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	6011      	str	r1, [r2, #0]
 800cda2:	d1e0      	bne.n	800cd66 <_free_r+0x26>
 800cda4:	681c      	ldr	r4, [r3, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	6053      	str	r3, [r2, #4]
 800cdaa:	4421      	add	r1, r4
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	e7da      	b.n	800cd66 <_free_r+0x26>
 800cdb0:	d902      	bls.n	800cdb8 <_free_r+0x78>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	6003      	str	r3, [r0, #0]
 800cdb6:	e7d6      	b.n	800cd66 <_free_r+0x26>
 800cdb8:	6825      	ldr	r5, [r4, #0]
 800cdba:	1961      	adds	r1, r4, r5
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf04      	itt	eq
 800cdc0:	6819      	ldreq	r1, [r3, #0]
 800cdc2:	685b      	ldreq	r3, [r3, #4]
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	bf04      	itt	eq
 800cdc8:	1949      	addeq	r1, r1, r5
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	6054      	str	r4, [r2, #4]
 800cdce:	e7ca      	b.n	800cd66 <_free_r+0x26>
 800cdd0:	b003      	add	sp, #12
 800cdd2:	bd30      	pop	{r4, r5, pc}
 800cdd4:	20005118 	.word	0x20005118

0800cdd8 <_read_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d07      	ldr	r5, [pc, #28]	; (800cdf8 <_read_r+0x20>)
 800cddc:	4604      	mov	r4, r0
 800cdde:	4608      	mov	r0, r1
 800cde0:	4611      	mov	r1, r2
 800cde2:	2200      	movs	r2, #0
 800cde4:	602a      	str	r2, [r5, #0]
 800cde6:	461a      	mov	r2, r3
 800cde8:	f7fd fb95 	bl	800a516 <_read>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_read_r+0x1e>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_read_r+0x1e>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	20005120 	.word	0x20005120

0800cdfc <__assert_func>:
 800cdfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdfe:	4614      	mov	r4, r2
 800ce00:	461a      	mov	r2, r3
 800ce02:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <__assert_func+0x2c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4605      	mov	r5, r0
 800ce08:	68d8      	ldr	r0, [r3, #12]
 800ce0a:	b14c      	cbz	r4, 800ce20 <__assert_func+0x24>
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <__assert_func+0x30>)
 800ce0e:	9100      	str	r1, [sp, #0]
 800ce10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce14:	4906      	ldr	r1, [pc, #24]	; (800ce30 <__assert_func+0x34>)
 800ce16:	462b      	mov	r3, r5
 800ce18:	f000 f80e 	bl	800ce38 <fiprintf>
 800ce1c:	f000 fa58 	bl	800d2d0 <abort>
 800ce20:	4b04      	ldr	r3, [pc, #16]	; (800ce34 <__assert_func+0x38>)
 800ce22:	461c      	mov	r4, r3
 800ce24:	e7f3      	b.n	800ce0e <__assert_func+0x12>
 800ce26:	bf00      	nop
 800ce28:	20000078 	.word	0x20000078
 800ce2c:	080106d4 	.word	0x080106d4
 800ce30:	080106e1 	.word	0x080106e1
 800ce34:	0801070f 	.word	0x0801070f

0800ce38 <fiprintf>:
 800ce38:	b40e      	push	{r1, r2, r3}
 800ce3a:	b503      	push	{r0, r1, lr}
 800ce3c:	4601      	mov	r1, r0
 800ce3e:	ab03      	add	r3, sp, #12
 800ce40:	4805      	ldr	r0, [pc, #20]	; (800ce58 <fiprintf+0x20>)
 800ce42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce46:	6800      	ldr	r0, [r0, #0]
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	f000 f843 	bl	800ced4 <_vfiprintf_r>
 800ce4e:	b002      	add	sp, #8
 800ce50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce54:	b003      	add	sp, #12
 800ce56:	4770      	bx	lr
 800ce58:	20000078 	.word	0x20000078

0800ce5c <__ascii_mbtowc>:
 800ce5c:	b082      	sub	sp, #8
 800ce5e:	b901      	cbnz	r1, 800ce62 <__ascii_mbtowc+0x6>
 800ce60:	a901      	add	r1, sp, #4
 800ce62:	b142      	cbz	r2, 800ce76 <__ascii_mbtowc+0x1a>
 800ce64:	b14b      	cbz	r3, 800ce7a <__ascii_mbtowc+0x1e>
 800ce66:	7813      	ldrb	r3, [r2, #0]
 800ce68:	600b      	str	r3, [r1, #0]
 800ce6a:	7812      	ldrb	r2, [r2, #0]
 800ce6c:	1e10      	subs	r0, r2, #0
 800ce6e:	bf18      	it	ne
 800ce70:	2001      	movne	r0, #1
 800ce72:	b002      	add	sp, #8
 800ce74:	4770      	bx	lr
 800ce76:	4610      	mov	r0, r2
 800ce78:	e7fb      	b.n	800ce72 <__ascii_mbtowc+0x16>
 800ce7a:	f06f 0001 	mvn.w	r0, #1
 800ce7e:	e7f8      	b.n	800ce72 <__ascii_mbtowc+0x16>

0800ce80 <__sfputc_r>:
 800ce80:	6893      	ldr	r3, [r2, #8]
 800ce82:	3b01      	subs	r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	b410      	push	{r4}
 800ce88:	6093      	str	r3, [r2, #8]
 800ce8a:	da08      	bge.n	800ce9e <__sfputc_r+0x1e>
 800ce8c:	6994      	ldr	r4, [r2, #24]
 800ce8e:	42a3      	cmp	r3, r4
 800ce90:	db01      	blt.n	800ce96 <__sfputc_r+0x16>
 800ce92:	290a      	cmp	r1, #10
 800ce94:	d103      	bne.n	800ce9e <__sfputc_r+0x1e>
 800ce96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce9a:	f000 b94b 	b.w	800d134 <__swbuf_r>
 800ce9e:	6813      	ldr	r3, [r2, #0]
 800cea0:	1c58      	adds	r0, r3, #1
 800cea2:	6010      	str	r0, [r2, #0]
 800cea4:	7019      	strb	r1, [r3, #0]
 800cea6:	4608      	mov	r0, r1
 800cea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <__sfputs_r>:
 800ceae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb0:	4606      	mov	r6, r0
 800ceb2:	460f      	mov	r7, r1
 800ceb4:	4614      	mov	r4, r2
 800ceb6:	18d5      	adds	r5, r2, r3
 800ceb8:	42ac      	cmp	r4, r5
 800ceba:	d101      	bne.n	800cec0 <__sfputs_r+0x12>
 800cebc:	2000      	movs	r0, #0
 800cebe:	e007      	b.n	800ced0 <__sfputs_r+0x22>
 800cec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec4:	463a      	mov	r2, r7
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ffda 	bl	800ce80 <__sfputc_r>
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d1f3      	bne.n	800ceb8 <__sfputs_r+0xa>
 800ced0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ced4 <_vfiprintf_r>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	460d      	mov	r5, r1
 800ceda:	b09d      	sub	sp, #116	; 0x74
 800cedc:	4614      	mov	r4, r2
 800cede:	4698      	mov	r8, r3
 800cee0:	4606      	mov	r6, r0
 800cee2:	b118      	cbz	r0, 800ceec <_vfiprintf_r+0x18>
 800cee4:	6983      	ldr	r3, [r0, #24]
 800cee6:	b90b      	cbnz	r3, 800ceec <_vfiprintf_r+0x18>
 800cee8:	f7fd fdda 	bl	800aaa0 <__sinit>
 800ceec:	4b89      	ldr	r3, [pc, #548]	; (800d114 <_vfiprintf_r+0x240>)
 800ceee:	429d      	cmp	r5, r3
 800cef0:	d11b      	bne.n	800cf2a <_vfiprintf_r+0x56>
 800cef2:	6875      	ldr	r5, [r6, #4]
 800cef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cef6:	07d9      	lsls	r1, r3, #31
 800cef8:	d405      	bmi.n	800cf06 <_vfiprintf_r+0x32>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	059a      	lsls	r2, r3, #22
 800cefe:	d402      	bmi.n	800cf06 <_vfiprintf_r+0x32>
 800cf00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf02:	f7fd fe90 	bl	800ac26 <__retarget_lock_acquire_recursive>
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	071b      	lsls	r3, r3, #28
 800cf0a:	d501      	bpl.n	800cf10 <_vfiprintf_r+0x3c>
 800cf0c:	692b      	ldr	r3, [r5, #16]
 800cf0e:	b9eb      	cbnz	r3, 800cf4c <_vfiprintf_r+0x78>
 800cf10:	4629      	mov	r1, r5
 800cf12:	4630      	mov	r0, r6
 800cf14:	f000 f96e 	bl	800d1f4 <__swsetup_r>
 800cf18:	b1c0      	cbz	r0, 800cf4c <_vfiprintf_r+0x78>
 800cf1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf1c:	07dc      	lsls	r4, r3, #31
 800cf1e:	d50e      	bpl.n	800cf3e <_vfiprintf_r+0x6a>
 800cf20:	f04f 30ff 	mov.w	r0, #4294967295
 800cf24:	b01d      	add	sp, #116	; 0x74
 800cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2a:	4b7b      	ldr	r3, [pc, #492]	; (800d118 <_vfiprintf_r+0x244>)
 800cf2c:	429d      	cmp	r5, r3
 800cf2e:	d101      	bne.n	800cf34 <_vfiprintf_r+0x60>
 800cf30:	68b5      	ldr	r5, [r6, #8]
 800cf32:	e7df      	b.n	800cef4 <_vfiprintf_r+0x20>
 800cf34:	4b79      	ldr	r3, [pc, #484]	; (800d11c <_vfiprintf_r+0x248>)
 800cf36:	429d      	cmp	r5, r3
 800cf38:	bf08      	it	eq
 800cf3a:	68f5      	ldreq	r5, [r6, #12]
 800cf3c:	e7da      	b.n	800cef4 <_vfiprintf_r+0x20>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	0598      	lsls	r0, r3, #22
 800cf42:	d4ed      	bmi.n	800cf20 <_vfiprintf_r+0x4c>
 800cf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf46:	f7fd fe6f 	bl	800ac28 <__retarget_lock_release_recursive>
 800cf4a:	e7e9      	b.n	800cf20 <_vfiprintf_r+0x4c>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf50:	2320      	movs	r3, #32
 800cf52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf5a:	2330      	movs	r3, #48	; 0x30
 800cf5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d120 <_vfiprintf_r+0x24c>
 800cf60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf64:	f04f 0901 	mov.w	r9, #1
 800cf68:	4623      	mov	r3, r4
 800cf6a:	469a      	mov	sl, r3
 800cf6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf70:	b10a      	cbz	r2, 800cf76 <_vfiprintf_r+0xa2>
 800cf72:	2a25      	cmp	r2, #37	; 0x25
 800cf74:	d1f9      	bne.n	800cf6a <_vfiprintf_r+0x96>
 800cf76:	ebba 0b04 	subs.w	fp, sl, r4
 800cf7a:	d00b      	beq.n	800cf94 <_vfiprintf_r+0xc0>
 800cf7c:	465b      	mov	r3, fp
 800cf7e:	4622      	mov	r2, r4
 800cf80:	4629      	mov	r1, r5
 800cf82:	4630      	mov	r0, r6
 800cf84:	f7ff ff93 	bl	800ceae <__sfputs_r>
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f000 80aa 	beq.w	800d0e2 <_vfiprintf_r+0x20e>
 800cf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf90:	445a      	add	r2, fp
 800cf92:	9209      	str	r2, [sp, #36]	; 0x24
 800cf94:	f89a 3000 	ldrb.w	r3, [sl]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 80a2 	beq.w	800d0e2 <_vfiprintf_r+0x20e>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa8:	f10a 0a01 	add.w	sl, sl, #1
 800cfac:	9304      	str	r3, [sp, #16]
 800cfae:	9307      	str	r3, [sp, #28]
 800cfb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfb4:	931a      	str	r3, [sp, #104]	; 0x68
 800cfb6:	4654      	mov	r4, sl
 800cfb8:	2205      	movs	r2, #5
 800cfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbe:	4858      	ldr	r0, [pc, #352]	; (800d120 <_vfiprintf_r+0x24c>)
 800cfc0:	f7f3 f90e 	bl	80001e0 <memchr>
 800cfc4:	9a04      	ldr	r2, [sp, #16]
 800cfc6:	b9d8      	cbnz	r0, 800d000 <_vfiprintf_r+0x12c>
 800cfc8:	06d1      	lsls	r1, r2, #27
 800cfca:	bf44      	itt	mi
 800cfcc:	2320      	movmi	r3, #32
 800cfce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd2:	0713      	lsls	r3, r2, #28
 800cfd4:	bf44      	itt	mi
 800cfd6:	232b      	movmi	r3, #43	; 0x2b
 800cfd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe0:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe2:	d015      	beq.n	800d010 <_vfiprintf_r+0x13c>
 800cfe4:	9a07      	ldr	r2, [sp, #28]
 800cfe6:	4654      	mov	r4, sl
 800cfe8:	2000      	movs	r0, #0
 800cfea:	f04f 0c0a 	mov.w	ip, #10
 800cfee:	4621      	mov	r1, r4
 800cff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff4:	3b30      	subs	r3, #48	; 0x30
 800cff6:	2b09      	cmp	r3, #9
 800cff8:	d94e      	bls.n	800d098 <_vfiprintf_r+0x1c4>
 800cffa:	b1b0      	cbz	r0, 800d02a <_vfiprintf_r+0x156>
 800cffc:	9207      	str	r2, [sp, #28]
 800cffe:	e014      	b.n	800d02a <_vfiprintf_r+0x156>
 800d000:	eba0 0308 	sub.w	r3, r0, r8
 800d004:	fa09 f303 	lsl.w	r3, r9, r3
 800d008:	4313      	orrs	r3, r2
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	46a2      	mov	sl, r4
 800d00e:	e7d2      	b.n	800cfb6 <_vfiprintf_r+0xe2>
 800d010:	9b03      	ldr	r3, [sp, #12]
 800d012:	1d19      	adds	r1, r3, #4
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	9103      	str	r1, [sp, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	bfbb      	ittet	lt
 800d01c:	425b      	neglt	r3, r3
 800d01e:	f042 0202 	orrlt.w	r2, r2, #2
 800d022:	9307      	strge	r3, [sp, #28]
 800d024:	9307      	strlt	r3, [sp, #28]
 800d026:	bfb8      	it	lt
 800d028:	9204      	strlt	r2, [sp, #16]
 800d02a:	7823      	ldrb	r3, [r4, #0]
 800d02c:	2b2e      	cmp	r3, #46	; 0x2e
 800d02e:	d10c      	bne.n	800d04a <_vfiprintf_r+0x176>
 800d030:	7863      	ldrb	r3, [r4, #1]
 800d032:	2b2a      	cmp	r3, #42	; 0x2a
 800d034:	d135      	bne.n	800d0a2 <_vfiprintf_r+0x1ce>
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	1d1a      	adds	r2, r3, #4
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	9203      	str	r2, [sp, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	bfb8      	it	lt
 800d042:	f04f 33ff 	movlt.w	r3, #4294967295
 800d046:	3402      	adds	r4, #2
 800d048:	9305      	str	r3, [sp, #20]
 800d04a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d130 <_vfiprintf_r+0x25c>
 800d04e:	7821      	ldrb	r1, [r4, #0]
 800d050:	2203      	movs	r2, #3
 800d052:	4650      	mov	r0, sl
 800d054:	f7f3 f8c4 	bl	80001e0 <memchr>
 800d058:	b140      	cbz	r0, 800d06c <_vfiprintf_r+0x198>
 800d05a:	2340      	movs	r3, #64	; 0x40
 800d05c:	eba0 000a 	sub.w	r0, r0, sl
 800d060:	fa03 f000 	lsl.w	r0, r3, r0
 800d064:	9b04      	ldr	r3, [sp, #16]
 800d066:	4303      	orrs	r3, r0
 800d068:	3401      	adds	r4, #1
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d070:	482c      	ldr	r0, [pc, #176]	; (800d124 <_vfiprintf_r+0x250>)
 800d072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d076:	2206      	movs	r2, #6
 800d078:	f7f3 f8b2 	bl	80001e0 <memchr>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d03f      	beq.n	800d100 <_vfiprintf_r+0x22c>
 800d080:	4b29      	ldr	r3, [pc, #164]	; (800d128 <_vfiprintf_r+0x254>)
 800d082:	bb1b      	cbnz	r3, 800d0cc <_vfiprintf_r+0x1f8>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	3307      	adds	r3, #7
 800d088:	f023 0307 	bic.w	r3, r3, #7
 800d08c:	3308      	adds	r3, #8
 800d08e:	9303      	str	r3, [sp, #12]
 800d090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d092:	443b      	add	r3, r7
 800d094:	9309      	str	r3, [sp, #36]	; 0x24
 800d096:	e767      	b.n	800cf68 <_vfiprintf_r+0x94>
 800d098:	fb0c 3202 	mla	r2, ip, r2, r3
 800d09c:	460c      	mov	r4, r1
 800d09e:	2001      	movs	r0, #1
 800d0a0:	e7a5      	b.n	800cfee <_vfiprintf_r+0x11a>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	3401      	adds	r4, #1
 800d0a6:	9305      	str	r3, [sp, #20]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	f04f 0c0a 	mov.w	ip, #10
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0b4:	3a30      	subs	r2, #48	; 0x30
 800d0b6:	2a09      	cmp	r2, #9
 800d0b8:	d903      	bls.n	800d0c2 <_vfiprintf_r+0x1ee>
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0c5      	beq.n	800d04a <_vfiprintf_r+0x176>
 800d0be:	9105      	str	r1, [sp, #20]
 800d0c0:	e7c3      	b.n	800d04a <_vfiprintf_r+0x176>
 800d0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e7f0      	b.n	800d0ae <_vfiprintf_r+0x1da>
 800d0cc:	ab03      	add	r3, sp, #12
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	462a      	mov	r2, r5
 800d0d2:	4b16      	ldr	r3, [pc, #88]	; (800d12c <_vfiprintf_r+0x258>)
 800d0d4:	a904      	add	r1, sp, #16
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7fd fef2 	bl	800aec0 <_printf_float>
 800d0dc:	4607      	mov	r7, r0
 800d0de:	1c78      	adds	r0, r7, #1
 800d0e0:	d1d6      	bne.n	800d090 <_vfiprintf_r+0x1bc>
 800d0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e4:	07d9      	lsls	r1, r3, #31
 800d0e6:	d405      	bmi.n	800d0f4 <_vfiprintf_r+0x220>
 800d0e8:	89ab      	ldrh	r3, [r5, #12]
 800d0ea:	059a      	lsls	r2, r3, #22
 800d0ec:	d402      	bmi.n	800d0f4 <_vfiprintf_r+0x220>
 800d0ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0f0:	f7fd fd9a 	bl	800ac28 <__retarget_lock_release_recursive>
 800d0f4:	89ab      	ldrh	r3, [r5, #12]
 800d0f6:	065b      	lsls	r3, r3, #25
 800d0f8:	f53f af12 	bmi.w	800cf20 <_vfiprintf_r+0x4c>
 800d0fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0fe:	e711      	b.n	800cf24 <_vfiprintf_r+0x50>
 800d100:	ab03      	add	r3, sp, #12
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	462a      	mov	r2, r5
 800d106:	4b09      	ldr	r3, [pc, #36]	; (800d12c <_vfiprintf_r+0x258>)
 800d108:	a904      	add	r1, sp, #16
 800d10a:	4630      	mov	r0, r6
 800d10c:	f7fe f97c 	bl	800b408 <_printf_i>
 800d110:	e7e4      	b.n	800d0dc <_vfiprintf_r+0x208>
 800d112:	bf00      	nop
 800d114:	08010474 	.word	0x08010474
 800d118:	08010494 	.word	0x08010494
 800d11c:	08010454 	.word	0x08010454
 800d120:	0801071a 	.word	0x0801071a
 800d124:	08010724 	.word	0x08010724
 800d128:	0800aec1 	.word	0x0800aec1
 800d12c:	0800ceaf 	.word	0x0800ceaf
 800d130:	08010720 	.word	0x08010720

0800d134 <__swbuf_r>:
 800d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d136:	460e      	mov	r6, r1
 800d138:	4614      	mov	r4, r2
 800d13a:	4605      	mov	r5, r0
 800d13c:	b118      	cbz	r0, 800d146 <__swbuf_r+0x12>
 800d13e:	6983      	ldr	r3, [r0, #24]
 800d140:	b90b      	cbnz	r3, 800d146 <__swbuf_r+0x12>
 800d142:	f7fd fcad 	bl	800aaa0 <__sinit>
 800d146:	4b21      	ldr	r3, [pc, #132]	; (800d1cc <__swbuf_r+0x98>)
 800d148:	429c      	cmp	r4, r3
 800d14a:	d12b      	bne.n	800d1a4 <__swbuf_r+0x70>
 800d14c:	686c      	ldr	r4, [r5, #4]
 800d14e:	69a3      	ldr	r3, [r4, #24]
 800d150:	60a3      	str	r3, [r4, #8]
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	071a      	lsls	r2, r3, #28
 800d156:	d52f      	bpl.n	800d1b8 <__swbuf_r+0x84>
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	b36b      	cbz	r3, 800d1b8 <__swbuf_r+0x84>
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	1ac0      	subs	r0, r0, r3
 800d162:	6963      	ldr	r3, [r4, #20]
 800d164:	b2f6      	uxtb	r6, r6
 800d166:	4283      	cmp	r3, r0
 800d168:	4637      	mov	r7, r6
 800d16a:	dc04      	bgt.n	800d176 <__swbuf_r+0x42>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4628      	mov	r0, r5
 800d170:	f7ff f9e6 	bl	800c540 <_fflush_r>
 800d174:	bb30      	cbnz	r0, 800d1c4 <__swbuf_r+0x90>
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	3b01      	subs	r3, #1
 800d17a:	60a3      	str	r3, [r4, #8]
 800d17c:	6823      	ldr	r3, [r4, #0]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	6022      	str	r2, [r4, #0]
 800d182:	701e      	strb	r6, [r3, #0]
 800d184:	6963      	ldr	r3, [r4, #20]
 800d186:	3001      	adds	r0, #1
 800d188:	4283      	cmp	r3, r0
 800d18a:	d004      	beq.n	800d196 <__swbuf_r+0x62>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	07db      	lsls	r3, r3, #31
 800d190:	d506      	bpl.n	800d1a0 <__swbuf_r+0x6c>
 800d192:	2e0a      	cmp	r6, #10
 800d194:	d104      	bne.n	800d1a0 <__swbuf_r+0x6c>
 800d196:	4621      	mov	r1, r4
 800d198:	4628      	mov	r0, r5
 800d19a:	f7ff f9d1 	bl	800c540 <_fflush_r>
 800d19e:	b988      	cbnz	r0, 800d1c4 <__swbuf_r+0x90>
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	; (800d1d0 <__swbuf_r+0x9c>)
 800d1a6:	429c      	cmp	r4, r3
 800d1a8:	d101      	bne.n	800d1ae <__swbuf_r+0x7a>
 800d1aa:	68ac      	ldr	r4, [r5, #8]
 800d1ac:	e7cf      	b.n	800d14e <__swbuf_r+0x1a>
 800d1ae:	4b09      	ldr	r3, [pc, #36]	; (800d1d4 <__swbuf_r+0xa0>)
 800d1b0:	429c      	cmp	r4, r3
 800d1b2:	bf08      	it	eq
 800d1b4:	68ec      	ldreq	r4, [r5, #12]
 800d1b6:	e7ca      	b.n	800d14e <__swbuf_r+0x1a>
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f000 f81a 	bl	800d1f4 <__swsetup_r>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d0cb      	beq.n	800d15c <__swbuf_r+0x28>
 800d1c4:	f04f 37ff 	mov.w	r7, #4294967295
 800d1c8:	e7ea      	b.n	800d1a0 <__swbuf_r+0x6c>
 800d1ca:	bf00      	nop
 800d1cc:	08010474 	.word	0x08010474
 800d1d0:	08010494 	.word	0x08010494
 800d1d4:	08010454 	.word	0x08010454

0800d1d8 <__ascii_wctomb>:
 800d1d8:	b149      	cbz	r1, 800d1ee <__ascii_wctomb+0x16>
 800d1da:	2aff      	cmp	r2, #255	; 0xff
 800d1dc:	bf85      	ittet	hi
 800d1de:	238a      	movhi	r3, #138	; 0x8a
 800d1e0:	6003      	strhi	r3, [r0, #0]
 800d1e2:	700a      	strbls	r2, [r1, #0]
 800d1e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1e8:	bf98      	it	ls
 800d1ea:	2001      	movls	r0, #1
 800d1ec:	4770      	bx	lr
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <__swsetup_r>:
 800d1f4:	4b32      	ldr	r3, [pc, #200]	; (800d2c0 <__swsetup_r+0xcc>)
 800d1f6:	b570      	push	{r4, r5, r6, lr}
 800d1f8:	681d      	ldr	r5, [r3, #0]
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	b125      	cbz	r5, 800d20a <__swsetup_r+0x16>
 800d200:	69ab      	ldr	r3, [r5, #24]
 800d202:	b913      	cbnz	r3, 800d20a <__swsetup_r+0x16>
 800d204:	4628      	mov	r0, r5
 800d206:	f7fd fc4b 	bl	800aaa0 <__sinit>
 800d20a:	4b2e      	ldr	r3, [pc, #184]	; (800d2c4 <__swsetup_r+0xd0>)
 800d20c:	429c      	cmp	r4, r3
 800d20e:	d10f      	bne.n	800d230 <__swsetup_r+0x3c>
 800d210:	686c      	ldr	r4, [r5, #4]
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d218:	0719      	lsls	r1, r3, #28
 800d21a:	d42c      	bmi.n	800d276 <__swsetup_r+0x82>
 800d21c:	06dd      	lsls	r5, r3, #27
 800d21e:	d411      	bmi.n	800d244 <__swsetup_r+0x50>
 800d220:	2309      	movs	r3, #9
 800d222:	6033      	str	r3, [r6, #0]
 800d224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	e03e      	b.n	800d2ae <__swsetup_r+0xba>
 800d230:	4b25      	ldr	r3, [pc, #148]	; (800d2c8 <__swsetup_r+0xd4>)
 800d232:	429c      	cmp	r4, r3
 800d234:	d101      	bne.n	800d23a <__swsetup_r+0x46>
 800d236:	68ac      	ldr	r4, [r5, #8]
 800d238:	e7eb      	b.n	800d212 <__swsetup_r+0x1e>
 800d23a:	4b24      	ldr	r3, [pc, #144]	; (800d2cc <__swsetup_r+0xd8>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	bf08      	it	eq
 800d240:	68ec      	ldreq	r4, [r5, #12]
 800d242:	e7e6      	b.n	800d212 <__swsetup_r+0x1e>
 800d244:	0758      	lsls	r0, r3, #29
 800d246:	d512      	bpl.n	800d26e <__swsetup_r+0x7a>
 800d248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d24a:	b141      	cbz	r1, 800d25e <__swsetup_r+0x6a>
 800d24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d250:	4299      	cmp	r1, r3
 800d252:	d002      	beq.n	800d25a <__swsetup_r+0x66>
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff fd73 	bl	800cd40 <_free_r>
 800d25a:	2300      	movs	r3, #0
 800d25c:	6363      	str	r3, [r4, #52]	; 0x34
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d264:	81a3      	strh	r3, [r4, #12]
 800d266:	2300      	movs	r3, #0
 800d268:	6063      	str	r3, [r4, #4]
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f043 0308 	orr.w	r3, r3, #8
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	6923      	ldr	r3, [r4, #16]
 800d278:	b94b      	cbnz	r3, 800d28e <__swsetup_r+0x9a>
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d284:	d003      	beq.n	800d28e <__swsetup_r+0x9a>
 800d286:	4621      	mov	r1, r4
 800d288:	4630      	mov	r0, r6
 800d28a:	f000 f84d 	bl	800d328 <__smakebuf_r>
 800d28e:	89a0      	ldrh	r0, [r4, #12]
 800d290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d294:	f010 0301 	ands.w	r3, r0, #1
 800d298:	d00a      	beq.n	800d2b0 <__swsetup_r+0xbc>
 800d29a:	2300      	movs	r3, #0
 800d29c:	60a3      	str	r3, [r4, #8]
 800d29e:	6963      	ldr	r3, [r4, #20]
 800d2a0:	425b      	negs	r3, r3
 800d2a2:	61a3      	str	r3, [r4, #24]
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	b943      	cbnz	r3, 800d2ba <__swsetup_r+0xc6>
 800d2a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2ac:	d1ba      	bne.n	800d224 <__swsetup_r+0x30>
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}
 800d2b0:	0781      	lsls	r1, r0, #30
 800d2b2:	bf58      	it	pl
 800d2b4:	6963      	ldrpl	r3, [r4, #20]
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	e7f4      	b.n	800d2a4 <__swsetup_r+0xb0>
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e7f7      	b.n	800d2ae <__swsetup_r+0xba>
 800d2be:	bf00      	nop
 800d2c0:	20000078 	.word	0x20000078
 800d2c4:	08010474 	.word	0x08010474
 800d2c8:	08010494 	.word	0x08010494
 800d2cc:	08010454 	.word	0x08010454

0800d2d0 <abort>:
 800d2d0:	b508      	push	{r3, lr}
 800d2d2:	2006      	movs	r0, #6
 800d2d4:	f000 f890 	bl	800d3f8 <raise>
 800d2d8:	2001      	movs	r0, #1
 800d2da:	f000 f8d3 	bl	800d484 <_exit>

0800d2de <__swhatbuf_r>:
 800d2de:	b570      	push	{r4, r5, r6, lr}
 800d2e0:	460e      	mov	r6, r1
 800d2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e6:	2900      	cmp	r1, #0
 800d2e8:	b096      	sub	sp, #88	; 0x58
 800d2ea:	4614      	mov	r4, r2
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	da08      	bge.n	800d302 <__swhatbuf_r+0x24>
 800d2f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	602a      	str	r2, [r5, #0]
 800d2f8:	061a      	lsls	r2, r3, #24
 800d2fa:	d410      	bmi.n	800d31e <__swhatbuf_r+0x40>
 800d2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d300:	e00e      	b.n	800d320 <__swhatbuf_r+0x42>
 800d302:	466a      	mov	r2, sp
 800d304:	f000 f894 	bl	800d430 <_fstat_r>
 800d308:	2800      	cmp	r0, #0
 800d30a:	dbf1      	blt.n	800d2f0 <__swhatbuf_r+0x12>
 800d30c:	9a01      	ldr	r2, [sp, #4]
 800d30e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d316:	425a      	negs	r2, r3
 800d318:	415a      	adcs	r2, r3
 800d31a:	602a      	str	r2, [r5, #0]
 800d31c:	e7ee      	b.n	800d2fc <__swhatbuf_r+0x1e>
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	2000      	movs	r0, #0
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	b016      	add	sp, #88	; 0x58
 800d326:	bd70      	pop	{r4, r5, r6, pc}

0800d328 <__smakebuf_r>:
 800d328:	898b      	ldrh	r3, [r1, #12]
 800d32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d32c:	079d      	lsls	r5, r3, #30
 800d32e:	4606      	mov	r6, r0
 800d330:	460c      	mov	r4, r1
 800d332:	d507      	bpl.n	800d344 <__smakebuf_r+0x1c>
 800d334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	6123      	str	r3, [r4, #16]
 800d33c:	2301      	movs	r3, #1
 800d33e:	6163      	str	r3, [r4, #20]
 800d340:	b002      	add	sp, #8
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	ab01      	add	r3, sp, #4
 800d346:	466a      	mov	r2, sp
 800d348:	f7ff ffc9 	bl	800d2de <__swhatbuf_r>
 800d34c:	9900      	ldr	r1, [sp, #0]
 800d34e:	4605      	mov	r5, r0
 800d350:	4630      	mov	r0, r6
 800d352:	f7fd fca1 	bl	800ac98 <_malloc_r>
 800d356:	b948      	cbnz	r0, 800d36c <__smakebuf_r+0x44>
 800d358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35c:	059a      	lsls	r2, r3, #22
 800d35e:	d4ef      	bmi.n	800d340 <__smakebuf_r+0x18>
 800d360:	f023 0303 	bic.w	r3, r3, #3
 800d364:	f043 0302 	orr.w	r3, r3, #2
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	e7e3      	b.n	800d334 <__smakebuf_r+0xc>
 800d36c:	4b0d      	ldr	r3, [pc, #52]	; (800d3a4 <__smakebuf_r+0x7c>)
 800d36e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	6020      	str	r0, [r4, #0]
 800d374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d378:	81a3      	strh	r3, [r4, #12]
 800d37a:	9b00      	ldr	r3, [sp, #0]
 800d37c:	6163      	str	r3, [r4, #20]
 800d37e:	9b01      	ldr	r3, [sp, #4]
 800d380:	6120      	str	r0, [r4, #16]
 800d382:	b15b      	cbz	r3, 800d39c <__smakebuf_r+0x74>
 800d384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d388:	4630      	mov	r0, r6
 800d38a:	f000 f863 	bl	800d454 <_isatty_r>
 800d38e:	b128      	cbz	r0, 800d39c <__smakebuf_r+0x74>
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	f023 0303 	bic.w	r3, r3, #3
 800d396:	f043 0301 	orr.w	r3, r3, #1
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	89a0      	ldrh	r0, [r4, #12]
 800d39e:	4305      	orrs	r5, r0
 800d3a0:	81a5      	strh	r5, [r4, #12]
 800d3a2:	e7cd      	b.n	800d340 <__smakebuf_r+0x18>
 800d3a4:	0800aa39 	.word	0x0800aa39

0800d3a8 <_raise_r>:
 800d3a8:	291f      	cmp	r1, #31
 800d3aa:	b538      	push	{r3, r4, r5, lr}
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	460d      	mov	r5, r1
 800d3b0:	d904      	bls.n	800d3bc <_raise_r+0x14>
 800d3b2:	2316      	movs	r3, #22
 800d3b4:	6003      	str	r3, [r0, #0]
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3be:	b112      	cbz	r2, 800d3c6 <_raise_r+0x1e>
 800d3c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c4:	b94b      	cbnz	r3, 800d3da <_raise_r+0x32>
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f000 f830 	bl	800d42c <_getpid_r>
 800d3cc:	462a      	mov	r2, r5
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3d6:	f000 b817 	b.w	800d408 <_kill_r>
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d00a      	beq.n	800d3f4 <_raise_r+0x4c>
 800d3de:	1c59      	adds	r1, r3, #1
 800d3e0:	d103      	bne.n	800d3ea <_raise_r+0x42>
 800d3e2:	2316      	movs	r3, #22
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	e7e7      	b.n	800d3ba <_raise_r+0x12>
 800d3ea:	2400      	movs	r4, #0
 800d3ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	4798      	blx	r3
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e7e0      	b.n	800d3ba <_raise_r+0x12>

0800d3f8 <raise>:
 800d3f8:	4b02      	ldr	r3, [pc, #8]	; (800d404 <raise+0xc>)
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	f7ff bfd3 	b.w	800d3a8 <_raise_r>
 800d402:	bf00      	nop
 800d404:	20000078 	.word	0x20000078

0800d408 <_kill_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d07      	ldr	r5, [pc, #28]	; (800d428 <_kill_r+0x20>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	4611      	mov	r1, r2
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	f000 f82d 	bl	800d474 <_kill>
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	d102      	bne.n	800d424 <_kill_r+0x1c>
 800d41e:	682b      	ldr	r3, [r5, #0]
 800d420:	b103      	cbz	r3, 800d424 <_kill_r+0x1c>
 800d422:	6023      	str	r3, [r4, #0]
 800d424:	bd38      	pop	{r3, r4, r5, pc}
 800d426:	bf00      	nop
 800d428:	20005120 	.word	0x20005120

0800d42c <_getpid_r>:
 800d42c:	f7fd b934 	b.w	800a698 <_getpid>

0800d430 <_fstat_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_fstat_r+0x20>)
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4608      	mov	r0, r1
 800d43a:	4611      	mov	r1, r2
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	f7fd f94e 	bl	800a6de <_fstat>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	d102      	bne.n	800d44c <_fstat_r+0x1c>
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	b103      	cbz	r3, 800d44c <_fstat_r+0x1c>
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	bd38      	pop	{r3, r4, r5, pc}
 800d44e:	bf00      	nop
 800d450:	20005120 	.word	0x20005120

0800d454 <_isatty_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d06      	ldr	r5, [pc, #24]	; (800d470 <_isatty_r+0x1c>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	f7fd faa4 	bl	800a9ac <_isatty>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <_isatty_r+0x1a>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	b103      	cbz	r3, 800d46e <_isatty_r+0x1a>
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	20005120 	.word	0x20005120

0800d474 <_kill>:
 800d474:	4b02      	ldr	r3, [pc, #8]	; (800d480 <_kill+0xc>)
 800d476:	2258      	movs	r2, #88	; 0x58
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f04f 30ff 	mov.w	r0, #4294967295
 800d47e:	4770      	bx	lr
 800d480:	20005120 	.word	0x20005120

0800d484 <_exit>:
 800d484:	e7fe      	b.n	800d484 <_exit>
	...

0800d488 <_init>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	bf00      	nop
 800d48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d48e:	bc08      	pop	{r3}
 800d490:	469e      	mov	lr, r3
 800d492:	4770      	bx	lr

0800d494 <_fini>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	bf00      	nop
 800d498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49a:	bc08      	pop	{r3}
 800d49c:	469e      	mov	lr, r3
 800d49e:	4770      	bx	lr
